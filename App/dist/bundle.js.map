{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/rxjs/Observable.js","webpack:///./node_modules/rxjs/Subscriber.js","webpack:///./node_modules/rxjs/util/subscribeToResult.js","webpack:///./node_modules/rxjs/OuterSubscriber.js","webpack:///./node_modules/rxjs/scheduler/async.js","webpack:///./node_modules/rxjs/Subscription.js","webpack:///./node_modules/rxjs/util/errorObject.js","webpack:///./node_modules/rxjs/Subject.js","webpack:///./node_modules/rxjs/util/tryCatch.js","webpack:///./node_modules/rxjs/util/root.js","webpack:///./node_modules/rxjs/util/isScheduler.js","webpack:///./node_modules/rxjs/util/isArray.js","webpack:///./node_modules/rxjs/observable/EmptyObservable.js","webpack:///./node_modules/rxjs/observable/ArrayObservable.js","webpack:///./node_modules/rxjs/operators/multicast.js","webpack:///./node_modules/rxjs/Rx.js","webpack:///./node_modules/rxjs/operators/reduce.js","webpack:///./node_modules/rxjs/util/ArgumentOutOfRangeError.js","webpack:///./node_modules/rxjs/operators/map.js","webpack:///./node_modules/rxjs/scheduler/AsyncScheduler.js","webpack:///./node_modules/rxjs/scheduler/AsyncAction.js","webpack:///./node_modules/rxjs/util/isNumeric.js","webpack:///./node_modules/rxjs/operators/mergeMap.js","webpack:///./node_modules/rxjs/Notification.js","webpack:///./node_modules/rxjs/observable/concat.js","webpack:///./node_modules/rxjs/symbol/iterator.js","webpack:///./node_modules/rxjs/operators/throttle.js","webpack:///./node_modules/rxjs/util/EmptyError.js","webpack:///./node_modules/rxjs/ReplaySubject.js","webpack:///./node_modules/rxjs/operators/zip.js","webpack:///./node_modules/rxjs/util/isDate.js","webpack:///./node_modules/rxjs/observable/merge.js","webpack:///./node_modules/rxjs/operators/mergeAll.js","webpack:///./node_modules/rxjs/operators/observeOn.js","webpack:///./node_modules/rxjs/operators/combineLatest.js","webpack:///./node_modules/rxjs/AsyncSubject.js","webpack:///./node_modules/rxjs/util/ObjectUnsubscribedError.js","webpack:///./node_modules/rxjs/symbol/observable.js","webpack:///./node_modules/rxjs/symbol/rxSubscriber.js","webpack:///./node_modules/rxjs/util/isFunction.js","webpack:///./node_modules/rxjs/operators/timestamp.js","webpack:///./node_modules/rxjs/operators/switchMap.js","webpack:///./node_modules/rxjs/operators/refCount.js","webpack:///./node_modules/rxjs/operators/takeLast.js","webpack:///./node_modules/rxjs/operators/scan.js","webpack:///./node_modules/rxjs/operators/audit.js","webpack:///./node_modules/rxjs/operators/find.js","webpack:///./node_modules/rxjs/operators/filter.js","webpack:///./node_modules/rxjs/operators/distinctUntilChanged.js","webpack:///./node_modules/rxjs/operators/defaultIfEmpty.js","webpack:///./node_modules/rxjs/operators/concatMap.js","webpack:///./node_modules/rxjs/operators/onErrorResumeNext.js","webpack:///./node_modules/rxjs/observable/race.js","webpack:///./node_modules/rxjs/observable/interval.js","webpack:///./node_modules/rxjs/operators/concatAll.js","webpack:///./node_modules/rxjs/observable/ScalarObservable.js","webpack:///./node_modules/rxjs/util/noop.js","webpack:///./node_modules/rxjs/util/pipe.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/rxjs/scheduler/VirtualTimeScheduler.js","webpack:///./node_modules/rxjs/util/applyMixins.js","webpack:///./node_modules/rxjs/testing/SubscriptionLog.js","webpack:///./node_modules/rxjs/testing/SubscriptionLoggable.js","webpack:///./node_modules/rxjs/operators/zipAll.js","webpack:///./node_modules/rxjs/operators/withLatestFrom.js","webpack:///./node_modules/rxjs/operators/windowWhen.js","webpack:///./node_modules/rxjs/operators/windowToggle.js","webpack:///./node_modules/rxjs/operators/windowTime.js","webpack:///./node_modules/rxjs/operators/windowCount.js","webpack:///./node_modules/rxjs/operators/window.js","webpack:///./node_modules/rxjs/operators/toArray.js","webpack:///./node_modules/rxjs/operators/timeoutWith.js","webpack:///./node_modules/rxjs/util/TimeoutError.js","webpack:///./node_modules/rxjs/operators/timeout.js","webpack:///./node_modules/rxjs/operators/timeInterval.js","webpack:///./node_modules/rxjs/operator/timeInterval.js","webpack:///./node_modules/rxjs/operators/throttleTime.js","webpack:///./node_modules/rxjs/operators/takeWhile.js","webpack:///./node_modules/rxjs/operators/takeUntil.js","webpack:///./node_modules/rxjs/operators/take.js","webpack:///./node_modules/rxjs/operators/switchMapTo.js","webpack:///./node_modules/rxjs/operators/switchAll.js","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/rxjs/scheduler/asap.js","webpack:///./node_modules/rxjs/operators/startWith.js","webpack:///./node_modules/rxjs/operators/skipWhile.js","webpack:///./node_modules/rxjs/operators/skipUntil.js","webpack:///./node_modules/rxjs/operators/skipLast.js","webpack:///./node_modules/rxjs/operators/skip.js","webpack:///./node_modules/rxjs/operators/single.js","webpack:///./node_modules/rxjs/operators/shareReplay.js","webpack:///./node_modules/rxjs/operators/share.js","webpack:///./node_modules/rxjs/operators/sequenceEqual.js","webpack:///./node_modules/rxjs/operators/sampleTime.js","webpack:///./node_modules/rxjs/operators/sample.js","webpack:///./node_modules/rxjs/operators/retryWhen.js","webpack:///./node_modules/rxjs/operators/retry.js","webpack:///./node_modules/rxjs/operators/repeatWhen.js","webpack:///./node_modules/rxjs/operators/repeat.js","webpack:///./node_modules/rxjs/operators/race.js","webpack:///./node_modules/rxjs/operators/publishLast.js","webpack:///./node_modules/rxjs/operators/publishReplay.js","webpack:///./node_modules/rxjs/BehaviorSubject.js","webpack:///./node_modules/rxjs/operators/publishBehavior.js","webpack:///./node_modules/rxjs/operators/publish.js","webpack:///./node_modules/rxjs/operators/pluck.js","webpack:///./node_modules/rxjs/operators/partition.js","webpack:///./node_modules/rxjs/operators/pairwise.js","webpack:///./node_modules/rxjs/observable/ConnectableObservable.js","webpack:///./node_modules/rxjs/operators/min.js","webpack:///./node_modules/rxjs/operators/mergeScan.js","webpack:///./node_modules/rxjs/operators/mergeMapTo.js","webpack:///./node_modules/rxjs/operators/merge.js","webpack:///./node_modules/rxjs/operators/max.js","webpack:///./node_modules/rxjs/operators/materialize.js","webpack:///./node_modules/rxjs/operators/mapTo.js","webpack:///./node_modules/rxjs/operators/every.js","webpack:///./node_modules/rxjs/operators/last.js","webpack:///./node_modules/rxjs/operators/auditTime.js","webpack:///./node_modules/rxjs/operators/isEmpty.js","webpack:///./node_modules/rxjs/operators/ignoreElements.js","webpack:///./node_modules/rxjs/operators/groupBy.js","webpack:///./node_modules/rxjs/operators/first.js","webpack:///./node_modules/rxjs/operators/findIndex.js","webpack:///./node_modules/rxjs/operators/finalize.js","webpack:///./node_modules/rxjs/operators/elementAt.js","webpack:///./node_modules/rxjs/operators/expand.js","webpack:///./node_modules/rxjs/operators/exhaustMap.js","webpack:///./node_modules/rxjs/operators/exhaust.js","webpack:///./node_modules/rxjs/operators/tap.js","webpack:///./node_modules/rxjs/operators/distinctUntilKeyChanged.js","webpack:///./node_modules/rxjs/operators/distinct.js","webpack:///./node_modules/rxjs/operators/delayWhen.js","webpack:///./node_modules/rxjs/operators/delay.js","webpack:///./node_modules/rxjs/operators/debounceTime.js","webpack:///./node_modules/rxjs/operators/debounce.js","webpack:///./node_modules/rxjs/operators/dematerialize.js","webpack:///./node_modules/rxjs/operators/count.js","webpack:///./node_modules/rxjs/operators/concatMapTo.js","webpack:///./node_modules/rxjs/operators/concat.js","webpack:///./node_modules/rxjs/operators/combineAll.js","webpack:///./node_modules/rxjs/operators/catchError.js","webpack:///./node_modules/rxjs/operators/bufferWhen.js","webpack:///./node_modules/rxjs/operators/bufferToggle.js","webpack:///./node_modules/rxjs/operators/bufferTime.js","webpack:///./node_modules/rxjs/operators/bufferCount.js","webpack:///./node_modules/rxjs/operators/buffer.js","webpack:///./node_modules/rxjs/scheduler/queue.js","webpack:///./node_modules/rxjs/observable/dom/AjaxObservable.js","webpack:///./node_modules/rxjs/observable/timer.js","webpack:///./node_modules/rxjs/util/identity.js","webpack:///./node_modules/rxjs/observable/PromiseObservable.js","webpack:///./node_modules/rxjs/observable/FromObservable.js","webpack:///./node_modules/rxjs/observable/from.js","webpack:///./node_modules/rxjs/observable/of.js","webpack:///./node_modules/rxjs/util/isPromise.js","webpack:///./node_modules/rxjs/util/isArrayLike.js","webpack:///./node_modules/rxjs/SubjectSubscription.js","webpack:///./node_modules/rxjs/Observer.js","webpack:///./node_modules/rxjs/util/UnsubscriptionError.js","webpack:///./node_modules/rxjs/util/isObject.js","webpack:///./src/database-service.js","webpack:///./src/index.js","webpack:///./src/hotels-service.js","webpack:///./node_modules/rxjs/operators.js","webpack:///./node_modules/rxjs/scheduler/AnimationFrameScheduler.js","webpack:///./node_modules/rxjs/util/AnimationFrame.js","webpack:///./node_modules/rxjs/scheduler/AnimationFrameAction.js","webpack:///./node_modules/rxjs/scheduler/animationFrame.js","webpack:///./node_modules/rxjs/testing/HotObservable.js","webpack:///./node_modules/rxjs/testing/ColdObservable.js","webpack:///./node_modules/rxjs/testing/TestScheduler.js","webpack:///./node_modules/rxjs/operator/zipAll.js","webpack:///./node_modules/rxjs/add/operator/zipAll.js","webpack:///./node_modules/rxjs/operator/zip.js","webpack:///./node_modules/rxjs/add/operator/zip.js","webpack:///./node_modules/rxjs/operator/withLatestFrom.js","webpack:///./node_modules/rxjs/add/operator/withLatestFrom.js","webpack:///./node_modules/rxjs/operator/windowWhen.js","webpack:///./node_modules/rxjs/add/operator/windowWhen.js","webpack:///./node_modules/rxjs/operator/windowToggle.js","webpack:///./node_modules/rxjs/add/operator/windowToggle.js","webpack:///./node_modules/rxjs/operator/windowTime.js","webpack:///./node_modules/rxjs/add/operator/windowTime.js","webpack:///./node_modules/rxjs/operator/windowCount.js","webpack:///./node_modules/rxjs/add/operator/windowCount.js","webpack:///./node_modules/rxjs/operator/window.js","webpack:///./node_modules/rxjs/add/operator/window.js","webpack:///./node_modules/rxjs/operator/toArray.js","webpack:///./node_modules/rxjs/add/operator/toArray.js","webpack:///./node_modules/rxjs/operator/timestamp.js","webpack:///./node_modules/rxjs/add/operator/timestamp.js","webpack:///./node_modules/rxjs/operator/timeoutWith.js","webpack:///./node_modules/rxjs/add/operator/timeoutWith.js","webpack:///./node_modules/rxjs/operator/timeout.js","webpack:///./node_modules/rxjs/add/operator/timeout.js","webpack:///./node_modules/rxjs/add/operator/timeInterval.js","webpack:///./node_modules/rxjs/operator/throttleTime.js","webpack:///./node_modules/rxjs/add/operator/throttleTime.js","webpack:///./node_modules/rxjs/operator/throttle.js","webpack:///./node_modules/rxjs/add/operator/throttle.js","webpack:///./node_modules/rxjs/operator/takeWhile.js","webpack:///./node_modules/rxjs/add/operator/takeWhile.js","webpack:///./node_modules/rxjs/operator/takeUntil.js","webpack:///./node_modules/rxjs/add/operator/takeUntil.js","webpack:///./node_modules/rxjs/operator/takeLast.js","webpack:///./node_modules/rxjs/add/operator/takeLast.js","webpack:///./node_modules/rxjs/operator/take.js","webpack:///./node_modules/rxjs/add/operator/take.js","webpack:///./node_modules/rxjs/operator/switchMapTo.js","webpack:///./node_modules/rxjs/add/operator/switchMapTo.js","webpack:///./node_modules/rxjs/operator/switchMap.js","webpack:///./node_modules/rxjs/add/operator/switchMap.js","webpack:///./node_modules/rxjs/operator/switch.js","webpack:///./node_modules/rxjs/add/operator/switch.js","webpack:///./node_modules/rxjs/scheduler/AsapScheduler.js","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./node_modules/rxjs/util/Immediate.js","webpack:///./node_modules/rxjs/scheduler/AsapAction.js","webpack:///./node_modules/rxjs/observable/SubscribeOnObservable.js","webpack:///./node_modules/rxjs/operators/subscribeOn.js","webpack:///./node_modules/rxjs/operator/subscribeOn.js","webpack:///./node_modules/rxjs/add/operator/subscribeOn.js","webpack:///./node_modules/rxjs/operator/startWith.js","webpack:///./node_modules/rxjs/add/operator/startWith.js","webpack:///./node_modules/rxjs/operator/skipWhile.js","webpack:///./node_modules/rxjs/add/operator/skipWhile.js","webpack:///./node_modules/rxjs/operator/skipUntil.js","webpack:///./node_modules/rxjs/add/operator/skipUntil.js","webpack:///./node_modules/rxjs/operator/skipLast.js","webpack:///./node_modules/rxjs/add/operator/skipLast.js","webpack:///./node_modules/rxjs/operator/skip.js","webpack:///./node_modules/rxjs/add/operator/skip.js","webpack:///./node_modules/rxjs/operator/single.js","webpack:///./node_modules/rxjs/add/operator/single.js","webpack:///./node_modules/rxjs/operator/shareReplay.js","webpack:///./node_modules/rxjs/add/operator/shareReplay.js","webpack:///./node_modules/rxjs/operator/share.js","webpack:///./node_modules/rxjs/add/operator/share.js","webpack:///./node_modules/rxjs/operator/sequenceEqual.js","webpack:///./node_modules/rxjs/add/operator/sequenceEqual.js","webpack:///./node_modules/rxjs/operator/scan.js","webpack:///./node_modules/rxjs/add/operator/scan.js","webpack:///./node_modules/rxjs/operator/sampleTime.js","webpack:///./node_modules/rxjs/add/operator/sampleTime.js","webpack:///./node_modules/rxjs/operator/sample.js","webpack:///./node_modules/rxjs/add/operator/sample.js","webpack:///./node_modules/rxjs/operator/retryWhen.js","webpack:///./node_modules/rxjs/add/operator/retryWhen.js","webpack:///./node_modules/rxjs/operator/retry.js","webpack:///./node_modules/rxjs/add/operator/retry.js","webpack:///./node_modules/rxjs/operator/repeatWhen.js","webpack:///./node_modules/rxjs/add/operator/repeatWhen.js","webpack:///./node_modules/rxjs/operator/repeat.js","webpack:///./node_modules/rxjs/add/operator/repeat.js","webpack:///./node_modules/rxjs/operator/reduce.js","webpack:///./node_modules/rxjs/add/operator/reduce.js","webpack:///./node_modules/rxjs/operator/race.js","webpack:///./node_modules/rxjs/add/operator/race.js","webpack:///./node_modules/rxjs/operator/publishLast.js","webpack:///./node_modules/rxjs/add/operator/publishLast.js","webpack:///./node_modules/rxjs/operator/publishReplay.js","webpack:///./node_modules/rxjs/add/operator/publishReplay.js","webpack:///./node_modules/rxjs/operator/publishBehavior.js","webpack:///./node_modules/rxjs/add/operator/publishBehavior.js","webpack:///./node_modules/rxjs/operator/publish.js","webpack:///./node_modules/rxjs/add/operator/publish.js","webpack:///./node_modules/rxjs/operator/pluck.js","webpack:///./node_modules/rxjs/add/operator/pluck.js","webpack:///./node_modules/rxjs/util/not.js","webpack:///./node_modules/rxjs/operator/partition.js","webpack:///./node_modules/rxjs/add/operator/partition.js","webpack:///./node_modules/rxjs/operator/pairwise.js","webpack:///./node_modules/rxjs/add/operator/pairwise.js","webpack:///./node_modules/rxjs/operator/onErrorResumeNext.js","webpack:///./node_modules/rxjs/add/operator/onErrorResumeNext.js","webpack:///./node_modules/rxjs/operator/observeOn.js","webpack:///./node_modules/rxjs/add/operator/observeOn.js","webpack:///./node_modules/rxjs/operator/multicast.js","webpack:///./node_modules/rxjs/add/operator/multicast.js","webpack:///./node_modules/rxjs/operator/min.js","webpack:///./node_modules/rxjs/add/operator/min.js","webpack:///./node_modules/rxjs/operator/mergeScan.js","webpack:///./node_modules/rxjs/add/operator/mergeScan.js","webpack:///./node_modules/rxjs/operator/mergeMapTo.js","webpack:///./node_modules/rxjs/add/operator/mergeMapTo.js","webpack:///./node_modules/rxjs/operator/mergeMap.js","webpack:///./node_modules/rxjs/add/operator/mergeMap.js","webpack:///./node_modules/rxjs/operator/mergeAll.js","webpack:///./node_modules/rxjs/add/operator/mergeAll.js","webpack:///./node_modules/rxjs/operator/merge.js","webpack:///./node_modules/rxjs/add/operator/merge.js","webpack:///./node_modules/rxjs/operator/max.js","webpack:///./node_modules/rxjs/add/operator/max.js","webpack:///./node_modules/rxjs/operator/materialize.js","webpack:///./node_modules/rxjs/add/operator/materialize.js","webpack:///./node_modules/rxjs/operator/mapTo.js","webpack:///./node_modules/rxjs/add/operator/mapTo.js","webpack:///./node_modules/rxjs/operator/map.js","webpack:///./node_modules/rxjs/add/operator/map.js","webpack:///./node_modules/rxjs/operator/every.js","webpack:///./node_modules/rxjs/add/operator/every.js","webpack:///./node_modules/rxjs/operator/let.js","webpack:///./node_modules/rxjs/add/operator/let.js","webpack:///./node_modules/rxjs/operator/last.js","webpack:///./node_modules/rxjs/add/operator/last.js","webpack:///./node_modules/rxjs/operator/auditTime.js","webpack:///./node_modules/rxjs/add/operator/auditTime.js","webpack:///./node_modules/rxjs/operator/audit.js","webpack:///./node_modules/rxjs/add/operator/audit.js","webpack:///./node_modules/rxjs/operator/isEmpty.js","webpack:///./node_modules/rxjs/add/operator/isEmpty.js","webpack:///./node_modules/rxjs/operator/ignoreElements.js","webpack:///./node_modules/rxjs/add/operator/ignoreElements.js","webpack:///./node_modules/rxjs/util/FastMap.js","webpack:///./node_modules/rxjs/util/MapPolyfill.js","webpack:///./node_modules/rxjs/util/Map.js","webpack:///./node_modules/rxjs/operator/groupBy.js","webpack:///./node_modules/rxjs/add/operator/groupBy.js","webpack:///./node_modules/rxjs/operator/first.js","webpack:///./node_modules/rxjs/add/operator/first.js","webpack:///./node_modules/rxjs/operator/findIndex.js","webpack:///./node_modules/rxjs/add/operator/findIndex.js","webpack:///./node_modules/rxjs/operator/find.js","webpack:///./node_modules/rxjs/add/operator/find.js","webpack:///./node_modules/rxjs/operator/finally.js","webpack:///./node_modules/rxjs/add/operator/finally.js","webpack:///./node_modules/rxjs/operator/filter.js","webpack:///./node_modules/rxjs/add/operator/filter.js","webpack:///./node_modules/rxjs/operator/elementAt.js","webpack:///./node_modules/rxjs/add/operator/elementAt.js","webpack:///./node_modules/rxjs/operator/expand.js","webpack:///./node_modules/rxjs/add/operator/expand.js","webpack:///./node_modules/rxjs/operator/exhaustMap.js","webpack:///./node_modules/rxjs/add/operator/exhaustMap.js","webpack:///./node_modules/rxjs/operator/exhaust.js","webpack:///./node_modules/rxjs/add/operator/exhaust.js","webpack:///./node_modules/rxjs/operator/do.js","webpack:///./node_modules/rxjs/add/operator/do.js","webpack:///./node_modules/rxjs/operator/distinctUntilKeyChanged.js","webpack:///./node_modules/rxjs/add/operator/distinctUntilKeyChanged.js","webpack:///./node_modules/rxjs/operator/distinctUntilChanged.js","webpack:///./node_modules/rxjs/add/operator/distinctUntilChanged.js","webpack:///./node_modules/rxjs/util/Set.js","webpack:///./node_modules/rxjs/operator/distinct.js","webpack:///./node_modules/rxjs/add/operator/distinct.js","webpack:///./node_modules/rxjs/operator/delayWhen.js","webpack:///./node_modules/rxjs/add/operator/delayWhen.js","webpack:///./node_modules/rxjs/operator/delay.js","webpack:///./node_modules/rxjs/add/operator/delay.js","webpack:///./node_modules/rxjs/operator/defaultIfEmpty.js","webpack:///./node_modules/rxjs/add/operator/defaultIfEmpty.js","webpack:///./node_modules/rxjs/operator/debounceTime.js","webpack:///./node_modules/rxjs/add/operator/debounceTime.js","webpack:///./node_modules/rxjs/operator/debounce.js","webpack:///./node_modules/rxjs/add/operator/debounce.js","webpack:///./node_modules/rxjs/operator/dematerialize.js","webpack:///./node_modules/rxjs/add/operator/dematerialize.js","webpack:///./node_modules/rxjs/operator/count.js","webpack:///./node_modules/rxjs/add/operator/count.js","webpack:///./node_modules/rxjs/operator/concatMapTo.js","webpack:///./node_modules/rxjs/add/operator/concatMapTo.js","webpack:///./node_modules/rxjs/operator/concatMap.js","webpack:///./node_modules/rxjs/add/operator/concatMap.js","webpack:///./node_modules/rxjs/operator/concatAll.js","webpack:///./node_modules/rxjs/add/operator/concatAll.js","webpack:///./node_modules/rxjs/operator/concat.js","webpack:///./node_modules/rxjs/add/operator/concat.js","webpack:///./node_modules/rxjs/operator/combineLatest.js","webpack:///./node_modules/rxjs/add/operator/combineLatest.js","webpack:///./node_modules/rxjs/operator/combineAll.js","webpack:///./node_modules/rxjs/add/operator/combineAll.js","webpack:///./node_modules/rxjs/operator/catch.js","webpack:///./node_modules/rxjs/add/operator/catch.js","webpack:///./node_modules/rxjs/operator/bufferWhen.js","webpack:///./node_modules/rxjs/add/operator/bufferWhen.js","webpack:///./node_modules/rxjs/operator/bufferToggle.js","webpack:///./node_modules/rxjs/add/operator/bufferToggle.js","webpack:///./node_modules/rxjs/operator/bufferTime.js","webpack:///./node_modules/rxjs/add/operator/bufferTime.js","webpack:///./node_modules/rxjs/operator/bufferCount.js","webpack:///./node_modules/rxjs/add/operator/bufferCount.js","webpack:///./node_modules/rxjs/operator/buffer.js","webpack:///./node_modules/rxjs/add/operator/buffer.js","webpack:///./node_modules/rxjs/util/assign.js","webpack:///./node_modules/rxjs/scheduler/QueueScheduler.js","webpack:///./node_modules/rxjs/scheduler/QueueAction.js","webpack:///./node_modules/rxjs/observable/dom/WebSocketSubject.js","webpack:///./node_modules/rxjs/observable/dom/webSocket.js","webpack:///./node_modules/rxjs/add/observable/dom/webSocket.js","webpack:///./node_modules/rxjs/observable/dom/ajax.js","webpack:///./node_modules/rxjs/add/observable/dom/ajax.js","webpack:///./node_modules/rxjs/observable/zip.js","webpack:///./node_modules/rxjs/add/observable/zip.js","webpack:///./node_modules/rxjs/observable/TimerObservable.js","webpack:///./node_modules/rxjs/add/observable/timer.js","webpack:///./node_modules/rxjs/observable/ErrorObservable.js","webpack:///./node_modules/rxjs/observable/throw.js","webpack:///./node_modules/rxjs/add/observable/throw.js","webpack:///./node_modules/rxjs/observable/UsingObservable.js","webpack:///./node_modules/rxjs/observable/using.js","webpack:///./node_modules/rxjs/add/observable/using.js","webpack:///./node_modules/rxjs/observable/RangeObservable.js","webpack:///./node_modules/rxjs/observable/range.js","webpack:///./node_modules/rxjs/add/observable/range.js","webpack:///./node_modules/rxjs/observable/PairsObservable.js","webpack:///./node_modules/rxjs/observable/pairs.js","webpack:///./node_modules/rxjs/add/observable/pairs.js","webpack:///./node_modules/rxjs/observable/onErrorResumeNext.js","webpack:///./node_modules/rxjs/add/observable/onErrorResumeNext.js","webpack:///./node_modules/rxjs/add/observable/of.js","webpack:///./node_modules/rxjs/observable/NeverObservable.js","webpack:///./node_modules/rxjs/observable/never.js","webpack:///./node_modules/rxjs/add/observable/never.js","webpack:///./node_modules/rxjs/add/observable/race.js","webpack:///./node_modules/rxjs/add/observable/merge.js","webpack:///./node_modules/rxjs/Scheduler.js","webpack:///./node_modules/rxjs/scheduler/Action.js","webpack:///./node_modules/rxjs/observable/IntervalObservable.js","webpack:///./node_modules/rxjs/add/observable/interval.js","webpack:///./node_modules/rxjs/observable/IfObservable.js","webpack:///./node_modules/rxjs/observable/if.js","webpack:///./node_modules/rxjs/add/observable/if.js","webpack:///./node_modules/rxjs/observable/GenerateObservable.js","webpack:///./node_modules/rxjs/observable/generate.js","webpack:///./node_modules/rxjs/add/observable/generate.js","webpack:///./node_modules/rxjs/observable/fromPromise.js","webpack:///./node_modules/rxjs/add/observable/fromPromise.js","webpack:///./node_modules/rxjs/observable/FromEventPatternObservable.js","webpack:///./node_modules/rxjs/observable/fromEventPattern.js","webpack:///./node_modules/rxjs/add/observable/fromEventPattern.js","webpack:///./node_modules/rxjs/observable/FromEventObservable.js","webpack:///./node_modules/rxjs/observable/fromEvent.js","webpack:///./node_modules/rxjs/add/observable/fromEvent.js","webpack:///./node_modules/rxjs/add/observable/from.js","webpack:///./node_modules/rxjs/observable/ForkJoinObservable.js","webpack:///./node_modules/rxjs/observable/forkJoin.js","webpack:///./node_modules/rxjs/add/observable/forkJoin.js","webpack:///./node_modules/rxjs/observable/empty.js","webpack:///./node_modules/rxjs/add/observable/empty.js","webpack:///./node_modules/rxjs/observable/DeferObservable.js","webpack:///./node_modules/rxjs/observable/defer.js","webpack:///./node_modules/rxjs/add/observable/defer.js","webpack:///./node_modules/rxjs/observable/ArrayLikeObservable.js","webpack:///./node_modules/rxjs/observable/IteratorObservable.js","webpack:///./node_modules/rxjs/add/observable/concat.js","webpack:///./node_modules/rxjs/InnerSubscriber.js","webpack:///./node_modules/rxjs/observable/combineLatest.js","webpack:///./node_modules/rxjs/add/observable/combineLatest.js","webpack:///./node_modules/rxjs/observable/BoundNodeCallbackObservable.js","webpack:///./node_modules/rxjs/observable/bindNodeCallback.js","webpack:///./node_modules/rxjs/add/observable/bindNodeCallback.js","webpack:///./node_modules/rxjs/observable/BoundCallbackObservable.js","webpack:///./node_modules/rxjs/observable/bindCallback.js","webpack:///./node_modules/rxjs/add/observable/bindCallback.js","webpack:///./node_modules/rxjs/util/toSubscriber.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","root_1","toSubscriber_1","observable_1","pipe_1","Observable","subscribe","this","_isScalar","_subscribe","lift","operator","observable","source","observerOrNext","error","complete","sink","toSubscriber","add","syncErrorThrowable","_trySubscribe","syncErrorThrown","syncErrorValue","err","forEach","next","PromiseCtor","_this","root","Rx","config","Promise","Error","resolve","reject","subscription","unsubscribe","subscriber","pipe","operations","_i","arguments","length","pipeFromArray","toPromise","x","create","__extends","b","__","constructor","isFunction_1","Subscription_1","Observer_1","rxSubscriber_1","Subscriber","_super","destinationOrNext","isStopped","destination","empty","SafeSubscriber","rxSubscriber","_next","_error","_complete","closed","_unsubscribeAndRecycle","_parent","_parents","Subscription","_parentSubscriber","context","isFunction","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","fn","parent","_unsubscribe","isArrayLike_1","isPromise_1","isObject_1","Observable_1","iterator_1","InnerSubscriber_1","subscribeToResult","outerSubscriber","result","outerValue","outerIndex","InnerSubscriber","isArrayLike","len","isPromise","then","setTimeout","iterator","item","done","obs","TypeError","msg","isObject","OuterSubscriber","apply","notifyNext","innerValue","innerIndex","innerSub","notifyError","notifyComplete","AsyncAction_1","AsyncScheduler_1","async","AsyncScheduler","AsyncAction","isArray_1","tryCatch_1","errorObject_1","UnsubscriptionError_1","_subscriptions","errors","hasErrors","index","remove","tryCatch","errorObject","e","UnsubscriptionError","flattenUnsubscriptionErrors","isArray","sub","concat","push","teardown","EMPTY","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","reduce","errs","Subscriber_1","ObjectUnsubscribedError_1","SubjectSubscription_1","SubjectSubscriber","Subject","observers","hasError","thrownError","subject","AnonymousSubject","ObjectUnsubscribedError","copy","slice","SubjectSubscription","asObservable","tryCatchTarget","tryCatcher","__window","window","__self","self","WorkerGlobalScope","_root","global","isScheduler","schedule","Array","EmptyObservable","scheduler","dispatch","arg","ScalarObservable_1","EmptyObservable_1","isScheduler_1","ArrayObservable","array","of","pop","ScalarObservable","state","count","ConnectableObservable_1","multicast","subjectOrSubjectFactory","selector","subjectFactory","MulticastOperator","connectable","connectableObservableDescriptor","Subject_1","AsyncSubject_1","AsyncSubject","ReplaySubject_1","ReplaySubject","BehaviorSubject_1","BehaviorSubject","ConnectableObservable","Notification_1","Notification","EmptyError_1","EmptyError","ArgumentOutOfRangeError_1","ArgumentOutOfRangeError","TimeoutError_1","TimeoutError","timeInterval_1","TimeInterval","timestamp_1","Timestamp","TestScheduler_1","TestScheduler","VirtualTimeScheduler_1","VirtualTimeScheduler","AjaxObservable_1","AjaxResponse","AjaxError","AjaxTimeoutError","asap_1","async_1","queue_1","animationFrame_1","_operators","operators","Scheduler","asap","queue","animationFrame","Symbol","scan_1","takeLast_1","defaultIfEmpty_1","accumulator","seed","scan","takeLast","defaultIfEmpty","acc","stack","message","map","project","thisArg","MapOperator","MapSubscriber","actions","active","scheduled","undefined","flush","action","execute","delay","shift","work","pending","id","recycleAsyncId","requestAsyncId","setInterval","clearInterval","_execute","errored","errorValue","Action","isNumeric","val","parseFloat","subscribeToResult_1","OuterSubscriber_1","mergeMap","resultSelector","concurrent","Number","POSITIVE_INFINITY","MergeMapOperator","observer","MergeMapSubscriber","hasCompleted","buffer","_tryNext","_innerSub","ish","_notifyResultSelector","kind","hasValue","observe","do","accept","nextOrObserver","toObservable","throw","createNext","undefinedValueNotification","createError","createComplete","completeNotification","of_1","from_1","concatAll_1","observables","from","concatAll","symbolIteratorPonyfill","Set_1","Set","Map_1","Map","keys","getOwnPropertyNames","key","$$iterator","defaultThrottleConfig","leading","trailing","throttle","durationSelector","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","throttled","_trailingValue","duration","tryDurationSelector","_sendTrailing","_a","observeOn_1","bufferSize","windowTime","_events","_bufferSize","_windowTime","now","_getNow","ReplayEvent","_trimBufferThenGetEvents","ObserveOnSubscriber","eventsCount","spliceCount","time","Math","max","ArrayObservable_1","zipStatic","ZipOperator","zip","ZipSubscriber","values","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","args","_tryProject","nextResult","isComplete","isDate","Date","isNaN","mergeAll_1","merge","last","mergeAll","mergeMap_1","identity_1","identity","observeOn","ObserveOnOperator","notification","scheduleMessage","ObserveOnMessage","none","combineLatest","CombineLatestOperator","CombineLatestSubscriber","toRespond","unused","oldVal","hasNext","getSymbolObservable","$$observable","for","$$rxSubscriber","map_1","timestamp","switchMap","SwitchMapOperator","SwitchMapSubscriber","innerSubscription","_tryNotifyNext","refCount","RefCountOperator","_refCount","refCounter","RefCountSubscriber","connection","connect","sharedConnection","_connection","TakeLastOperator","total","TakeLastSubscriber","ring","idx","hasSeed","ScanOperator","ScanSubscriber","_seed","set","audit","AuditOperator","AuditSubscriber","clearThrottle","find","predicate","FindValueOperator","yieldIndex","FindValueSubscriber","filter","FilterOperator","FilterSubscriber","distinctUntilChanged","compare","keySelector","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","Boolean","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","concatMap","FromObservable_1","onErrorResumeNext","nextSources","OnErrorResumeNextOperator","onErrorResumeNextStatic","FromObservable","OnErrorResumeNextSubscriber","subscribeToNextSource","race","RaceOperator","RaceSubscriber","hasFirst","IntervalObservable_1","interval","IntervalObservable","noop","noop_1","fns","input","prev","g","Function","eval","SchedulerAction","maxFrames","VirtualAction","frame","frameTimeFactor","sort","sortActions","a","applyMixins","derivedCtor","baseCtors","baseCtor","propertyKeys","j","len2","name_1","SubscriptionLog","subscribedFrame","unsubscribedFrame","SubscriptionLog_1","SubscriptionLoggable","logSubscribedFrame","logUnsubscribedFrame","subscriptionLogs","oldSubscriptionLog","zip_1","zipAll","withLatestFrom","WithLatestFromOperator","WithLatestFromSubscriber","found","windowWhen","closingSelector","WindowOperator","WindowSubscriber","openWindow","unsubscribeClosingNotification","closingNotification","prevWindow","closingNotifier","windowToggle","openings","WindowToggleOperator","WindowToggleSubscriber","contexts","openSubscription","window_1","closeWindow","inner","isNumeric_1","windowTimeSpan","windowCreationInterval","maxWindowSize","WindowTimeOperator","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","windows","closeState","creationState","dispatchWindowClose","dispatchWindowCreation","timeSpanOnlyState","dispatchWindowTimeSpanOnly","numberOfNextedValues","window_2","timeSpanState","windowCount","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windowBoundaries","windowSubscriber","sourceSubscription","newWindow","reduce_1","toArrayReducer","arr","toArray","isDate_1","timeoutWith","due","withObservable","absoluteTimeout","waitFor","abs","TimeoutWithOperator","TimeoutWithSubscriber","scheduleTimeout","dispatchTimeout","timeout","TimeoutOperator","errorInstance","TimeoutSubscriber","timeInterval","TimeIntervalOperator","TimeIntervalSubscriber","lastTime","span","throttle_1","throttleTime","ThrottleTimeOperator","ThrottleTimeSubscriber","dispatchNext","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeUntil","notifier","TakeUntilOperator","TakeUntilSubscriber","take","TakeOperator","TakeSubscriber","switchMapTo","innerObservable","SwitchMapToOperator","SwitchMapToSubscriber","tryResultSelector","switchMap_1","switchAll","Timeout","clearFn","_id","_clearFn","clearTimeout","close","unref","ref","enroll","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","_onTimeout","setImmediate","clearImmediate","AsapAction_1","AsapScheduler_1","AsapScheduler","AsapAction","concat_1","startWith","skipWhile","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipUntil","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipLast","SkipLastOperator","_skipCount","SkipLastSubscriber","_count","_ring","skipCount","currentIndex","oldValue","skip","SkipOperator","SkipSubscriber","single","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","tryNext","shareReplay","shareReplayOperator","multicast_1","refCount_1","shareSubjectFactory","share","sequenceEqual","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","_b","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","areEqual","nextB","sampleTime","period","SampleTimeOperator","SampleTimeSubscriber","dispatchNotification","lastValue","sample","SampleOperator","sampleSubscriber","SampleSubscriber","emitValue","retryWhen","RetryWhenOperator","RetryWhenSubscriber","retries","retriesSubscription","retry","RetryOperator","RetrySubscriber","repeatWhen","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","subscribeToRetries","notifications","repeat","RepeatOperator","RepeatSubscriber","race_1","publishLast","publishReplay","selectorOrScheduler","_value","getValue","publishBehavior","publish","pluck","properties","props","currentProp","plucker","not_1","filter_1","partition","not","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","_isComplete","getSubject","_subject","ConnectableSubscriber","connectableProto","writable","min","comparer","mergeScan","MergeScanOperator","MergeScanSubscriber","mergeMapTo","MergeMapToOperator","MergeMapToSubscriber","trySelectResult","merge_1","merge_2","mergeStatic","materialize","MaterializeOperator","MaterializeSubscriber","mapTo","MapToOperator","MapToSubscriber","every","EveryOperator","EverySubscriber","everyValueMatch","LastOperator","LastSubscriber","_tryPredicate","_tryResultSelector","audit_1","timer_1","auditTime","timer","IsEmptyOperator","IsEmptySubscriber","ignoreElements","IgnoreElementsOperator","IgnoreElementsSubscriber","FastMap_1","groupBy","elementSelector","subjectSelector","GroupByOperator","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","FastMap","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","clear","removeGroup","delete","groupSubject","refCountSubscription","InnerRefCountSubscription","first","FirstOperator","FirstSubscriber","_emitted","_emit","_emitFinal","find_1","findIndex","finalize","callback","FinallyOperator","FinallySubscriber","elementAt","ElementAtOperator","ElementAtSubscriber","expand","ExpandOperator","ExpandSubscriber","subscribeToProjection","exhaustMap","SwitchFirstMapOperator","SwitchFirstMapSubscriber","hasSubscription","exhaust","SwitchFirstOperator","SwitchFirstSubscriber","tap","DoOperator","DoSubscriber","safeSubscriber","distinctUntilChanged_1","distinctUntilKeyChanged","distinct","flushes","DistinctOperator","DistinctSubscriber","_useKeySelector","_finalizeNext","has","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","completed","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","sourceSubscribed","subscribeToSource","delayFor","DelayOperator","DelaySubscriber","delay_1","_schedule","scheduleNotification","DelayMessage","debounceTime","dueTime","DebounceTimeOperator","DebounceTimeSubscriber","debouncedSubscription","clearDebounce","debouncedNext","debounce","DebounceOperator","DebounceSubscriber","durationSubscription","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","CountOperator","CountSubscriber","concatMap_1","concatMapTo","concat_2","concatStatic","combineLatest_1","combineAll","catchError","CatchOperator","caught","CatchSubscriber","err2","bufferWhen","BufferWhenOperator","BufferWhenSubscriber","subscribing","openBuffer","closingSubscription","bufferToggle","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","trySubscribe","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","BufferTimeOperator","BufferTimeSubscriber","Context","openContext","timespanOnly","closeAction","dispatchBufferTimeSpanOnly","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","onBufferFull","closeContext","prevContext","bufferCount","startBufferEvery","BufferCountOperator","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","buffers","BufferOperator","BufferSubscriber","QueueAction_1","QueueScheduler_1","QueueScheduler","QueueAction","ajaxGet","url","headers","AjaxObservable","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxPatch","mapResponse","response","ajaxGetJSON","responseType","urlOrRequest","request","createXHR","crossDomain","XMLHttpRequest","XDomainRequest","progId","progIds","ActiveXObject","getXMLHttpRequest","withCredentials","prop","AjaxSubscriber","post","put","patch","getJSON","FormData","serializeBody","send","xhr","user","password","setupEvents","open","setHeaders","contentType","splitIndex","substring","encodeURI","join","JSON","stringify","setRequestHeader","progressSubscriber","xhrTimeout","ontimeout","upload","xhrProgress_1","xhrError_1","onprogress","onerror","xhrReadyStateChange","readyState","status_1","status","responseText","onreadystatechange","abort","originalEvent","parseXhrResponse","parse","responseXML","TimerObservable_1","TimerObservable","PromiseObservable","promise","dispatchError","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","IteratorObservable","ArrayLikeObservable","subscriberIndex","toString","DatabaseService","[object Object]","obj","fetch","Accept","Content-Type","json","console","log","gradSelekt","document","getElementById","src_dugme","fromEvent","res","hoteli","kontejner","getElementsByClassName","divDesno","createElement","className","appendChild","hotel","divHotel","innerHTML","ime","adresa","grad","kontakt","opis","slika","setAttribute","dugme","rezervacija","lin","crtajViseInformacija","slike","h","bod","getElementsByTagName","myModal","style","display","modalContent","sp","onclick","sl","src","pauza","lab","inp1","novired","lab2","inp2","novired2","lab3","inp3","novired3","lab5","inp4","novired5","lab4","novired4","rezervisi","upisUBazu","datumStartSelekt","datumEndSelekt","typeOfRoom","firstName","lastName","email","phone","alert","test","hotelId","emailAddress","contactNumber","numberOfPersons","persons","to","addToDatabase","modal","rez","crtajHotel","auditTime_1","buffer_1","bufferCount_1","bufferTime_1","bufferToggle_1","bufferWhen_1","catchError_1","combineAll_1","concatMapTo_1","count_1","debounce_1","debounceTime_1","delayWhen_1","dematerialize_1","distinct_1","distinctUntilKeyChanged_1","elementAt_1","every_1","exhaust_1","exhaustMap_1","expand_1","finalize_1","findIndex_1","first_1","groupBy_1","ignoreElements_1","isEmpty_1","last_1","mapTo_1","materialize_1","max_1","mergeMap_2","flatMap","mergeMapTo_1","mergeScan_1","min_1","onErrorResumeNext_1","pairwise_1","partition_1","pluck_1","publish_1","publishBehavior_1","publishLast_1","publishReplay_1","repeat_1","repeatWhen_1","retry_1","retryWhen_1","sample_1","sampleTime_1","sequenceEqual_1","share_1","shareReplay_1","single_1","skip_1","skipLast_1","skipUntil_1","skipWhile_1","startWith_1","switchAll_1","switchMapTo_1","take_1","takeUntil_1","takeWhile_1","tap_1","throttleTime_1","timeout_1","timeoutWith_1","toArray_1","windowCount_1","windowTime_1","windowToggle_1","windowWhen_1","withLatestFrom_1","zipAll_1","AnimationFrameScheduler","RequestAnimationFrameDefinition","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","cb","AnimationFrame","AnimationFrame_1","AnimationFrameAction","AnimationFrameAction_1","AnimationFrameScheduler_1","SubscriptionLoggable_1","applyMixins_1","HotObservable","messages","setup","messagesLength","ColdObservable","scheduleMessages","ColdObservable_1","HotObservable_1","defaultMaxFrame","assertDeepEqual","hotObservables","coldObservables","flushTests","createTime","marbles","createColdObservable","parseMarbles","cold","createHotObservable","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","readyFlushTests","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","zipProto","_switch","switch_1","switch","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","run","marker","runClearTimeout","Item","nextTick","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","attachTo","getPrototypeOf","handle","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","data","port2","documentElement","script","removeChild","random","addEventListener","attachEvent","task","ImmediateDefinition","canUseProcessNextTick","createProcessNextTickSetImmediate","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","instance","identify","postMessageIsAsynchronous_1","partiallyApplied","handler","addFromSetImmediateArguments","globalMessageHandler","Immediate","Immediate_1","SubscribeOnObservable","delayTime","SubscribeOnObservable_1","subscribeOn","SubscribeOnOperator","subscribeOn_1","race_2","raceStatic","pred","notPred","flatMapTo","letProto","func","let_1","let","letBind","MapPolyfill","size","_values","_keys","MapPolyfill_1","_finally","finally_1","finally","_do","do_1","minimalSetImpl","MinimalSet","_catch","catch_1","catch","assignImpl","target","sources","k","getAssign","assign","assign_1","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","_connectSocket","protocol","binaryType","onopen","openObserver","closingObserver","code","reason","onclose","closeObserver","wasClean","WebSocketSubject_1","webSocket","webSocket_1","ajax","ajax_1","initialDelay","ErrorObservable","ErrorObservable_1","_throw","throw_1","UsingObservable","resourceFactory","observableFactory","resource","UsingSubscriber","tryUse","UsingObservable_1","using","using_1","RangeObservable","start","RangeObservable_1","range","range_1","PairsObservable","PairsObservable_1","pairs","pairs_1","NeverObservable","NeverObservable_1","never","never_1","interval_1","IfObservable","condition","thenSource","elseSource","IfSubscriber","tryIf","IfObservable_1","_if","if_1","if","selfSelector","GenerateObservable","initialState","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","needIterate","GenerateObservable_1","generate","generate_1","fromPromise","fromPromise_1","FromEventPatternObservable","addHandler","removeHandler","_callSelector","retValue","_callAddHandler","errorSubscriber","FromEventPatternObservable_1","fromEventPattern","fromEventPattern_1","FromEventObservable","sourceObj","eventName","options","setupSubscription","isNodeList","isHTMLCollection","removeEventListener","isEventTarget","source_1","isJQueryStyleEventEmitter","source_2","isNodeStyleEventEmitter","source_3","FromEventObservable_1","fromEvent_1","ForkJoinObservable","ForkJoinSubscriber","haveValues","_hasValue","ForkJoinObservable_1","forkJoin","forkJoin_1","empty_1","DeferObservable","DeferSubscriber","factory","tryDefer","_callFactory","DeferObservable_1","defer","defer_1","arrayLike","StringIterator","ArrayIterator","getIterator","return","str","charAt","isFinite","valueAsNumber","sign","floor","maxSafeInteger","toLength","pow","BoundNodeCallbackObservable","callbackFunc","handlerFn","innerArgs","result_1","result_2","BoundNodeCallbackObservable_1","bindNodeCallback","bindNodeCallback_1","BoundCallbackObservable","BoundCallbackObservable_1","bindCallback","bindCallback_1"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 456);\n","\"use strict\";\nvar root_1 = require('./util/root');\nvar toSubscriber_1 = require('./util/toSubscriber');\nvar observable_1 = require('./symbol/observable');\nvar pipe_1 = require('./util/pipe');\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_1.observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipe_1.pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n//# sourceMappingURL=Observable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('./util/isFunction');\nvar Subscription_1 = require('./Subscription');\nvar Observer_1 = require('./Observer');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = Observer_1.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = Observer_1.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n                        this.destination = destinationOrNext;\n                        this.destination.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_1.Subscription));\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction_1.isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== Observer_1.empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction_1.isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=Subscriber.js.map","\"use strict\";\nvar root_1 = require('./root');\nvar isArrayLike_1 = require('./isArrayLike');\nvar isPromise_1 = require('./isPromise');\nvar isObject_1 = require('./isObject');\nvar Observable_1 = require('../Observable');\nvar iterator_1 = require('../symbol/iterator');\nvar InnerSubscriber_1 = require('../InnerSubscriber');\nvar observable_1 = require('../symbol/observable');\nfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable_1.Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        }\n        else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    }\n    else if (isArrayLike_1.isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    }\n    else if (isPromise_1.isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) { return destination.error(err); })\n            .then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root_1.root.setTimeout(function () { throw err; });\n        });\n        return destination;\n    }\n    else if (result && typeof result[iterator_1.iterator] === 'function') {\n        var iterator = result[iterator_1.iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    }\n    else if (result && typeof result[observable_1.observable] === 'function') {\n        var obs = result[observable_1.observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        }\n        else {\n            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    }\n    else {\n        var value = isObject_1.isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = (\"You provided \" + value + \" where a stream was expected.\")\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\nexports.subscribeToResult = subscribeToResult;\n//# sourceMappingURL=subscribeToResult.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = (function (_super) {\n    __extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber_1.Subscriber));\nexports.OuterSubscriber = OuterSubscriber;\n//# sourceMappingURL=OuterSubscriber.js.map","\"use strict\";\nvar AsyncAction_1 = require('./AsyncAction');\nvar AsyncScheduler_1 = require('./AsyncScheduler');\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);\n//# sourceMappingURL=async.js.map","\"use strict\";\nvar isArray_1 = require('./util/isArray');\nvar isObject_1 = require('./util/isObject');\nvar isFunction_1 = require('./util/isFunction');\nvar tryCatch_1 = require('./util/tryCatch');\nvar errorObject_1 = require('./util/errorObject');\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexports.Subscription = Subscription;\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map","\"use strict\";\n// typeof any so that it we don't have to cast when comparing a result to the error object\nexports.errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('./Observable');\nvar Subscriber_1 = require('./Subscriber');\nvar Subscription_1 = require('./Subscription');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = (function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SubjectSubscriber = SubjectSubscriber;\n/**\n * @class Subject<T>\n */\nvar Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_1.Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_1.Observable));\nexports.Subject = Subject;\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription_1.Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexports.AnonymousSubject = AnonymousSubject;\n//# sourceMappingURL=Subject.js.map","\"use strict\";\nvar errorObject_1 = require('./errorObject');\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject_1.errorObject.e = e;\n        return errorObject_1.errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\nexports.tryCatch = tryCatch;\n;\n//# sourceMappingURL=tryCatch.js.map","\"use strict\";\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\nexports.root = _root;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\n//# sourceMappingURL=root.js.map","\"use strict\";\nfunction isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\nexports.isScheduler = isScheduler;\n//# sourceMappingURL=isScheduler.js.map","\"use strict\";\nexports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar EmptyObservable = (function (_super) {\n    __extends(EmptyObservable, _super);\n    function EmptyObservable(scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits a complete notification.\n     *\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/empty.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the complete notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then complete.</caption>\n     * var result = Rx.Observable.empty().startWith(7);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n     * );\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following to the console:\n     * // x is equal to the count on the interval eg(0,1,2,3,...)\n     * // x will occur every 1000ms\n     * // if x % 2 is equal to 1 print abc\n     * // if x % 2 is not equal to 1 nothing will be output\n     *\n     * @see {@link create}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the complete notification.\n     * @return {Observable} An \"empty\" Observable: emits only the complete\n     * notification.\n     * @static true\n     * @name empty\n     * @owner Observable\n     */\n    EmptyObservable.create = function (scheduler) {\n        return new EmptyObservable(scheduler);\n    };\n    EmptyObservable.dispatch = function (arg) {\n        var subscriber = arg.subscriber;\n        subscriber.complete();\n    };\n    EmptyObservable.prototype._subscribe = function (subscriber) {\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n        }\n        else {\n            subscriber.complete();\n        }\n    };\n    return EmptyObservable;\n}(Observable_1.Observable));\nexports.EmptyObservable = EmptyObservable;\n//# sourceMappingURL=EmptyObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isScheduler_1 = require('../util/isScheduler');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayObservable = (function (_super) {\n    __extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable_1.EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable_1.Observable));\nexports.ArrayObservable = ArrayObservable;\n//# sourceMappingURL=ArrayObservable.js.map","\"use strict\";\nvar ConnectableObservable_1 = require('../observable/ConnectableObservable');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexports.multicast = multicast;\nvar MulticastOperator = (function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\nexports.MulticastOperator = MulticastOperator;\n//# sourceMappingURL=multicast.js.map","\"use strict\";\n/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nvar Subject_1 = require('./Subject');\nexports.Subject = Subject_1.Subject;\nexports.AnonymousSubject = Subject_1.AnonymousSubject;\n/* tslint:enable:no-unused-variable */\nvar Observable_1 = require('./Observable');\nexports.Observable = Observable_1.Observable;\n// statics\n/* tslint:disable:no-use-before-declare */\nrequire('./add/observable/bindCallback');\nrequire('./add/observable/bindNodeCallback');\nrequire('./add/observable/combineLatest');\nrequire('./add/observable/concat');\nrequire('./add/observable/defer');\nrequire('./add/observable/empty');\nrequire('./add/observable/forkJoin');\nrequire('./add/observable/from');\nrequire('./add/observable/fromEvent');\nrequire('./add/observable/fromEventPattern');\nrequire('./add/observable/fromPromise');\nrequire('./add/observable/generate');\nrequire('./add/observable/if');\nrequire('./add/observable/interval');\nrequire('./add/observable/merge');\nrequire('./add/observable/race');\nrequire('./add/observable/never');\nrequire('./add/observable/of');\nrequire('./add/observable/onErrorResumeNext');\nrequire('./add/observable/pairs');\nrequire('./add/observable/range');\nrequire('./add/observable/using');\nrequire('./add/observable/throw');\nrequire('./add/observable/timer');\nrequire('./add/observable/zip');\n//dom\nrequire('./add/observable/dom/ajax');\nrequire('./add/observable/dom/webSocket');\n//operators\nrequire('./add/operator/buffer');\nrequire('./add/operator/bufferCount');\nrequire('./add/operator/bufferTime');\nrequire('./add/operator/bufferToggle');\nrequire('./add/operator/bufferWhen');\nrequire('./add/operator/catch');\nrequire('./add/operator/combineAll');\nrequire('./add/operator/combineLatest');\nrequire('./add/operator/concat');\nrequire('./add/operator/concatAll');\nrequire('./add/operator/concatMap');\nrequire('./add/operator/concatMapTo');\nrequire('./add/operator/count');\nrequire('./add/operator/dematerialize');\nrequire('./add/operator/debounce');\nrequire('./add/operator/debounceTime');\nrequire('./add/operator/defaultIfEmpty');\nrequire('./add/operator/delay');\nrequire('./add/operator/delayWhen');\nrequire('./add/operator/distinct');\nrequire('./add/operator/distinctUntilChanged');\nrequire('./add/operator/distinctUntilKeyChanged');\nrequire('./add/operator/do');\nrequire('./add/operator/exhaust');\nrequire('./add/operator/exhaustMap');\nrequire('./add/operator/expand');\nrequire('./add/operator/elementAt');\nrequire('./add/operator/filter');\nrequire('./add/operator/finally');\nrequire('./add/operator/find');\nrequire('./add/operator/findIndex');\nrequire('./add/operator/first');\nrequire('./add/operator/groupBy');\nrequire('./add/operator/ignoreElements');\nrequire('./add/operator/isEmpty');\nrequire('./add/operator/audit');\nrequire('./add/operator/auditTime');\nrequire('./add/operator/last');\nrequire('./add/operator/let');\nrequire('./add/operator/every');\nrequire('./add/operator/map');\nrequire('./add/operator/mapTo');\nrequire('./add/operator/materialize');\nrequire('./add/operator/max');\nrequire('./add/operator/merge');\nrequire('./add/operator/mergeAll');\nrequire('./add/operator/mergeMap');\nrequire('./add/operator/mergeMapTo');\nrequire('./add/operator/mergeScan');\nrequire('./add/operator/min');\nrequire('./add/operator/multicast');\nrequire('./add/operator/observeOn');\nrequire('./add/operator/onErrorResumeNext');\nrequire('./add/operator/pairwise');\nrequire('./add/operator/partition');\nrequire('./add/operator/pluck');\nrequire('./add/operator/publish');\nrequire('./add/operator/publishBehavior');\nrequire('./add/operator/publishReplay');\nrequire('./add/operator/publishLast');\nrequire('./add/operator/race');\nrequire('./add/operator/reduce');\nrequire('./add/operator/repeat');\nrequire('./add/operator/repeatWhen');\nrequire('./add/operator/retry');\nrequire('./add/operator/retryWhen');\nrequire('./add/operator/sample');\nrequire('./add/operator/sampleTime');\nrequire('./add/operator/scan');\nrequire('./add/operator/sequenceEqual');\nrequire('./add/operator/share');\nrequire('./add/operator/shareReplay');\nrequire('./add/operator/single');\nrequire('./add/operator/skip');\nrequire('./add/operator/skipLast');\nrequire('./add/operator/skipUntil');\nrequire('./add/operator/skipWhile');\nrequire('./add/operator/startWith');\nrequire('./add/operator/subscribeOn');\nrequire('./add/operator/switch');\nrequire('./add/operator/switchMap');\nrequire('./add/operator/switchMapTo');\nrequire('./add/operator/take');\nrequire('./add/operator/takeLast');\nrequire('./add/operator/takeUntil');\nrequire('./add/operator/takeWhile');\nrequire('./add/operator/throttle');\nrequire('./add/operator/throttleTime');\nrequire('./add/operator/timeInterval');\nrequire('./add/operator/timeout');\nrequire('./add/operator/timeoutWith');\nrequire('./add/operator/timestamp');\nrequire('./add/operator/toArray');\nrequire('./add/operator/toPromise');\nrequire('./add/operator/window');\nrequire('./add/operator/windowCount');\nrequire('./add/operator/windowTime');\nrequire('./add/operator/windowToggle');\nrequire('./add/operator/windowWhen');\nrequire('./add/operator/withLatestFrom');\nrequire('./add/operator/zip');\nrequire('./add/operator/zipAll');\n/* tslint:disable:no-unused-variable */\nvar Subscription_1 = require('./Subscription');\nexports.Subscription = Subscription_1.Subscription;\nvar Subscriber_1 = require('./Subscriber');\nexports.Subscriber = Subscriber_1.Subscriber;\nvar AsyncSubject_1 = require('./AsyncSubject');\nexports.AsyncSubject = AsyncSubject_1.AsyncSubject;\nvar ReplaySubject_1 = require('./ReplaySubject');\nexports.ReplaySubject = ReplaySubject_1.ReplaySubject;\nvar BehaviorSubject_1 = require('./BehaviorSubject');\nexports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;\nvar ConnectableObservable_1 = require('./observable/ConnectableObservable');\nexports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;\nvar Notification_1 = require('./Notification');\nexports.Notification = Notification_1.Notification;\nvar EmptyError_1 = require('./util/EmptyError');\nexports.EmptyError = EmptyError_1.EmptyError;\nvar ArgumentOutOfRangeError_1 = require('./util/ArgumentOutOfRangeError');\nexports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;\nvar TimeoutError_1 = require('./util/TimeoutError');\nexports.TimeoutError = TimeoutError_1.TimeoutError;\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\nexports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;\nvar timeInterval_1 = require('./operator/timeInterval');\nexports.TimeInterval = timeInterval_1.TimeInterval;\nvar timestamp_1 = require('./operators/timestamp');\nexports.Timestamp = timestamp_1.Timestamp;\nvar TestScheduler_1 = require('./testing/TestScheduler');\nexports.TestScheduler = TestScheduler_1.TestScheduler;\nvar VirtualTimeScheduler_1 = require('./scheduler/VirtualTimeScheduler');\nexports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;\nvar AjaxObservable_1 = require('./observable/dom/AjaxObservable');\nexports.AjaxResponse = AjaxObservable_1.AjaxResponse;\nexports.AjaxError = AjaxObservable_1.AjaxError;\nexports.AjaxTimeoutError = AjaxObservable_1.AjaxTimeoutError;\nvar pipe_1 = require('./util/pipe');\nexports.pipe = pipe_1.pipe;\nvar asap_1 = require('./scheduler/asap');\nvar async_1 = require('./scheduler/async');\nvar queue_1 = require('./scheduler/queue');\nvar animationFrame_1 = require('./scheduler/animationFrame');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\nvar iterator_1 = require('./symbol/iterator');\nvar observable_1 = require('./symbol/observable');\nvar _operators = require('./operators');\nexports.operators = _operators;\n/* tslint:enable:no-unused-variable */\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nvar Scheduler = {\n    asap: asap_1.asap,\n    queue: queue_1.queue,\n    animationFrame: animationFrame_1.animationFrame,\n    async: async_1.async\n};\nexports.Scheduler = Scheduler;\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nvar Symbol = {\n    rxSubscriber: rxSubscriber_1.rxSubscriber,\n    observable: observable_1.observable,\n    iterator: iterator_1.iterator\n};\nexports.Symbol = Symbol;\n//# sourceMappingURL=Rx.js.map","\"use strict\";\nvar scan_1 = require('./scan');\nvar takeLast_1 = require('./takeLast');\nvar defaultIfEmpty_1 = require('./defaultIfEmpty');\nvar pipe_1 = require('../util/pipe');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nfunction reduce(accumulator, seed) {\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        return function reduceOperatorFunctionWithSeed(source) {\n            return pipe_1.pipe(scan_1.scan(accumulator, seed), takeLast_1.takeLast(1), defaultIfEmpty_1.defaultIfEmpty(seed))(source);\n        };\n    }\n    return function reduceOperatorFunction(source) {\n        return pipe_1.pipe(scan_1.scan(function (acc, value, index) {\n            return accumulator(acc, value, index + 1);\n        }), takeLast_1.takeLast(1))(source);\n    };\n}\nexports.reduce = reduce;\n//# sourceMappingURL=reduce.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nvar ArgumentOutOfRangeError = (function (_super) {\n    __extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var err = _super.call(this, 'argument out of range');\n        this.name = err.name = 'ArgumentOutOfRangeError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ArgumentOutOfRangeError;\n}(Error));\nexports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexports.map = map;\nvar MapOperator = (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexports.MapOperator = MapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = (function (_super) {\n    __extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        _super.call(this, destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Scheduler_1 = require('../Scheduler');\nvar AsyncScheduler = (function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler_1.Scheduler));\nexports.AsyncScheduler = AsyncScheduler;\n//# sourceMappingURL=AsyncScheduler.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Action_1 = require('./Action');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = (function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root_1.root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action_1.Action));\nexports.AsyncAction = AsyncAction;\n//# sourceMappingURL=AsyncAction.js.map","\"use strict\";\nvar isArray_1 = require('../util/isArray');\nfunction isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\nexports.isNumeric = isNumeric;\n;\n//# sourceMappingURL=isNumeric.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function mergeMapOperatorFunction(source) {\n        if (typeof resultSelector === 'number') {\n            concurrent = resultSelector;\n            resultSelector = null;\n        }\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n    };\n}\nexports.mergeMap = mergeMap;\nvar MergeMapOperator = (function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexports.MergeMapOperator = MergeMapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = (function (_super) {\n    __extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapSubscriber = MergeMapSubscriber;\n//# sourceMappingURL=mergeMap.js.map","\"use strict\";\nvar Observable_1 = require('./Observable');\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = (function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable_1.Observable.of(this.value);\n            case 'E':\n                return Observable_1.Observable.throw(this.error);\n            case 'C':\n                return Observable_1.Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\nexports.Notification = Notification;\n//# sourceMappingURL=Notification.js.map","\"use strict\";\nvar isScheduler_1 = require('../util/isScheduler');\nvar of_1 = require('./of');\nvar from_1 = require('./from');\nvar concatAll_1 = require('../operators/concatAll');\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    if (observables.length === 1 || (observables.length === 2 && isScheduler_1.isScheduler(observables[1]))) {\n        return from_1.from(observables[0]);\n    }\n    return concatAll_1.concatAll()(of_1.of.apply(void 0, observables));\n}\nexports.concat = concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nfunction symbolIteratorPonyfill(root) {\n    var Symbol = root.Symbol;\n    if (typeof Symbol === 'function') {\n        if (!Symbol.iterator) {\n            Symbol.iterator = Symbol('iterator polyfill');\n        }\n        return Symbol.iterator;\n    }\n    else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nexports.symbolIteratorPonyfill = symbolIteratorPonyfill;\nexports.iterator = symbolIteratorPonyfill(root_1.root);\n/**\n * @deprecated use iterator instead\n */\nexports.$$iterator = exports.iterator;\n//# sourceMappingURL=iterator.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nexports.defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nfunction throttle(durationSelector, config) {\n    if (config === void 0) { config = exports.defaultThrottleConfig; }\n    return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };\n}\nexports.throttle = throttle;\nvar ThrottleOperator = (function () {\n    function ThrottleOperator(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    };\n    return ThrottleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleSubscriber = (function (_super) {\n    __extends(ThrottleSubscriber, _super);\n    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.durationSelector = durationSelector;\n        this._leading = _leading;\n        this._trailing = _trailing;\n        this._hasTrailingValue = false;\n    }\n    ThrottleSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this._trailing) {\n                this._hasTrailingValue = true;\n                this._trailingValue = value;\n            }\n        }\n        else {\n            var duration = this.tryDurationSelector(value);\n            if (duration) {\n                this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));\n            }\n            if (this._leading) {\n                this.destination.next(value);\n                if (this._trailing) {\n                    this._hasTrailingValue = true;\n                    this._trailingValue = value;\n                }\n            }\n        }\n    };\n    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    };\n    ThrottleSubscriber.prototype._unsubscribe = function () {\n        var _a = this, throttled = _a.throttled, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue, _trailing = _a._trailing;\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n    };\n    ThrottleSubscriber.prototype._sendTrailing = function () {\n        var _a = this, destination = _a.destination, throttled = _a.throttled, _trailing = _a._trailing, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue;\n        if (throttled && _trailing && _hasTrailingValue) {\n            destination.next(_trailingValue);\n            this._trailingValue = null;\n            this._hasTrailingValue = false;\n        }\n    };\n    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    ThrottleSubscriber.prototype.notifyComplete = function () {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    return ThrottleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=throttle.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nvar EmptyError = (function (_super) {\n    __extends(EmptyError, _super);\n    function EmptyError() {\n        var err = _super.call(this, 'no elements in sequence');\n        this.name = err.name = 'EmptyError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return EmptyError;\n}(Error));\nexports.EmptyError = EmptyError;\n//# sourceMappingURL=EmptyError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar queue_1 = require('./scheduler/queue');\nvar Subscription_1 = require('./Subscription');\nvar observeOn_1 = require('./operators/observeOn');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\n/**\n * @class ReplaySubject<T>\n */\nvar ReplaySubject = (function (_super) {\n    __extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n        _super.call(this);\n        this.scheduler = scheduler;\n        this._events = [];\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\n    }\n    ReplaySubject.prototype.next = function (value) {\n        var now = this._getNow();\n        this._events.push(new ReplayEvent(now, value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    ReplaySubject.prototype._subscribe = function (subscriber) {\n        var _events = this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscription = Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscription = Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));\n        }\n        var len = _events.length;\n        for (var i = 0; i < len && !subscriber.closed; i++) {\n            subscriber.next(_events[i].value);\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue_1.queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject_1.Subject));\nexports.ReplaySubject = ReplaySubject;\nvar ReplayEvent = (function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n//# sourceMappingURL=ReplaySubject.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar isArray_1 = require('../util/isArray');\nvar Subscriber_1 = require('../Subscriber');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar iterator_1 = require('../symbol/iterator');\n/* tslint:enable:max-line-length */\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nfunction zip() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function zipOperatorFunction(source) {\n        return source.lift.call(zipStatic.apply(void 0, [source].concat(observables)));\n    };\n}\nexports.zip = zip;\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nfunction zipStatic() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = observables[observables.length - 1];\n    if (typeof project === 'function') {\n        observables.pop();\n    }\n    return new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project));\n}\nexports.zipStatic = zipStatic;\nvar ZipOperator = (function () {\n    function ZipOperator(project) {\n        this.project = project;\n    }\n    ZipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.project));\n    };\n    return ZipOperator;\n}());\nexports.ZipOperator = ZipOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipSubscriber = (function (_super) {\n    __extends(ZipSubscriber, _super);\n    function ZipSubscriber(destination, project, values) {\n        if (values === void 0) { values = Object.create(null); }\n        _super.call(this, destination);\n        this.iterators = [];\n        this.active = 0;\n        this.project = (typeof project === 'function') ? project : null;\n        this.values = values;\n    }\n    ZipSubscriber.prototype._next = function (value) {\n        var iterators = this.iterators;\n        if (isArray_1.isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[iterator_1.iterator] === 'function') {\n            iterators.push(new StaticIterator(value[iterator_1.iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    };\n    ZipSubscriber.prototype._complete = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                this.add(iterator.subscribe(iterator, i));\n            }\n            else {\n                this.active--; // not an observable\n            }\n        }\n    };\n    ZipSubscriber.prototype.notifyInactive = function () {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ZipSubscriber.prototype.checkIterators = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        var destination = this.destination;\n        // abort if not all of them have values\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        var shouldComplete = false;\n        var args = [];\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            var result = iterator.next();\n            // check to see if it's completed now that you've gotten\n            // the next value.\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.project) {\n            this._tryProject(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    };\n    ZipSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return ZipSubscriber;\n}(Subscriber_1.Subscriber));\nexports.ZipSubscriber = ZipSubscriber;\nvar StaticIterator = (function () {\n    function StaticIterator(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    StaticIterator.prototype.hasValue = function () {\n        return true;\n    };\n    StaticIterator.prototype.next = function () {\n        var result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    };\n    StaticIterator.prototype.hasCompleted = function () {\n        var nextResult = this.nextResult;\n        return nextResult && nextResult.done;\n    };\n    return StaticIterator;\n}());\nvar StaticArrayIterator = (function () {\n    function StaticArrayIterator(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    StaticArrayIterator.prototype[iterator_1.iterator] = function () {\n        return this;\n    };\n    StaticArrayIterator.prototype.next = function (value) {\n        var i = this.index++;\n        var array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    };\n    StaticArrayIterator.prototype.hasValue = function () {\n        return this.array.length > this.index;\n    };\n    StaticArrayIterator.prototype.hasCompleted = function () {\n        return this.array.length === this.index;\n    };\n    return StaticArrayIterator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipBufferIterator = (function (_super) {\n    __extends(ZipBufferIterator, _super);\n    function ZipBufferIterator(destination, parent, observable) {\n        _super.call(this, destination);\n        this.parent = parent;\n        this.observable = observable;\n        this.stillUnsubscribed = true;\n        this.buffer = [];\n        this.isComplete = false;\n    }\n    ZipBufferIterator.prototype[iterator_1.iterator] = function () {\n        return this;\n    };\n    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n    //    this is legit because `next()` will never be called by a subscription in this case.\n    ZipBufferIterator.prototype.next = function () {\n        var buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    };\n    ZipBufferIterator.prototype.hasValue = function () {\n        return this.buffer.length > 0;\n    };\n    ZipBufferIterator.prototype.hasCompleted = function () {\n        return this.buffer.length === 0 && this.isComplete;\n    };\n    ZipBufferIterator.prototype.notifyComplete = function () {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    };\n    ZipBufferIterator.prototype.subscribe = function (value, index) {\n        return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);\n    };\n    return ZipBufferIterator;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=zip.js.map","\"use strict\";\nfunction isDate(value) {\n    return value instanceof Date && !isNaN(+value);\n}\nexports.isDate = isDate;\n//# sourceMappingURL=isDate.js.map","\"use strict\";\nvar Observable_1 = require('../Observable');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar isScheduler_1 = require('../util/isScheduler');\nvar mergeAll_1 = require('../operators/mergeAll');\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler_1.isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {\n        return observables[0];\n    }\n    return mergeAll_1.mergeAll(concurrent)(new ArrayObservable_1.ArrayObservable(observables, scheduler));\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar mergeMap_1 = require('./mergeMap');\nvar identity_1 = require('../util/identity');\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMap_1.mergeMap(identity_1.identity, null, concurrent);\n}\nexports.mergeAll = mergeAll;\n//# sourceMappingURL=mergeAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nexports.observeOn = observeOn;\nvar ObserveOnOperator = (function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\nexports.ObserveOnOperator = ObserveOnOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ObserveOnSubscriber = (function (_super) {\n    __extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification_1.Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification_1.Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification_1.Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber_1.Subscriber));\nexports.ObserveOnSubscriber = ObserveOnSubscriber;\nvar ObserveOnMessage = (function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\nexports.ObserveOnMessage = ObserveOnMessage;\n//# sourceMappingURL=observeOn.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar isArray_1 = require('../util/isArray');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar none = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return function (source) { return source.lift.call(new ArrayObservable_1.ArrayObservable([source].concat(observables)), new CombineLatestOperator(project)); };\n}\nexports.combineLatest = combineLatest;\nvar CombineLatestOperator = (function () {\n    function CombineLatestOperator(project) {\n        this.project = project;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n    };\n    return CombineLatestOperator;\n}());\nexports.CombineLatestOperator = CombineLatestOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CombineLatestSubscriber = (function (_super) {\n    __extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, project) {\n        _super.call(this, destination);\n        this.project = project;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(none);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === none ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.project) {\n                this._tryProject(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\n        var result;\n        try {\n            result = this.project.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.CombineLatestSubscriber = CombineLatestSubscriber;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar Subscription_1 = require('./Subscription');\n/**\n * @class AsyncSubject<T>\n */\nvar AsyncSubject = (function (_super) {\n    __extends(AsyncSubject, _super);\n    function AsyncSubject() {\n        _super.apply(this, arguments);\n        this.value = null;\n        this.hasNext = false;\n        this.hasCompleted = false;\n    }\n    AsyncSubject.prototype._subscribe = function (subscriber) {\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.hasCompleted && this.hasNext) {\n            subscriber.next(this.value);\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    AsyncSubject.prototype.next = function (value) {\n        if (!this.hasCompleted) {\n            this.value = value;\n            this.hasNext = true;\n        }\n    };\n    AsyncSubject.prototype.error = function (error) {\n        if (!this.hasCompleted) {\n            _super.prototype.error.call(this, error);\n        }\n    };\n    AsyncSubject.prototype.complete = function () {\n        this.hasCompleted = true;\n        if (this.hasNext) {\n            _super.prototype.next.call(this, this.value);\n        }\n        _super.prototype.complete.call(this);\n    };\n    return AsyncSubject;\n}(Subject_1.Subject));\nexports.AsyncSubject = AsyncSubject;\n//# sourceMappingURL=AsyncSubject.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = (function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexports.getSymbolObservable = getSymbolObservable;\nexports.observable = getSymbolObservable(root_1.root);\n/**\n * @deprecated use observable instead\n */\nexports.$$observable = exports.observable;\n//# sourceMappingURL=observable.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nvar Symbol = root_1.root.Symbol;\nexports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexports.$$rxSubscriber = exports.rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map","\"use strict\";\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\nexports.isFunction = isFunction;\n//# sourceMappingURL=isFunction.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar map_1 = require('./map');\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nfunction timestamp(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return map_1.map(function (value) { return new Timestamp(value, scheduler.now()); });\n    // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\nexports.timestamp = timestamp;\nvar Timestamp = (function () {\n    function Timestamp(value, timestamp) {\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n    return Timestamp;\n}());\nexports.Timestamp = Timestamp;\n;\n//# sourceMappingURL=timestamp.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return function switchMapOperatorFunction(source) {\n        return source.lift(new SwitchMapOperator(project, resultSelector));\n    };\n}\nexports.switchMap = switchMap;\nvar SwitchMapOperator = (function () {\n    function SwitchMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = (function (_super) {\n    __extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=switchMap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nfunction refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nexports.refCount = refCount;\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=refCount.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nfunction takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nexports.takeLast = takeLast;\nvar TakeLastOperator = (function () {\n    function TakeLastOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    TakeLastOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    };\n    return TakeLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeLastSubscriber = (function (_super) {\n    __extends(TakeLastSubscriber, _super);\n    function TakeLastSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.ring = new Array();\n        this.count = 0;\n    }\n    TakeLastSubscriber.prototype._next = function (value) {\n        var ring = this.ring;\n        var total = this.total;\n        var count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            var index = count % total;\n            ring[index] = value;\n        }\n    };\n    TakeLastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        var count = this.count;\n        if (count > 0) {\n            var total = this.count >= this.total ? this.total : this.count;\n            var ring = this.ring;\n            for (var i = 0; i < total; i++) {\n                var idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    };\n    return TakeLastSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=takeLast.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    var hasSeed = false;\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nexports.scan = scan;\nvar ScanOperator = (function () {\n    function ScanOperator(accumulator, seed, hasSeed) {\n        if (hasSeed === void 0) { hasSeed = false; }\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    };\n    return ScanOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ScanSubscriber = (function (_super) {\n    __extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this._seed = _seed;\n        this.hasSeed = hasSeed;\n        this.index = 0;\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.hasSeed = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nfunction audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nexports.audit = audit;\nvar AuditOperator = (function () {\n    function AuditOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    AuditOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    };\n    return AuditOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AuditSubscriber = (function (_super) {\n    __extends(AuditSubscriber, _super);\n    function AuditSubscriber(destination, durationSelector) {\n        _super.call(this, destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n    }\n    AuditSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            var duration = tryCatch_1.tryCatch(this.durationSelector)(value);\n            if (duration === errorObject_1.errorObject) {\n                this.destination.error(errorObject_1.errorObject.e);\n            }\n            else {\n                var innerSubscription = subscribeToResult_1.subscribeToResult(this, duration);\n                if (innerSubscription.closed) {\n                    this.clearThrottle();\n                }\n                else {\n                    this.add(this.throttled = innerSubscription);\n                }\n            }\n        }\n    };\n    AuditSubscriber.prototype.clearThrottle = function () {\n        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    };\n    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    };\n    AuditSubscriber.prototype.notifyComplete = function () {\n        this.clearThrottle();\n    };\n    return AuditSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=audit.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nfunction find(predicate, thisArg) {\n    if (typeof predicate !== 'function') {\n        throw new TypeError('predicate is not a function');\n    }\n    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };\n}\nexports.find = find;\nvar FindValueOperator = (function () {\n    function FindValueOperator(predicate, source, yieldIndex, thisArg) {\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n    }\n    FindValueOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n    };\n    return FindValueOperator;\n}());\nexports.FindValueOperator = FindValueOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FindValueSubscriber = (function (_super) {\n    __extends(FindValueSubscriber, _super);\n    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n        this.index = 0;\n    }\n    FindValueSubscriber.prototype.notifyComplete = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    FindValueSubscriber.prototype._next = function (value) {\n        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;\n        var index = this.index++;\n        try {\n            var result = predicate.call(thisArg || this, value, index, this.source);\n            if (result) {\n                this.notifyComplete(this.yieldIndex ? index : value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    FindValueSubscriber.prototype._complete = function () {\n        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n    };\n    return FindValueSubscriber;\n}(Subscriber_1.Subscriber));\nexports.FindValueSubscriber = FindValueSubscriber;\n//# sourceMappingURL=find.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nexports.filter = filter;\nvar FilterOperator = (function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = (function (_super) {\n    __extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nfunction distinctUntilChanged(compare, keySelector) {\n    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };\n}\nexports.distinctUntilChanged = distinctUntilChanged;\nvar DistinctUntilChangedOperator = (function () {\n    function DistinctUntilChangedOperator(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    };\n    return DistinctUntilChangedOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctUntilChangedSubscriber = (function (_super) {\n    __extends(DistinctUntilChangedSubscriber, _super);\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.hasKey = false;\n        if (typeof compare === 'function') {\n            this.compare = compare;\n        }\n    }\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n        return x === y;\n    };\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n        var keySelector = this.keySelector;\n        var key = value;\n        if (keySelector) {\n            key = tryCatch_1.tryCatch(this.keySelector)(value);\n            if (key === errorObject_1.errorObject) {\n                return this.destination.error(errorObject_1.errorObject.e);\n            }\n        }\n        var result = false;\n        if (this.hasKey) {\n            result = tryCatch_1.tryCatch(this.compare)(this.key, key);\n            if (result === errorObject_1.errorObject) {\n                return this.destination.error(errorObject_1.errorObject.e);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (Boolean(result) === false) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    };\n    return DistinctUntilChangedSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=distinctUntilChanged.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nfunction defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) { defaultValue = null; }\n    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };\n}\nexports.defaultIfEmpty = defaultIfEmpty;\nvar DefaultIfEmptyOperator = (function () {\n    function DefaultIfEmptyOperator(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n    };\n    return DefaultIfEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DefaultIfEmptySubscriber = (function (_super) {\n    __extends(DefaultIfEmptySubscriber, _super);\n    function DefaultIfEmptySubscriber(destination, defaultValue) {\n        _super.call(this, destination);\n        this.defaultValue = defaultValue;\n        this.isEmpty = true;\n    }\n    DefaultIfEmptySubscriber.prototype._next = function (value) {\n        this.isEmpty = false;\n        this.destination.next(value);\n    };\n    DefaultIfEmptySubscriber.prototype._complete = function () {\n        if (this.isEmpty) {\n            this.destination.next(this.defaultValue);\n        }\n        this.destination.complete();\n    };\n    return DefaultIfEmptySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=defaultIfEmpty.js.map","\"use strict\";\nvar mergeMap_1 = require('./mergeMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nfunction concatMap(project, resultSelector) {\n    return mergeMap_1.mergeMap(project, resultSelector, 1);\n}\nexports.concatMap = concatMap;\n//# sourceMappingURL=concatMap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar FromObservable_1 = require('../observable/FromObservable');\nvar isArray_1 = require('../util/isArray');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nfunction onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };\n}\nexports.onErrorResumeNext = onErrorResumeNext;\n/* tslint:enable:max-line-length */\nfunction onErrorResumeNextStatic() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    var source = null;\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\nexports.onErrorResumeNextStatic = onErrorResumeNextStatic;\nvar OnErrorResumeNextOperator = (function () {\n    function OnErrorResumeNextOperator(nextSources) {\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    };\n    return OnErrorResumeNextOperator;\n}());\nvar OnErrorResumeNextSubscriber = (function (_super) {\n    __extends(OnErrorResumeNextSubscriber, _super);\n    function OnErrorResumeNextSubscriber(destination, nextSources) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._error = function (err) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._complete = function () {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n        var next = this.nextSources.shift();\n        if (next) {\n            this.add(subscribeToResult_1.subscribeToResult(this, next));\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return OnErrorResumeNextSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isArray_1 = require('../util/isArray');\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    // if the only argument is an array, it was most likely called with\n    // `race([obs1, obs2, ...])`\n    if (observables.length === 1) {\n        if (isArray_1.isArray(observables[0])) {\n            observables = observables[0];\n        }\n        else {\n            return observables[0];\n        }\n    }\n    return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());\n}\nexports.race = race;\nvar RaceOperator = (function () {\n    function RaceOperator() {\n    }\n    RaceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RaceSubscriber(subscriber));\n    };\n    return RaceOperator;\n}());\nexports.RaceOperator = RaceOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RaceSubscriber = (function (_super) {\n    __extends(RaceSubscriber, _super);\n    function RaceSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasFirst = false;\n        this.observables = [];\n        this.subscriptions = [];\n    }\n    RaceSubscriber.prototype._next = function (observable) {\n        this.observables.push(observable);\n    };\n    RaceSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            for (var i = 0; i < len && !this.hasFirst; i++) {\n                var observable = observables[i];\n                var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);\n                if (this.subscriptions) {\n                    this.subscriptions.push(subscription);\n                }\n                this.add(subscription);\n            }\n            this.observables = null;\n        }\n    };\n    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (!this.hasFirst) {\n            this.hasFirst = true;\n            for (var i = 0; i < this.subscriptions.length; i++) {\n                if (i !== outerIndex) {\n                    var subscription = this.subscriptions[i];\n                    subscription.unsubscribe();\n                    this.remove(subscription);\n                }\n            }\n            this.subscriptions = null;\n        }\n        this.destination.next(innerValue);\n    };\n    return RaceSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.RaceSubscriber = RaceSubscriber;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar IntervalObservable_1 = require('./IntervalObservable');\nexports.interval = IntervalObservable_1.IntervalObservable.create;\n//# sourceMappingURL=interval.js.map","\"use strict\";\nvar mergeAll_1 = require('./mergeAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n    return mergeAll_1.mergeAll(1);\n}\nexports.concatAll = concatAll;\n//# sourceMappingURL=concatAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ScalarObservable = (function (_super) {\n    __extends(ScalarObservable, _super);\n    function ScalarObservable(value, scheduler) {\n        _super.call(this);\n        this.value = value;\n        this.scheduler = scheduler;\n        this._isScalar = true;\n        if (scheduler) {\n            this._isScalar = false;\n        }\n    }\n    ScalarObservable.create = function (value, scheduler) {\n        return new ScalarObservable(value, scheduler);\n    };\n    ScalarObservable.dispatch = function (state) {\n        var done = state.done, value = state.value, subscriber = state.subscriber;\n        if (done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        state.done = true;\n        this.schedule(state);\n    };\n    ScalarObservable.prototype._subscribe = function (subscriber) {\n        var value = this.value;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n                done: false, value: value, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.next(value);\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        }\n    };\n    return ScalarObservable;\n}(Observable_1.Observable));\nexports.ScalarObservable = ScalarObservable;\n//# sourceMappingURL=ScalarObservable.js.map","\"use strict\";\n/* tslint:disable:no-empty */\nfunction noop() { }\nexports.noop = noop;\n//# sourceMappingURL=noop.js.map","\"use strict\";\nvar noop_1 = require('./noop');\n/* tslint:enable:max-line-length */\nfunction pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexports.pipe = pipe;\n/* @internal */\nfunction pipeFromArray(fns) {\n    if (!fns) {\n        return noop_1.noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\nexports.pipeFromArray = pipeFromArray;\n//# sourceMappingURL=pipe.js.map","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar VirtualTimeScheduler = (function (_super) {\n    __extends(VirtualTimeScheduler, _super);\n    function VirtualTimeScheduler(SchedulerAction, maxFrames) {\n        var _this = this;\n        if (SchedulerAction === void 0) { SchedulerAction = VirtualAction; }\n        if (maxFrames === void 0) { maxFrames = Number.POSITIVE_INFINITY; }\n        _super.call(this, SchedulerAction, function () { return _this.frame; });\n        this.maxFrames = maxFrames;\n        this.frame = 0;\n        this.index = -1;\n    }\n    /**\n     * Prompt the Scheduler to execute all of its queued actions, therefore\n     * clearing its queue.\n     * @return {void}\n     */\n    VirtualTimeScheduler.prototype.flush = function () {\n        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;\n        var error, action;\n        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        }\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    VirtualTimeScheduler.frameTimeFactor = 10;\n    return VirtualTimeScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.VirtualTimeScheduler = VirtualTimeScheduler;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar VirtualAction = (function (_super) {\n    __extends(VirtualAction, _super);\n    function VirtualAction(scheduler, work, index) {\n        if (index === void 0) { index = scheduler.index += 1; }\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.index = index;\n        this.active = true;\n        this.index = scheduler.index = index;\n    }\n    VirtualAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (!this.id) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.active = false;\n        // If an action is rescheduled, we save allocations by mutating its state,\n        // pushing it to the end of the scheduler queue, and recycling the action.\n        // But since the VirtualTimeScheduler is used for testing, VirtualActions\n        // must be immutable so they can be inspected later.\n        var action = new VirtualAction(this.scheduler, this.work);\n        this.add(action);\n        return action.schedule(state, delay);\n    };\n    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.delay = scheduler.frame + delay;\n        var actions = scheduler.actions;\n        actions.push(this);\n        actions.sort(VirtualAction.sortActions);\n        return true;\n    };\n    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return undefined;\n    };\n    VirtualAction.prototype._execute = function (state, delay) {\n        if (this.active === true) {\n            return _super.prototype._execute.call(this, state, delay);\n        }\n    };\n    VirtualAction.sortActions = function (a, b) {\n        if (a.delay === b.delay) {\n            if (a.index === b.index) {\n                return 0;\n            }\n            else if (a.index > b.index) {\n                return 1;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (a.delay > b.delay) {\n            return 1;\n        }\n        else {\n            return -1;\n        }\n    };\n    return VirtualAction;\n}(AsyncAction_1.AsyncAction));\nexports.VirtualAction = VirtualAction;\n//# sourceMappingURL=VirtualTimeScheduler.js.map","\"use strict\";\nfunction applyMixins(derivedCtor, baseCtors) {\n    for (var i = 0, len = baseCtors.length; i < len; i++) {\n        var baseCtor = baseCtors[i];\n        var propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n        for (var j = 0, len2 = propertyKeys.length; j < len2; j++) {\n            var name_1 = propertyKeys[j];\n            derivedCtor.prototype[name_1] = baseCtor.prototype[name_1];\n        }\n    }\n}\nexports.applyMixins = applyMixins;\n//# sourceMappingURL=applyMixins.js.map","\"use strict\";\nvar SubscriptionLog = (function () {\n    function SubscriptionLog(subscribedFrame, unsubscribedFrame) {\n        if (unsubscribedFrame === void 0) { unsubscribedFrame = Number.POSITIVE_INFINITY; }\n        this.subscribedFrame = subscribedFrame;\n        this.unsubscribedFrame = unsubscribedFrame;\n    }\n    return SubscriptionLog;\n}());\nexports.SubscriptionLog = SubscriptionLog;\n//# sourceMappingURL=SubscriptionLog.js.map","\"use strict\";\nvar SubscriptionLog_1 = require('./SubscriptionLog');\nvar SubscriptionLoggable = (function () {\n    function SubscriptionLoggable() {\n        this.subscriptions = [];\n    }\n    SubscriptionLoggable.prototype.logSubscribedFrame = function () {\n        this.subscriptions.push(new SubscriptionLog_1.SubscriptionLog(this.scheduler.now()));\n        return this.subscriptions.length - 1;\n    };\n    SubscriptionLoggable.prototype.logUnsubscribedFrame = function (index) {\n        var subscriptionLogs = this.subscriptions;\n        var oldSubscriptionLog = subscriptionLogs[index];\n        subscriptionLogs[index] = new SubscriptionLog_1.SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());\n    };\n    return SubscriptionLoggable;\n}());\nexports.SubscriptionLoggable = SubscriptionLoggable;\n//# sourceMappingURL=SubscriptionLoggable.js.map","\"use strict\";\nvar zip_1 = require('./zip');\nfunction zipAll(project) {\n    return function (source) { return source.lift(new zip_1.ZipOperator(project)); };\n}\nexports.zipAll = zipAll;\n//# sourceMappingURL=zipAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nexports.withLatestFrom = withLatestFrom;\nvar WithLatestFromOperator = (function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = (function (_super) {\n    __extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        _super.call(this, destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        var len = observables.length;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n        }\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=withLatestFrom.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nfunction windowWhen(closingSelector) {\n    return function windowWhenOperatorFunction(source) {\n        return source.lift(new WindowOperator(closingSelector));\n    };\n}\nexports.windowWhen = windowWhen;\nvar WindowOperator = (function () {\n    function WindowOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = (function (_super) {\n    __extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination, closingSelector) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.closingSelector = closingSelector;\n        this.openWindow();\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n        if (this.closingNotification) {\n            this.closingNotification.unsubscribe();\n        }\n    };\n    WindowSubscriber.prototype.openWindow = function (innerSub) {\n        if (innerSub === void 0) { innerSub = null; }\n        if (innerSub) {\n            this.remove(innerSub);\n            innerSub.unsubscribe();\n        }\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var window = this.window = new Subject_1.Subject();\n        this.destination.next(window);\n        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject_1.errorObject) {\n            var err = errorObject_1.errorObject.e;\n            this.destination.error(err);\n            this.window.error(err);\n        }\n        else {\n            this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));\n        }\n    };\n    return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=windowWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Subscription_1 = require('../Subscription');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nfunction windowToggle(openings, closingSelector) {\n    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };\n}\nexports.windowToggle = windowToggle;\nvar WindowToggleOperator = (function () {\n    function WindowToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    WindowToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return WindowToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowToggleSubscriber = (function (_super) {\n    __extends(WindowToggleSubscriber, _super);\n    function WindowToggleSubscriber(destination, openings, closingSelector) {\n        _super.call(this, destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));\n    }\n    WindowToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        if (contexts) {\n            var len = contexts.length;\n            for (var i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.error(err);\n                context.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._error.call(this, err);\n    };\n    WindowToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.complete();\n                context.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    WindowToggleSubscriber.prototype._unsubscribe = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.unsubscribe();\n                context.subscription.unsubscribe();\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);\n            if (closingNotifier === errorObject_1.errorObject) {\n                return this.error(errorObject_1.errorObject.e);\n            }\n            else {\n                var window_1 = new Subject_1.Subject();\n                var subscription = new Subscription_1.Subscription();\n                var context = { window: window_1, subscription: subscription };\n                this.contexts.push(context);\n                var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n                if (innerSubscription.closed) {\n                    this.closeWindow(this.contexts.length - 1);\n                }\n                else {\n                    innerSubscription.context = context;\n                    subscription.add(innerSubscription);\n                }\n                this.destination.next(window_1);\n            }\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyError = function (err) {\n        this.error(err);\n    };\n    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    };\n    WindowToggleSubscriber.prototype.closeWindow = function (index) {\n        if (index === -1) {\n            return;\n        }\n        var contexts = this.contexts;\n        var context = contexts[index];\n        var window = context.window, subscription = context.subscription;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    };\n    return WindowToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=windowToggle.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar async_1 = require('../scheduler/async');\nvar Subscriber_1 = require('../Subscriber');\nvar isNumeric_1 = require('../util/isNumeric');\nvar isScheduler_1 = require('../util/isScheduler');\nfunction windowTime(windowTimeSpan) {\n    var scheduler = async_1.async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler_1.isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler_1.isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric_1.isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler_1.isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric_1.isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return function windowTimeOperatorFunction(source) {\n        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n    };\n}\nexports.windowTime = windowTime;\nvar WindowTimeOperator = (function () {\n    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n    }\n    WindowTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n    };\n    return WindowTimeOperator;\n}());\nvar CountedSubject = (function (_super) {\n    __extends(CountedSubject, _super);\n    function CountedSubject() {\n        _super.apply(this, arguments);\n        this._numberOfNextedValues = 0;\n    }\n    CountedSubject.prototype.next = function (value) {\n        this._numberOfNextedValues++;\n        _super.prototype.next.call(this, value);\n    };\n    Object.defineProperty(CountedSubject.prototype, \"numberOfNextedValues\", {\n        get: function () {\n            return this._numberOfNextedValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CountedSubject;\n}(Subject_1.Subject));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowTimeSubscriber = (function (_super) {\n    __extends(WindowTimeSubscriber, _super);\n    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n        this.windows = [];\n        var window = this.openWindow();\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            var closeState = { subscriber: this, window: window, context: null };\n            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };\n            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n        }\n        else {\n            var timeSpanOnlyState = { subscriber: this, window: window, windowTimeSpan: windowTimeSpan };\n            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n        }\n    }\n    WindowTimeSubscriber.prototype._next = function (value) {\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len; i++) {\n            var window_1 = windows[i];\n            if (!window_1.closed) {\n                window_1.next(value);\n                if (window_1.numberOfNextedValues >= this.maxWindowSize) {\n                    this.closeWindow(window_1);\n                }\n            }\n        }\n    };\n    WindowTimeSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            windows.shift().error(err);\n        }\n        this.destination.error(err);\n    };\n    WindowTimeSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            var window_2 = windows.shift();\n            if (!window_2.closed) {\n                window_2.complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowTimeSubscriber.prototype.openWindow = function () {\n        var window = new CountedSubject();\n        this.windows.push(window);\n        var destination = this.destination;\n        destination.next(window);\n        return window;\n    };\n    WindowTimeSubscriber.prototype.closeWindow = function (window) {\n        window.complete();\n        var windows = this.windows;\n        windows.splice(windows.indexOf(window), 1);\n    };\n    return WindowTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchWindowTimeSpanOnly(state) {\n    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;\n    if (window) {\n        subscriber.closeWindow(window);\n    }\n    state.window = subscriber.openWindow();\n    this.schedule(state, windowTimeSpan);\n}\nfunction dispatchWindowCreation(state) {\n    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;\n    var window = subscriber.openWindow();\n    var action = this;\n    var context = { action: action, subscription: null };\n    var timeSpanState = { subscriber: subscriber, window: window, context: context };\n    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n    action.add(context.subscription);\n    action.schedule(state, windowCreationInterval);\n}\nfunction dispatchWindowClose(state) {\n    var subscriber = state.subscriber, window = state.window, context = state.context;\n    if (context && context.action && context.subscription) {\n        context.action.remove(context.subscription);\n    }\n    subscriber.closeWindow(window);\n}\n//# sourceMappingURL=windowTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subject_1 = require('../Subject');\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nfunction windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n    return function windowCountOperatorFunction(source) {\n        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\n    };\n}\nexports.windowCount = windowCount;\nvar WindowCountOperator = (function () {\n    function WindowCountOperator(windowSize, startWindowEvery) {\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n    }\n    WindowCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n    };\n    return WindowCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowCountSubscriber = (function (_super) {\n    __extends(WindowCountSubscriber, _super);\n    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n        this.windows = [new Subject_1.Subject()];\n        this.count = 0;\n        destination.next(this.windows[0]);\n    }\n    WindowCountSubscriber.prototype._next = function (value) {\n        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n        var destination = this.destination;\n        var windowSize = this.windowSize;\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len && !this.closed; i++) {\n            windows[i].next(value);\n        }\n        var c = this.count - windowSize + 1;\n        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n            windows.shift().complete();\n        }\n        if (++this.count % startWindowEvery === 0 && !this.closed) {\n            var window_1 = new Subject_1.Subject();\n            windows.push(window_1);\n            destination.next(window_1);\n        }\n    };\n    WindowCountSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().error(err);\n            }\n        }\n        this.destination.error(err);\n    };\n    WindowCountSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowCountSubscriber.prototype._unsubscribe = function () {\n        this.count = 0;\n        this.windows = null;\n    };\n    return WindowCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=windowCount.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nfunction window(windowBoundaries) {\n    return function windowOperatorFunction(source) {\n        return source.lift(new WindowOperator(windowBoundaries));\n    };\n}\nexports.window = window;\nvar WindowOperator = (function () {\n    function WindowOperator(windowBoundaries) {\n        this.windowBoundaries = windowBoundaries;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        var windowSubscriber = new WindowSubscriber(subscriber);\n        var sourceSubscription = source.subscribe(windowSubscriber);\n        if (!sourceSubscription.closed) {\n            windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));\n        }\n        return sourceSubscription;\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = (function (_super) {\n    __extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination) {\n        _super.call(this, destination);\n        this.window = new Subject_1.Subject();\n        destination.next(this.window);\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow();\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this._complete();\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n    };\n    WindowSubscriber.prototype._unsubscribe = function () {\n        this.window = null;\n    };\n    WindowSubscriber.prototype.openWindow = function () {\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var destination = this.destination;\n        var newWindow = this.window = new Subject_1.Subject();\n        destination.next(newWindow);\n    };\n    return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=window.js.map","\"use strict\";\nvar reduce_1 = require('./reduce');\nfunction toArrayReducer(arr, item, index) {\n    if (index === 0) {\n        return [item];\n    }\n    arr.push(item);\n    return arr;\n}\nfunction toArray() {\n    return reduce_1.reduce(toArrayReducer, []);\n}\nexports.toArray = toArray;\n//# sourceMappingURL=toArray.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nfunction timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) {\n        var absoluteTimeout = isDate_1.isDate(due);\n        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n    };\n}\nexports.timeoutWith = timeoutWith;\nvar TimeoutWithOperator = (function () {\n    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n    }\n    TimeoutWithOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n    };\n    return TimeoutWithOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutWithSubscriber = (function (_super) {\n    __extends(TimeoutWithSubscriber, _super);\n    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n        _super.call(this, destination);\n        this.absoluteTimeout = absoluteTimeout;\n        this.waitFor = waitFor;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n        this.action = null;\n        this.scheduleTimeout();\n    }\n    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {\n        var withObservable = subscriber.withObservable;\n        subscriber._unsubscribeAndRecycle();\n        subscriber.add(subscribeToResult_1.subscribeToResult(subscriber, withObservable));\n    };\n    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutWithSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    TimeoutWithSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.withObservable = null;\n    };\n    return TimeoutWithSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=timeoutWith.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when duetime elapses.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nvar TimeoutError = (function (_super) {\n    __extends(TimeoutError, _super);\n    function TimeoutError() {\n        var err = _super.call(this, 'Timeout has occurred');\n        this.name = err.name = 'TimeoutError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return TimeoutError;\n}(Error));\nexports.TimeoutError = TimeoutError;\n//# sourceMappingURL=TimeoutError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar Subscriber_1 = require('../Subscriber');\nvar TimeoutError_1 = require('../util/TimeoutError');\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nfunction timeout(due, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    var absoluteTimeout = isDate_1.isDate(due);\n    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n    return function (source) { return source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError_1.TimeoutError())); };\n}\nexports.timeout = timeout;\nvar TimeoutOperator = (function () {\n    function TimeoutOperator(waitFor, absoluteTimeout, scheduler, errorInstance) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.scheduler = scheduler;\n        this.errorInstance = errorInstance;\n    }\n    TimeoutOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance));\n    };\n    return TimeoutOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutSubscriber = (function (_super) {\n    __extends(TimeoutSubscriber, _super);\n    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, scheduler, errorInstance) {\n        _super.call(this, destination);\n        this.absoluteTimeout = absoluteTimeout;\n        this.waitFor = waitFor;\n        this.scheduler = scheduler;\n        this.errorInstance = errorInstance;\n        this.action = null;\n        this.scheduleTimeout();\n    }\n    TimeoutSubscriber.dispatchTimeout = function (subscriber) {\n        subscriber.error(subscriber.errorInstance);\n    };\n    TimeoutSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    TimeoutSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.errorInstance = null;\n    };\n    return TimeoutSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=timeout.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\nfunction timeInterval(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new TimeIntervalOperator(scheduler)); };\n}\nexports.timeInterval = timeInterval;\nvar TimeInterval = (function () {\n    function TimeInterval(value, interval) {\n        this.value = value;\n        this.interval = interval;\n    }\n    return TimeInterval;\n}());\nexports.TimeInterval = TimeInterval;\n;\nvar TimeIntervalOperator = (function () {\n    function TimeIntervalOperator(scheduler) {\n        this.scheduler = scheduler;\n    }\n    TimeIntervalOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n    };\n    return TimeIntervalOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeIntervalSubscriber = (function (_super) {\n    __extends(TimeIntervalSubscriber, _super);\n    function TimeIntervalSubscriber(destination, scheduler) {\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.lastTime = 0;\n        this.lastTime = scheduler.now();\n    }\n    TimeIntervalSubscriber.prototype._next = function (value) {\n        var now = this.scheduler.now();\n        var span = now - this.lastTime;\n        this.lastTime = now;\n        this.destination.next(new TimeInterval(value, span));\n    };\n    return TimeIntervalSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=timeInterval.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timeInterval_1 = require('../operators/timeInterval');\nexports.TimeInterval = timeInterval_1.TimeInterval;\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nfunction timeInterval(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeInterval_1.timeInterval(scheduler)(this);\n}\nexports.timeInterval = timeInterval;\n//# sourceMappingURL=timeInterval.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\nvar throttle_1 = require('./throttle');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nfunction throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };\n}\nexports.throttleTime = throttleTime;\nvar ThrottleTimeOperator = (function () {\n    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    };\n    return ThrottleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleTimeSubscriber = (function (_super) {\n    __extends(ThrottleTimeSubscriber, _super);\n    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\n        _super.call(this, destination);\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n        this._hasTrailingValue = false;\n        this._trailingValue = null;\n    }\n    ThrottleTimeSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n        }\n    };\n    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n        var throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    };\n    return ThrottleTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNext(arg) {\n    var subscriber = arg.subscriber;\n    subscriber.clearThrottle();\n}\n//# sourceMappingURL=throttleTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nfunction takeWhile(predicate) {\n    return function (source) { return source.lift(new TakeWhileOperator(predicate)); };\n}\nexports.takeWhile = takeWhile;\nvar TakeWhileOperator = (function () {\n    function TakeWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    TakeWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n    };\n    return TakeWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeWhileSubscriber = (function (_super) {\n    __extends(TakeWhileSubscriber, _super);\n    function TakeWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.index = 0;\n    }\n    TakeWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        var result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    };\n    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n        var destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            destination.complete();\n        }\n    };\n    return TakeWhileSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=takeWhile.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nexports.takeUntil = takeUntil;\nvar TakeUntilOperator = (function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = (function (_super) {\n    __extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=takeUntil.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nfunction take(count) {\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nexports.take = take;\nvar TakeOperator = (function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = (function (_super) {\n    __extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=take.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nfunction switchMapTo(innerObservable, resultSelector) {\n    return function (source) { return source.lift(new SwitchMapToOperator(innerObservable, resultSelector)); };\n}\nexports.switchMapTo = switchMapTo;\nvar SwitchMapToOperator = (function () {\n    function SwitchMapToOperator(observable, resultSelector) {\n        this.observable = observable;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n    };\n    return SwitchMapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapToSubscriber = (function (_super) {\n    __extends(SwitchMapToSubscriber, _super);\n    function SwitchMapToSubscriber(destination, inner, resultSelector) {\n        _super.call(this, destination);\n        this.inner = inner;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapToSubscriber.prototype._next = function (value) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));\n    };\n    SwitchMapToSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    return SwitchMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=switchMapTo.js.map","\"use strict\";\nvar switchMap_1 = require('./switchMap');\nvar identity_1 = require('../util/identity');\nfunction switchAll() {\n    return switchMap_1.switchMap(identity_1.identity);\n}\nexports.switchAll = switchAll;\n//# sourceMappingURL=switchAll.js.map","var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmeidate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","\"use strict\";\nvar AsapAction_1 = require('./AsapAction');\nvar AsapScheduler_1 = require('./AsapScheduler');\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\nexports.asap = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);\n//# sourceMappingURL=asap.js.map","\"use strict\";\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar ScalarObservable_1 = require('../observable/ScalarObservable');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\nvar concat_1 = require('../observable/concat');\nvar isScheduler_1 = require('../util/isScheduler');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len === 1) {\n            return concat_1.concat(new ScalarObservable_1.ScalarObservable(array[0], scheduler), source);\n        }\n        else if (len > 1) {\n            return concat_1.concat(new ArrayObservable_1.ArrayObservable(array, scheduler), source);\n        }\n        else {\n            return concat_1.concat(new EmptyObservable_1.EmptyObservable(scheduler), source);\n        }\n    };\n}\nexports.startWith = startWith;\n//# sourceMappingURL=startWith.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nfunction skipWhile(predicate) {\n    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };\n}\nexports.skipWhile = skipWhile;\nvar SkipWhileOperator = (function () {\n    function SkipWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    SkipWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    };\n    return SkipWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipWhileSubscriber = (function (_super) {\n    __extends(SkipWhileSubscriber, _super);\n    function SkipWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.skipping = true;\n        this.index = 0;\n    }\n    SkipWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    };\n    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n        try {\n            var result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    return SkipWhileSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=skipWhile.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nfunction skipUntil(notifier) {\n    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };\n}\nexports.skipUntil = skipUntil;\nvar SkipUntilOperator = (function () {\n    function SkipUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SkipUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n    };\n    return SkipUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipUntilSubscriber = (function (_super) {\n    __extends(SkipUntilSubscriber, _super);\n    function SkipUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.hasValue = false;\n        this.isInnerStopped = false;\n        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n    }\n    SkipUntilSubscriber.prototype._next = function (value) {\n        if (this.hasValue) {\n            _super.prototype._next.call(this, value);\n        }\n    };\n    SkipUntilSubscriber.prototype._complete = function () {\n        if (this.isInnerStopped) {\n            _super.prototype._complete.call(this);\n        }\n        else {\n            this.unsubscribe();\n        }\n    };\n    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.hasValue = true;\n    };\n    SkipUntilSubscriber.prototype.notifyComplete = function () {\n        this.isInnerStopped = true;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    return SkipUntilSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=skipUntil.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nfunction skipLast(count) {\n    return function (source) { return source.lift(new SkipLastOperator(count)); };\n}\nexports.skipLast = skipLast;\nvar SkipLastOperator = (function () {\n    function SkipLastOperator(_skipCount) {\n        this._skipCount = _skipCount;\n        if (this._skipCount < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    SkipLastOperator.prototype.call = function (subscriber, source) {\n        if (this._skipCount === 0) {\n            // If we don't want to skip any values then just subscribe\n            // to Subscriber without any further logic.\n            return source.subscribe(new Subscriber_1.Subscriber(subscriber));\n        }\n        else {\n            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n        }\n    };\n    return SkipLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipLastSubscriber = (function (_super) {\n    __extends(SkipLastSubscriber, _super);\n    function SkipLastSubscriber(destination, _skipCount) {\n        _super.call(this, destination);\n        this._skipCount = _skipCount;\n        this._count = 0;\n        this._ring = new Array(_skipCount);\n    }\n    SkipLastSubscriber.prototype._next = function (value) {\n        var skipCount = this._skipCount;\n        var count = this._count++;\n        if (count < skipCount) {\n            this._ring[count] = value;\n        }\n        else {\n            var currentIndex = count % skipCount;\n            var ring = this._ring;\n            var oldValue = ring[currentIndex];\n            ring[currentIndex] = value;\n            this.destination.next(oldValue);\n        }\n    };\n    return SkipLastSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=skipLast.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nfunction skip(count) {\n    return function (source) { return source.lift(new SkipOperator(count)); };\n}\nexports.skip = skip;\nvar SkipOperator = (function () {\n    function SkipOperator(total) {\n        this.total = total;\n    }\n    SkipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    };\n    return SkipOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipSubscriber = (function (_super) {\n    __extends(SkipSubscriber, _super);\n    function SkipSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    SkipSubscriber.prototype._next = function (x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    };\n    return SkipSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=skip.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nfunction single(predicate) {\n    return function (source) { return source.lift(new SingleOperator(predicate, source)); };\n}\nexports.single = single;\nvar SingleOperator = (function () {\n    function SingleOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    SingleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n    };\n    return SingleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SingleSubscriber = (function (_super) {\n    __extends(SingleSubscriber, _super);\n    function SingleSubscriber(destination, predicate, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.seenValue = false;\n        this.index = 0;\n    }\n    SingleSubscriber.prototype.applySingleValue = function (value) {\n        if (this.seenValue) {\n            this.destination.error('Sequence contains more than one element');\n        }\n        else {\n            this.seenValue = true;\n            this.singleValue = value;\n        }\n    };\n    SingleSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this.tryNext(value, index);\n        }\n        else {\n            this.applySingleValue(value);\n        }\n    };\n    SingleSubscriber.prototype.tryNext = function (value, index) {\n        try {\n            if (this.predicate(value, index, this.source)) {\n                this.applySingleValue(value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    SingleSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index > 0) {\n            destination.next(this.seenValue ? this.singleValue : undefined);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return SingleSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=single.js.map","\"use strict\";\nvar ReplaySubject_1 = require('../ReplaySubject');\n/**\n * @method shareReplay\n * @owner Observable\n */\nfunction shareReplay(bufferSize, windowTime, scheduler) {\n    return function (source) { return source.lift(shareReplayOperator(bufferSize, windowTime, scheduler)); };\n}\nexports.shareReplay = shareReplay;\nfunction shareReplayOperator(bufferSize, windowTime, scheduler) {\n    var subject;\n    var refCount = 0;\n    var subscription;\n    var hasError = false;\n    var isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n            subscription = source.subscribe({\n                next: function (value) { subject.next(value); },\n                error: function (err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete: function () {\n                    isComplete = true;\n                    subject.complete();\n                },\n            });\n        }\n        var innerSub = subject.subscribe(this);\n        return function () {\n            refCount--;\n            innerSub.unsubscribe();\n            if (subscription && refCount === 0 && isComplete) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n}\n;\n//# sourceMappingURL=shareReplay.js.map","\"use strict\";\nvar multicast_1 = require('./multicast');\nvar refCount_1 = require('./refCount');\nvar Subject_1 = require('../Subject');\nfunction shareSubjectFactory() {\n    return new Subject_1.Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return function (source) { return refCount_1.refCount()(multicast_1.multicast(shareSubjectFactory)(source)); };\n}\nexports.share = share;\n;\n//# sourceMappingURL=share.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nfunction sequenceEqual(compareTo, comparor) {\n    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparor)); };\n}\nexports.sequenceEqual = sequenceEqual;\nvar SequenceEqualOperator = (function () {\n    function SequenceEqualOperator(compareTo, comparor) {\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n    }\n    SequenceEqualOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n    };\n    return SequenceEqualOperator;\n}());\nexports.SequenceEqualOperator = SequenceEqualOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SequenceEqualSubscriber = (function (_super) {\n    __extends(SequenceEqualSubscriber, _super);\n    function SequenceEqualSubscriber(destination, compareTo, comparor) {\n        _super.call(this, destination);\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n        this._a = [];\n        this._b = [];\n        this._oneComplete = false;\n        this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n    }\n    SequenceEqualSubscriber.prototype._next = function (value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    };\n    SequenceEqualSubscriber.prototype._complete = function () {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    };\n    SequenceEqualSubscriber.prototype.checkValues = function () {\n        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;\n        while (_a.length > 0 && _b.length > 0) {\n            var a = _a.shift();\n            var b = _b.shift();\n            var areEqual = false;\n            if (comparor) {\n                areEqual = tryCatch_1.tryCatch(comparor)(a, b);\n                if (areEqual === errorObject_1.errorObject) {\n                    this.destination.error(errorObject_1.errorObject.e);\n                }\n            }\n            else {\n                areEqual = a === b;\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    };\n    SequenceEqualSubscriber.prototype.emit = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    SequenceEqualSubscriber.prototype.nextB = function (value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    };\n    return SequenceEqualSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SequenceEqualSubscriber = SequenceEqualSubscriber;\nvar SequenceEqualCompareToSubscriber = (function (_super) {\n    __extends(SequenceEqualCompareToSubscriber, _super);\n    function SequenceEqualCompareToSubscriber(destination, parent) {\n        _super.call(this, destination);\n        this.parent = parent;\n    }\n    SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n        this.parent.nextB(value);\n    };\n    SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n        this.parent.error(err);\n    };\n    SequenceEqualCompareToSubscriber.prototype._complete = function () {\n        this.parent._complete();\n    };\n    return SequenceEqualCompareToSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=sequenceEqual.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nfunction sampleTime(period, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };\n}\nexports.sampleTime = sampleTime;\nvar SampleTimeOperator = (function () {\n    function SampleTimeOperator(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    SampleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    };\n    return SampleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleTimeSubscriber = (function (_super) {\n    __extends(SampleTimeSubscriber, _super);\n    function SampleTimeSubscriber(destination, period, scheduler) {\n        _super.call(this, destination);\n        this.period = period;\n        this.scheduler = scheduler;\n        this.hasValue = false;\n        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));\n    }\n    SampleTimeSubscriber.prototype._next = function (value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    };\n    SampleTimeSubscriber.prototype.notifyNext = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    };\n    return SampleTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNotification(state) {\n    var subscriber = state.subscriber, period = state.period;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n//# sourceMappingURL=sampleTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nfunction sample(notifier) {\n    return function (source) { return source.lift(new SampleOperator(notifier)); };\n}\nexports.sample = sample;\nvar SampleOperator = (function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult_1.subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = (function (_super) {\n    __extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        _super.apply(this, arguments);\n        this.hasValue = false;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=sample.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nfunction retryWhen(notifier) {\n    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };\n}\nexports.retryWhen = retryWhen;\nvar RetryWhenOperator = (function () {\n    function RetryWhenOperator(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    };\n    return RetryWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetryWhenSubscriber = (function (_super) {\n    __extends(RetryWhenSubscriber, _super);\n    function RetryWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var errors = this.errors;\n            var retries = this.retries;\n            var retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject_1.Subject();\n                retries = tryCatch_1.tryCatch(this.notifier)(errors);\n                if (retries === errorObject_1.errorObject) {\n                    return _super.prototype.error.call(this, errorObject_1.errorObject.e);\n                }\n                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n            }\n            else {\n                this.errors = null;\n                this.retriesSubscription = null;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    };\n    RetryWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.errors = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        this._unsubscribeAndRecycle();\n        this.errors = errors;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        this.source.subscribe(this);\n    };\n    return RetryWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=retryWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nfunction retry(count) {\n    if (count === void 0) { count = -1; }\n    return function (source) { return source.lift(new RetryOperator(count, source)); };\n}\nexports.retry = retry;\nvar RetryOperator = (function () {\n    function RetryOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RetryOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    };\n    return RetryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetrySubscriber = (function (_super) {\n    __extends(RetrySubscriber, _super);\n    function RetrySubscriber(destination, count, source) {\n        _super.call(this, destination);\n        this.count = count;\n        this.source = source;\n    }\n    RetrySubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.error.call(this, err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RetrySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=retry.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\n}\nexports.repeatWhen = repeatWhen;\nvar RepeatWhenOperator = (function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatWhenSubscriber = (function (_super) {\n    __extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n        this.sourceIsBeingSubscribedTo = true;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            else if (this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    };\n    RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.notifications = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this.notifications = notifications;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject_1.Subject();\n        var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);\n        if (retries === errorObject_1.errorObject) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=repeatWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nfunction repeat(count) {\n    if (count === void 0) { count = -1; }\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else if (count < 0) {\n            return source.lift(new RepeatOperator(-1, source));\n        }\n        else {\n            return source.lift(new RepeatOperator(count - 1, source));\n        }\n    };\n}\nexports.repeat = repeat;\nvar RepeatOperator = (function () {\n    function RepeatOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RepeatOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n    };\n    return RepeatOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatSubscriber = (function (_super) {\n    __extends(RepeatSubscriber, _super);\n    function RepeatSubscriber(destination, count, source) {\n        _super.call(this, destination);\n        this.count = count;\n        this.source = source;\n    }\n    RepeatSubscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.complete.call(this);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RepeatSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=repeat.js.map","\"use strict\";\nvar isArray_1 = require('../util/isArray');\nvar race_1 = require('../observable/race');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function raceOperatorFunction(source) {\n        // if the only argument is an array, it was most likely called with\n        // `pair([obs1, obs2, ...])`\n        if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n            observables = observables[0];\n        }\n        return source.lift.call(race_1.race.apply(void 0, [source].concat(observables)));\n    };\n}\nexports.race = race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar AsyncSubject_1 = require('../AsyncSubject');\nvar multicast_1 = require('./multicast');\nfunction publishLast() {\n    return function (source) { return multicast_1.multicast(new AsyncSubject_1.AsyncSubject())(source); };\n}\nexports.publishLast = publishLast;\n//# sourceMappingURL=publishLast.js.map","\"use strict\";\nvar ReplaySubject_1 = require('../ReplaySubject');\nvar multicast_1 = require('./multicast');\n/* tslint:enable:max-line-length */\nfunction publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n    if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n        scheduler = selectorOrScheduler;\n    }\n    var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n    var subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n    return function (source) { return multicast_1.multicast(function () { return subject; }, selector)(source); };\n}\nexports.publishReplay = publishReplay;\n//# sourceMappingURL=publishReplay.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\n/**\n * @class BehaviorSubject<T>\n */\nvar BehaviorSubject = (function (_super) {\n    __extends(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        _super.call(this);\n        this._value = _value;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function () {\n            return this.getValue();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BehaviorSubject.prototype._subscribe = function (subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        if (subscription && !subscription.closed) {\n            subscriber.next(this._value);\n        }\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function () {\n        if (this.hasError) {\n            throw this.thrownError;\n        }\n        else if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return this._value;\n        }\n    };\n    BehaviorSubject.prototype.next = function (value) {\n        _super.prototype.next.call(this, this._value = value);\n    };\n    return BehaviorSubject;\n}(Subject_1.Subject));\nexports.BehaviorSubject = BehaviorSubject;\n//# sourceMappingURL=BehaviorSubject.js.map","\"use strict\";\nvar BehaviorSubject_1 = require('../BehaviorSubject');\nvar multicast_1 = require('./multicast');\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nfunction publishBehavior(value) {\n    return function (source) { return multicast_1.multicast(new BehaviorSubject_1.BehaviorSubject(value))(source); };\n}\nexports.publishBehavior = publishBehavior;\n//# sourceMappingURL=publishBehavior.js.map","\"use strict\";\nvar Subject_1 = require('../Subject');\nvar multicast_1 = require('./multicast');\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return selector ?\n        multicast_1.multicast(function () { return new Subject_1.Subject(); }, selector) :\n        multicast_1.multicast(new Subject_1.Subject());\n}\nexports.publish = publish;\n//# sourceMappingURL=publish.js.map","\"use strict\";\nvar map_1 = require('./map');\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nfunction pluck() {\n    var properties = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        properties[_i - 0] = arguments[_i];\n    }\n    var length = properties.length;\n    if (length === 0) {\n        throw new Error('list of properties cannot be empty.');\n    }\n    return function (source) { return map_1.map(plucker(properties, length))(source); };\n}\nexports.pluck = pluck;\nfunction plucker(props, length) {\n    var mapper = function (x) {\n        var currentProp = x;\n        for (var i = 0; i < length; i++) {\n            var p = currentProp[props[i]];\n            if (typeof p !== 'undefined') {\n                currentProp = p;\n            }\n            else {\n                return undefined;\n            }\n        }\n        return currentProp;\n    };\n    return mapper;\n}\n//# sourceMappingURL=pluck.js.map","\"use strict\";\nvar not_1 = require('../util/not');\nvar filter_1 = require('./filter');\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nfunction partition(predicate, thisArg) {\n    return function (source) { return [\n        filter_1.filter(predicate, thisArg)(source),\n        filter_1.filter(not_1.not(predicate, thisArg))(source)\n    ]; };\n}\nexports.partition = partition;\n//# sourceMappingURL=partition.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nfunction pairwise() {\n    return function (source) { return source.lift(new PairwiseOperator()); };\n}\nexports.pairwise = pairwise;\nvar PairwiseOperator = (function () {\n    function PairwiseOperator() {\n    }\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = (function (_super) {\n    __extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasPrev = false;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        }\n        else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=pairwise.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Observable_1 = require('../Observable');\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\nvar refCount_1 = require('../operators/refCount');\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable = (function (_super) {\n    __extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        _super.call(this);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n        this._isComplete = false;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription_1.Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription_1.Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return refCount_1.refCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable_1.Observable));\nexports.ConnectableObservable = ConnectableObservable;\nvar connectableProto = ConnectableObservable.prototype;\nexports.connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = (function (_super) {\n    __extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(Subject_1.SubjectSubscriber));\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map","\"use strict\";\nvar reduce_1 = require('./reduce');\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nfunction min(comparer) {\n    var min = (typeof comparer === 'function')\n        ? function (x, y) { return comparer(x, y) < 0 ? x : y; }\n        : function (x, y) { return x < y ? x : y; };\n    return reduce_1.reduce(min);\n}\nexports.min = min;\n//# sourceMappingURL=min.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nfunction mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };\n}\nexports.mergeScan = mergeScan;\nvar MergeScanOperator = (function () {\n    function MergeScanOperator(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    MergeScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    };\n    return MergeScanOperator;\n}());\nexports.MergeScanOperator = MergeScanOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeScanSubscriber = (function (_super) {\n    __extends(MergeScanSubscriber, _super);\n    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this.acc = acc;\n        this.concurrent = concurrent;\n        this.hasValue = false;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeScanSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var index = this.index++;\n            var ish = tryCatch_1.tryCatch(this.accumulator)(this.acc, value);\n            var destination = this.destination;\n            if (ish === errorObject_1.errorObject) {\n                destination.error(errorObject_1.errorObject.e);\n            }\n            else {\n                this.active++;\n                this._innerSub(ish, value, index);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeScanSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var destination = this.destination;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    };\n    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    return MergeScanSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeScanSubscriber = MergeScanSubscriber;\n//# sourceMappingURL=mergeScan.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n        resultSelector = null;\n    }\n    return function (source) { return source.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent)); };\n}\nexports.mergeMapTo = mergeMapTo;\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nvar MergeMapToOperator = (function () {\n    function MergeMapToOperator(ish, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.ish = ish;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapToOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n    };\n    return MergeMapToOperator;\n}());\nexports.MergeMapToOperator = MergeMapToOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapToSubscriber = (function (_super) {\n    __extends(MergeMapToSubscriber, _super);\n    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.ish = ish;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapToSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var resultSelector = this.resultSelector;\n            var index = this.index++;\n            var ish = this.ish;\n            var destination = this.destination;\n            this.active++;\n            this._innerSub(ish, destination, resultSelector, value, index);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapToSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    MergeMapToSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapToSubscriber = MergeMapToSubscriber;\n//# sourceMappingURL=mergeMapTo.js.map","\"use strict\";\nvar merge_1 = require('../observable/merge');\nvar merge_2 = require('../observable/merge');\nexports.mergeStatic = merge_2.merge;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(merge_1.merge.apply(void 0, [source].concat(observables))); };\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar reduce_1 = require('./reduce');\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nfunction max(comparer) {\n    var max = (typeof comparer === 'function')\n        ? function (x, y) { return comparer(x, y) > 0 ? x : y; }\n        : function (x, y) { return x > y ? x : y; };\n    return reduce_1.reduce(max);\n}\nexports.max = max;\n//# sourceMappingURL=max.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nfunction materialize() {\n    return function materializeOperatorFunction(source) {\n        return source.lift(new MaterializeOperator());\n    };\n}\nexports.materialize = materialize;\nvar MaterializeOperator = (function () {\n    function MaterializeOperator() {\n    }\n    MaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MaterializeSubscriber(subscriber));\n    };\n    return MaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MaterializeSubscriber = (function (_super) {\n    __extends(MaterializeSubscriber, _super);\n    function MaterializeSubscriber(destination) {\n        _super.call(this, destination);\n    }\n    MaterializeSubscriber.prototype._next = function (value) {\n        this.destination.next(Notification_1.Notification.createNext(value));\n    };\n    MaterializeSubscriber.prototype._error = function (err) {\n        var destination = this.destination;\n        destination.next(Notification_1.Notification.createError(err));\n        destination.complete();\n    };\n    MaterializeSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        destination.next(Notification_1.Notification.createComplete());\n        destination.complete();\n    };\n    return MaterializeSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=materialize.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nfunction mapTo(value) {\n    return function (source) { return source.lift(new MapToOperator(value)); };\n}\nexports.mapTo = mapTo;\nvar MapToOperator = (function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapToSubscriber = (function (_super) {\n    __extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        _super.call(this, destination);\n        this.value = value;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=mapTo.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nfunction every(predicate, thisArg) {\n    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };\n}\nexports.every = every;\nvar EveryOperator = (function () {\n    function EveryOperator(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    EveryOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    };\n    return EveryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar EverySubscriber = (function (_super) {\n    __extends(EverySubscriber, _super);\n    function EverySubscriber(destination, predicate, thisArg, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n        this.index = 0;\n        this.thisArg = thisArg || this;\n    }\n    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    };\n    EverySubscriber.prototype._next = function (value) {\n        var result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    };\n    EverySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return EverySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=every.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nfunction last(predicate, resultSelector, defaultValue) {\n    return function (source) { return source.lift(new LastOperator(predicate, resultSelector, defaultValue, source)); };\n}\nexports.last = last;\nvar LastOperator = (function () {\n    function LastOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    LastOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return LastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar LastSubscriber = (function (_super) {\n    __extends(LastSubscriber, _super);\n    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n        this.hasValue = false;\n        this.index = 0;\n        if (typeof defaultValue !== 'undefined') {\n            this.lastValue = defaultValue;\n            this.hasValue = true;\n        }\n    }\n    LastSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            if (this.resultSelector) {\n                this._tryResultSelector(value, index);\n                return;\n            }\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            if (this.resultSelector) {\n                this._tryResultSelector(value, index);\n                return;\n            }\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.lastValue = result;\n        this.hasValue = true;\n    };\n    LastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.hasValue) {\n            destination.next(this.lastValue);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return LastSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=last.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar audit_1 = require('./audit');\nvar timer_1 = require('../observable/timer');\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nfunction auditTime(duration, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return audit_1.audit(function () { return timer_1.timer(duration, scheduler); });\n}\nexports.auditTime = auditTime;\n//# sourceMappingURL=auditTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nfunction isEmpty() {\n    return function (source) { return source.lift(new IsEmptyOperator()); };\n}\nexports.isEmpty = isEmpty;\nvar IsEmptyOperator = (function () {\n    function IsEmptyOperator() {\n    }\n    IsEmptyOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new IsEmptySubscriber(observer));\n    };\n    return IsEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IsEmptySubscriber = (function (_super) {\n    __extends(IsEmptySubscriber, _super);\n    function IsEmptySubscriber(destination) {\n        _super.call(this, destination);\n    }\n    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n        var destination = this.destination;\n        destination.next(isEmpty);\n        destination.complete();\n    };\n    IsEmptySubscriber.prototype._next = function (value) {\n        this.notifyComplete(false);\n    };\n    IsEmptySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return IsEmptySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=isEmpty.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar noop_1 = require('../util/noop');\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nfunction ignoreElements() {\n    return function ignoreElementsOperatorFunction(source) {\n        return source.lift(new IgnoreElementsOperator());\n    };\n}\nexports.ignoreElements = ignoreElements;\nvar IgnoreElementsOperator = (function () {\n    function IgnoreElementsOperator() {\n    }\n    IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n    };\n    return IgnoreElementsOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IgnoreElementsSubscriber = (function (_super) {\n    __extends(IgnoreElementsSubscriber, _super);\n    function IgnoreElementsSubscriber() {\n        _super.apply(this, arguments);\n    }\n    IgnoreElementsSubscriber.prototype._next = function (unused) {\n        noop_1.noop();\n    };\n    return IgnoreElementsSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=ignoreElements.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\nvar Observable_1 = require('../Observable');\nvar Subject_1 = require('../Subject');\nvar Map_1 = require('../util/Map');\nvar FastMap_1 = require('../util/FastMap');\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nfunction groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return function (source) {\n        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n    };\n}\nexports.groupBy = groupBy;\nvar GroupByOperator = (function () {\n    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    GroupByOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    };\n    return GroupByOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupBySubscriber = (function (_super) {\n    __extends(GroupBySubscriber, _super);\n    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n        this.groups = null;\n        this.attemptedToUnsubscribe = false;\n        this.count = 0;\n    }\n    GroupBySubscriber.prototype._next = function (value) {\n        var key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    };\n    GroupBySubscriber.prototype._group = function (value, key) {\n        var groups = this.groups;\n        if (!groups) {\n            groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new Map_1.Map();\n        }\n        var group = groups.get(key);\n        var element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = this.subjectSelector ? this.subjectSelector() : new Subject_1.Subject();\n            groups.set(key, group);\n            var groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                var duration = void 0;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    };\n    GroupBySubscriber.prototype._error = function (err) {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    };\n    GroupBySubscriber.prototype._complete = function () {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    };\n    GroupBySubscriber.prototype.removeGroup = function (key) {\n        this.groups.delete(key);\n    };\n    GroupBySubscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                _super.prototype.unsubscribe.call(this);\n            }\n        }\n    };\n    return GroupBySubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupDurationSubscriber = (function (_super) {\n    __extends(GroupDurationSubscriber, _super);\n    function GroupDurationSubscriber(key, group, parent) {\n        _super.call(this, group);\n        this.key = key;\n        this.group = group;\n        this.parent = parent;\n    }\n    GroupDurationSubscriber.prototype._next = function (value) {\n        this.complete();\n    };\n    GroupDurationSubscriber.prototype._unsubscribe = function () {\n        var _a = this, parent = _a.parent, key = _a.key;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    };\n    return GroupDurationSubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nvar GroupedObservable = (function (_super) {\n    __extends(GroupedObservable, _super);\n    function GroupedObservable(key, groupSubject, refCountSubscription) {\n        _super.call(this);\n        this.key = key;\n        this.groupSubject = groupSubject;\n        this.refCountSubscription = refCountSubscription;\n    }\n    GroupedObservable.prototype._subscribe = function (subscriber) {\n        var subscription = new Subscription_1.Subscription();\n        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    };\n    return GroupedObservable;\n}(Observable_1.Observable));\nexports.GroupedObservable = GroupedObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerRefCountSubscription = (function (_super) {\n    __extends(InnerRefCountSubscription, _super);\n    function InnerRefCountSubscription(parent) {\n        _super.call(this);\n        this.parent = parent;\n        parent.count++;\n    }\n    InnerRefCountSubscription.prototype.unsubscribe = function () {\n        var parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            _super.prototype.unsubscribe.call(this);\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    };\n    return InnerRefCountSubscription;\n}(Subscription_1.Subscription));\n//# sourceMappingURL=groupBy.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nfunction first(predicate, resultSelector, defaultValue) {\n    return function (source) { return source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source)); };\n}\nexports.first = first;\nvar FirstOperator = (function () {\n    function FirstOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    FirstOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return FirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FirstSubscriber = (function (_super) {\n    __extends(FirstSubscriber, _super);\n    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n        this.index = 0;\n        this.hasCompleted = false;\n        this._emitted = false;\n    }\n    FirstSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._emit = function (value, index) {\n        if (this.resultSelector) {\n            this._tryResultSelector(value, index);\n            return;\n        }\n        this._emitFinal(value);\n    };\n    FirstSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this._emitFinal(result);\n    };\n    FirstSubscriber.prototype._emitFinal = function (value) {\n        var destination = this.destination;\n        if (!this._emitted) {\n            this._emitted = true;\n            destination.next(value);\n            destination.complete();\n            this.hasCompleted = true;\n        }\n    };\n    FirstSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n            destination.next(this.defaultValue);\n            destination.complete();\n        }\n        else if (!this.hasCompleted) {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return FirstSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar find_1 = require('../operators/find');\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nfunction findIndex(predicate, thisArg) {\n    return function (source) { return source.lift(new find_1.FindValueOperator(predicate, source, true, thisArg)); };\n}\nexports.findIndex = findIndex;\n//# sourceMappingURL=findIndex.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nfunction finalize(callback) {\n    return function (source) { return source.lift(new FinallyOperator(callback)); };\n}\nexports.finalize = finalize;\nvar FinallyOperator = (function () {\n    function FinallyOperator(callback) {\n        this.callback = callback;\n    }\n    FinallyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n    };\n    return FinallyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FinallySubscriber = (function (_super) {\n    __extends(FinallySubscriber, _super);\n    function FinallySubscriber(destination, callback) {\n        _super.call(this, destination);\n        this.add(new Subscription_1.Subscription(callback));\n    }\n    return FinallySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=finalize.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nfunction elementAt(index, defaultValue) {\n    return function (source) { return source.lift(new ElementAtOperator(index, defaultValue)); };\n}\nexports.elementAt = elementAt;\nvar ElementAtOperator = (function () {\n    function ElementAtOperator(index, defaultValue) {\n        this.index = index;\n        this.defaultValue = defaultValue;\n        if (index < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    ElementAtOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n    };\n    return ElementAtOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ElementAtSubscriber = (function (_super) {\n    __extends(ElementAtSubscriber, _super);\n    function ElementAtSubscriber(destination, index, defaultValue) {\n        _super.call(this, destination);\n        this.index = index;\n        this.defaultValue = defaultValue;\n    }\n    ElementAtSubscriber.prototype._next = function (x) {\n        if (this.index-- === 0) {\n            this.destination.next(x);\n            this.destination.complete();\n        }\n    };\n    ElementAtSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index >= 0) {\n            if (typeof this.defaultValue !== 'undefined') {\n                destination.next(this.defaultValue);\n            }\n            else {\n                destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError);\n            }\n        }\n        destination.complete();\n    };\n    return ElementAtSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=elementAt.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nfunction expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (scheduler === void 0) { scheduler = undefined; }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };\n}\nexports.expand = expand;\nvar ExpandOperator = (function () {\n    function ExpandOperator(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    ExpandOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    };\n    return ExpandOperator;\n}());\nexports.ExpandOperator = ExpandOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ExpandSubscriber = (function (_super) {\n    __extends(ExpandSubscriber, _super);\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n        _super.call(this, destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n        this.index = 0;\n        this.active = 0;\n        this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            this.buffer = [];\n        }\n    }\n    ExpandSubscriber.dispatch = function (arg) {\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n        subscriber.subscribeToProjection(result, value, index);\n    };\n    ExpandSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        var index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            var result = tryCatch_1.tryCatch(this.project)(value, index);\n            if (result === errorObject_1.errorObject) {\n                destination.error(errorObject_1.errorObject.e);\n            }\n            else if (!this.scheduler) {\n                this.subscribeToProjection(result, value, index);\n            }\n            else {\n                var state = { subscriber: this, result: result, value: value, index: index };\n                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n        this.active++;\n        this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n    };\n    ExpandSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._next(innerValue);\n    };\n    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    return ExpandSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.ExpandSubscriber = ExpandSubscriber;\n//# sourceMappingURL=expand.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nfunction exhaustMap(project, resultSelector) {\n    return function (source) { return source.lift(new SwitchFirstMapOperator(project, resultSelector)); };\n}\nexports.exhaustMap = exhaustMap;\nvar SwitchFirstMapOperator = (function () {\n    function SwitchFirstMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchFirstMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchFirstMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstMapSubscriber = (function (_super) {\n    __extends(SwitchFirstMapSubscriber, _super);\n    function SwitchFirstMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.hasSubscription = false;\n        this.hasCompleted = false;\n        this.index = 0;\n    }\n    SwitchFirstMapSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.tryNext(value);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.tryNext = function (value) {\n        var index = this.index++;\n        var destination = this.destination;\n        try {\n            var result = this.project(value, index);\n            this.hasSubscription = true;\n            this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        try {\n            var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n            destination.next(result);\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=exhaustMap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nfunction exhaust() {\n    return function (source) { return source.lift(new SwitchFirstOperator()); };\n}\nexports.exhaust = exhaust;\nvar SwitchFirstOperator = (function () {\n    function SwitchFirstOperator() {\n    }\n    SwitchFirstOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstSubscriber(subscriber));\n    };\n    return SwitchFirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstSubscriber = (function (_super) {\n    __extends(SwitchFirstSubscriber, _super);\n    function SwitchFirstSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasCompleted = false;\n        this.hasSubscription = false;\n    }\n    SwitchFirstSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.hasSubscription = true;\n            this.add(subscribeToResult_1.subscribeToResult(this, value));\n        }\n    };\n    SwitchFirstSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=exhaust.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nfunction tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nexports.tap = tap;\nvar DoOperator = (function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DoSubscriber = (function (_super) {\n    __extends(DoSubscriber, _super);\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\n        _super.call(this, destination);\n        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n        safeSubscriber.syncErrorThrowable = true;\n        this.add(safeSubscriber);\n        this.safeSubscriber = safeSubscriber;\n    }\n    DoSubscriber.prototype._next = function (value) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.next(value);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.next(value);\n        }\n    };\n    DoSubscriber.prototype._error = function (err) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.error(err);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.error(err);\n        }\n    };\n    DoSubscriber.prototype._complete = function () {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.complete();\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return DoSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=tap.js.map","\"use strict\";\nvar distinctUntilChanged_1 = require('./distinctUntilChanged');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nfunction distinctUntilKeyChanged(key, compare) {\n    return distinctUntilChanged_1.distinctUntilChanged(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });\n}\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged;\n//# sourceMappingURL=distinctUntilKeyChanged.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar Set_1 = require('../util/Set');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nfunction distinct(keySelector, flushes) {\n    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };\n}\nexports.distinct = distinct;\nvar DistinctOperator = (function () {\n    function DistinctOperator(keySelector, flushes) {\n        this.keySelector = keySelector;\n        this.flushes = flushes;\n    }\n    DistinctOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    };\n    return DistinctOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctSubscriber = (function (_super) {\n    __extends(DistinctSubscriber, _super);\n    function DistinctSubscriber(destination, keySelector, flushes) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.values = new Set_1.Set();\n        if (flushes) {\n            this.add(subscribeToResult_1.subscribeToResult(this, flushes));\n        }\n    }\n    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values.clear();\n    };\n    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DistinctSubscriber.prototype._next = function (value) {\n        if (this.keySelector) {\n            this._useKeySelector(value);\n        }\n        else {\n            this._finalizeNext(value, value);\n        }\n    };\n    DistinctSubscriber.prototype._useKeySelector = function (value) {\n        var key;\n        var destination = this.destination;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this._finalizeNext(key, value);\n    };\n    DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n        var values = this.values;\n        if (!values.has(key)) {\n            values.add(key);\n            this.destination.next(value);\n        }\n    };\n    return DistinctSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.DistinctSubscriber = DistinctSubscriber;\n//# sourceMappingURL=distinct.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Observable_1 = require('../Observable');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return function (source) {\n            return new SubscriptionDelayObservable(source, subscriptionDelay)\n                .lift(new DelayWhenOperator(delayDurationSelector));\n        };\n    }\n    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };\n}\nexports.delayWhen = delayWhen;\nvar DelayWhenOperator = (function () {\n    function DelayWhenOperator(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    DelayWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    };\n    return DelayWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelayWhenSubscriber = (function (_super) {\n    __extends(DelayWhenSubscriber, _super);\n    function DelayWhenSubscriber(destination, delayDurationSelector) {\n        _super.call(this, destination);\n        this.delayDurationSelector = delayDurationSelector;\n        this.completed = false;\n        this.delayNotifierSubscriptions = [];\n        this.values = [];\n    }\n    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        var value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype._next = function (value) {\n        try {\n            var delayNotifier = this.delayDurationSelector(value);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DelayWhenSubscriber.prototype._complete = function () {\n        this.completed = true;\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n        subscription.unsubscribe();\n        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        var value = null;\n        if (subscriptionIdx !== -1) {\n            value = this.values[subscriptionIdx];\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n            this.values.splice(subscriptionIdx, 1);\n        }\n        return value;\n    };\n    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n        var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            this.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n        this.values.push(value);\n    };\n    DelayWhenSubscriber.prototype.tryComplete = function () {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    };\n    return DelayWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelayObservable = (function (_super) {\n    __extends(SubscriptionDelayObservable, _super);\n    function SubscriptionDelayObservable(source, subscriptionDelay) {\n        _super.call(this);\n        this.source = source;\n        this.subscriptionDelay = subscriptionDelay;\n    }\n    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    };\n    return SubscriptionDelayObservable;\n}(Observable_1.Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelaySubscriber = (function (_super) {\n    __extends(SubscriptionDelaySubscriber, _super);\n    function SubscriptionDelaySubscriber(parent, source) {\n        _super.call(this);\n        this.parent = parent;\n        this.source = source;\n        this.sourceSubscribed = false;\n    }\n    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype._error = function (err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    };\n    SubscriptionDelaySubscriber.prototype._complete = function () {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    };\n    return SubscriptionDelaySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=delayWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nfunction delay(delay, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    var absoluteDelay = isDate_1.isDate(delay);\n    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };\n}\nexports.delay = delay;\nvar DelayOperator = (function () {\n    function DelayOperator(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    DelayOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    };\n    return DelayOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelaySubscriber = (function (_super) {\n    __extends(DelaySubscriber, _super);\n    function DelaySubscriber(destination, delay, scheduler) {\n        _super.call(this, destination);\n        this.delay = delay;\n        this.scheduler = scheduler;\n        this.queue = [];\n        this.active = false;\n        this.errored = false;\n    }\n    DelaySubscriber.dispatch = function (state) {\n        var source = state.source;\n        var queue = source.queue;\n        var scheduler = state.scheduler;\n        var destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay_1);\n        }\n        else {\n            source.active = false;\n        }\n    };\n    DelaySubscriber.prototype._schedule = function (scheduler) {\n        this.active = true;\n        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    };\n    DelaySubscriber.prototype.scheduleNotification = function (notification) {\n        if (this.errored === true) {\n            return;\n        }\n        var scheduler = this.scheduler;\n        var message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    };\n    DelaySubscriber.prototype._next = function (value) {\n        this.scheduleNotification(Notification_1.Notification.createNext(value));\n    };\n    DelaySubscriber.prototype._error = function (err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n    };\n    DelaySubscriber.prototype._complete = function () {\n        this.scheduleNotification(Notification_1.Notification.createComplete());\n    };\n    return DelaySubscriber;\n}(Subscriber_1.Subscriber));\nvar DelayMessage = (function () {\n    function DelayMessage(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n    return DelayMessage;\n}());\n//# sourceMappingURL=delay.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nfunction debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };\n}\nexports.debounceTime = debounceTime;\nvar DebounceTimeOperator = (function () {\n    function DebounceTimeOperator(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    };\n    return DebounceTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceTimeSubscriber = (function (_super) {\n    __extends(DebounceTimeSubscriber, _super);\n    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n        _super.call(this, destination);\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n        this.debouncedSubscription = null;\n        this.lastValue = null;\n        this.hasValue = false;\n    }\n    DebounceTimeSubscriber.prototype._next = function (value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    };\n    DebounceTimeSubscriber.prototype._complete = function () {\n        this.debouncedNext();\n        this.destination.complete();\n    };\n    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n        this.clearDebounce();\n        if (this.hasValue) {\n            this.destination.next(this.lastValue);\n            this.lastValue = null;\n            this.hasValue = false;\n        }\n    };\n    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n        var debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    };\n    return DebounceTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n//# sourceMappingURL=debounceTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nfunction debounce(durationSelector) {\n    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };\n}\nexports.debounce = debounce;\nvar DebounceOperator = (function () {\n    function DebounceOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    DebounceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n    };\n    return DebounceOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceSubscriber = (function (_super) {\n    __extends(DebounceSubscriber, _super);\n    function DebounceSubscriber(destination, durationSelector) {\n        _super.call(this, destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n        this.durationSubscription = null;\n    }\n    DebounceSubscriber.prototype._next = function (value) {\n        try {\n            var result = this.durationSelector.call(this, value);\n            if (result) {\n                this._tryNext(value, result);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DebounceSubscriber.prototype._complete = function () {\n        this.emitValue();\n        this.destination.complete();\n    };\n    DebounceSubscriber.prototype._tryNext = function (value, duration) {\n        var subscription = this.durationSubscription;\n        this.value = value;\n        this.hasValue = true;\n        if (subscription) {\n            subscription.unsubscribe();\n            this.remove(subscription);\n        }\n        subscription = subscribeToResult_1.subscribeToResult(this, duration);\n        if (!subscription.closed) {\n            this.add(this.durationSubscription = subscription);\n        }\n    };\n    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            var value = this.value;\n            var subscription = this.durationSubscription;\n            if (subscription) {\n                this.durationSubscription = null;\n                subscription.unsubscribe();\n                this.remove(subscription);\n            }\n            this.value = null;\n            this.hasValue = false;\n            _super.prototype._next.call(this, value);\n        }\n    };\n    return DebounceSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=debounce.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nfunction dematerialize() {\n    return function dematerializeOperatorFunction(source) {\n        return source.lift(new DeMaterializeOperator());\n    };\n}\nexports.dematerialize = dematerialize;\nvar DeMaterializeOperator = (function () {\n    function DeMaterializeOperator() {\n    }\n    DeMaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DeMaterializeSubscriber(subscriber));\n    };\n    return DeMaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DeMaterializeSubscriber = (function (_super) {\n    __extends(DeMaterializeSubscriber, _super);\n    function DeMaterializeSubscriber(destination) {\n        _super.call(this, destination);\n    }\n    DeMaterializeSubscriber.prototype._next = function (value) {\n        value.observe(this.destination);\n    };\n    return DeMaterializeSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=dematerialize.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nfunction count(predicate) {\n    return function (source) { return source.lift(new CountOperator(predicate, source)); };\n}\nexports.count = count;\nvar CountOperator = (function () {\n    function CountOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    CountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    };\n    return CountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CountSubscriber = (function (_super) {\n    __extends(CountSubscriber, _super);\n    function CountSubscriber(destination, predicate, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.count = 0;\n        this.index = 0;\n    }\n    CountSubscriber.prototype._next = function (value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._tryPredicate = function (value) {\n        var result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._complete = function () {\n        this.destination.next(this.count);\n        this.destination.complete();\n    };\n    return CountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=count.js.map","\"use strict\";\nvar concatMap_1 = require('./concatMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nfunction concatMapTo(innerObservable, resultSelector) {\n    return concatMap_1.concatMap(function () { return innerObservable; }, resultSelector);\n}\nexports.concatMapTo = concatMapTo;\n//# sourceMappingURL=concatMapTo.js.map","\"use strict\";\nvar concat_1 = require('../observable/concat');\nvar concat_2 = require('../observable/concat');\nexports.concatStatic = concat_2.concat;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(concat_1.concat.apply(void 0, [source].concat(observables))); };\n}\nexports.concat = concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar combineLatest_1 = require('../operators/combineLatest');\nfunction combineAll(project) {\n    return function (source) { return source.lift(new combineLatest_1.CombineLatestOperator(project)); };\n}\nexports.combineAll = combineAll;\n//# sourceMappingURL=combineAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nfunction catchError(selector) {\n    return function catchErrorOperatorFunction(source) {\n        var operator = new CatchOperator(selector);\n        var caught = source.lift(operator);\n        return (operator.caught = caught);\n    };\n}\nexports.catchError = catchError;\nvar CatchOperator = (function () {\n    function CatchOperator(selector) {\n        this.selector = selector;\n    }\n    CatchOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n    };\n    return CatchOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CatchSubscriber = (function (_super) {\n    __extends(CatchSubscriber, _super);\n    function CatchSubscriber(destination, selector, caught) {\n        _super.call(this, destination);\n        this.selector = selector;\n        this.caught = caught;\n    }\n    // NOTE: overriding `error` instead of `_error` because we don't want\n    // to have this flag this subscriber as `isStopped`. We can mimic the\n    // behavior of the RetrySubscriber (from the `retry` operator), where\n    // we unsubscribe from our source chain, reset our Subscriber flags,\n    // then subscribe to the selector result.\n    CatchSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var result = void 0;\n            try {\n                result = this.selector(err, this.caught);\n            }\n            catch (err2) {\n                _super.prototype.error.call(this, err2);\n                return;\n            }\n            this._unsubscribeAndRecycle();\n            this.add(subscribeToResult_1.subscribeToResult(this, result));\n        }\n    };\n    return CatchSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=catchError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nfunction bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nexports.bufferWhen = bufferWhen;\nvar BufferWhenOperator = (function () {\n    function BufferWhenOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    BufferWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    };\n    return BufferWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferWhenSubscriber = (function (_super) {\n    __extends(BufferWhenSubscriber, _super);\n    function BufferWhenSubscriber(destination, closingSelector) {\n        _super.call(this, destination);\n        this.closingSelector = closingSelector;\n        this.subscribing = false;\n        this.openBuffer();\n    }\n    BufferWhenSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferWhenSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    BufferWhenSubscriber.prototype._unsubscribe = function () {\n        this.buffer = null;\n        this.subscribing = false;\n    };\n    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openBuffer();\n    };\n    BufferWhenSubscriber.prototype.notifyComplete = function () {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    };\n    BufferWhenSubscriber.prototype.openBuffer = function () {\n        var closingSubscription = this.closingSubscription;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        var buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject_1.errorObject) {\n            this.error(errorObject_1.errorObject.e);\n        }\n        else {\n            closingSubscription = new Subscription_1.Subscription();\n            this.closingSubscription = closingSubscription;\n            this.add(closingSubscription);\n            this.subscribing = true;\n            closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n            this.subscribing = false;\n        }\n    };\n    return BufferWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=bufferWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nfunction bufferToggle(openings, closingSelector) {\n    return function bufferToggleOperatorFunction(source) {\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\n    };\n}\nexports.bufferToggle = bufferToggle;\nvar BufferToggleOperator = (function () {\n    function BufferToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    BufferToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return BufferToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferToggleSubscriber = (function (_super) {\n    __extends(BufferToggleSubscriber, _super);\n    function BufferToggleSubscriber(destination, openings, closingSelector) {\n        _super.call(this, destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(subscribeToResult_1.subscribeToResult(this, openings));\n    }\n    BufferToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        for (var i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    };\n    BufferToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._error.call(this, err);\n    };\n    BufferToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            this.destination.next(context.buffer);\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._complete.call(this);\n    };\n    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    };\n    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.closeBuffer(innerSub.context);\n    };\n    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n        try {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n        var contexts = this.contexts;\n        if (contexts && context) {\n            var buffer = context.buffer, subscription = context.subscription;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    };\n    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n        var contexts = this.contexts;\n        var buffer = [];\n        var subscription = new Subscription_1.Subscription();\n        var context = { buffer: buffer, subscription: subscription };\n        contexts.push(context);\n        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    };\n    return BufferToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=bufferToggle.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar Subscriber_1 = require('../Subscriber');\nvar isScheduler_1 = require('../util/isScheduler');\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nfunction bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async_1.async;\n    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return function bufferTimeOperatorFunction(source) {\n        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n    };\n}\nexports.bufferTime = bufferTime;\nvar BufferTimeOperator = (function () {\n    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n    }\n    BufferTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    };\n    return BufferTimeOperator;\n}());\nvar Context = (function () {\n    function Context() {\n        this.buffer = [];\n    }\n    return Context;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferTimeSubscriber = (function (_super) {\n    __extends(BufferTimeSubscriber, _super);\n    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        _super.call(this, destination);\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n        this.contexts = [];\n        var context = this.openContext();\n        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n        if (this.timespanOnly) {\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n        else {\n            var closeState = { subscriber: this, context: context };\n            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n        }\n    }\n    BufferTimeSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        var filledBufferContext;\n        for (var i = 0; i < len; i++) {\n            var context = contexts[i];\n            var buffer = context.buffer;\n            buffer.push(value);\n            if (buffer.length == this.maxBufferSize) {\n                filledBufferContext = context;\n            }\n        }\n        if (filledBufferContext) {\n            this.onBufferFull(filledBufferContext);\n        }\n    };\n    BufferTimeSubscriber.prototype._error = function (err) {\n        this.contexts.length = 0;\n        _super.prototype._error.call(this, err);\n    };\n    BufferTimeSubscriber.prototype._complete = function () {\n        var _a = this, contexts = _a.contexts, destination = _a.destination;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            destination.next(context.buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    BufferTimeSubscriber.prototype._unsubscribe = function () {\n        this.contexts = null;\n    };\n    BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n        this.closeContext(context);\n        var closeAction = context.closeAction;\n        closeAction.unsubscribe();\n        this.remove(closeAction);\n        if (!this.closed && this.timespanOnly) {\n            context = this.openContext();\n            var bufferTimeSpan = this.bufferTimeSpan;\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n    };\n    BufferTimeSubscriber.prototype.openContext = function () {\n        var context = new Context();\n        this.contexts.push(context);\n        return context;\n    };\n    BufferTimeSubscriber.prototype.closeContext = function (context) {\n        this.destination.next(context.buffer);\n        var contexts = this.contexts;\n        var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n        if (spliceIndex >= 0) {\n            contexts.splice(contexts.indexOf(context), 1);\n        }\n    };\n    return BufferTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchBufferTimeSpanOnly(state) {\n    var subscriber = state.subscriber;\n    var prevContext = state.context;\n    if (prevContext) {\n        subscriber.closeContext(prevContext);\n    }\n    if (!subscriber.closed) {\n        state.context = subscriber.openContext();\n        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n    }\n}\nfunction dispatchBufferCreation(state) {\n    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;\n    var context = subscriber.openContext();\n    var action = this;\n    if (!subscriber.closed) {\n        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));\n        action.schedule(state, bufferCreationInterval);\n    }\n}\nfunction dispatchBufferClose(arg) {\n    var subscriber = arg.subscriber, context = arg.context;\n    subscriber.closeContext(context);\n}\n//# sourceMappingURL=bufferTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nfunction bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) { startBufferEvery = null; }\n    return function bufferCountOperatorFunction(source) {\n        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n    };\n}\nexports.bufferCount = bufferCount;\nvar BufferCountOperator = (function () {\n    function BufferCountOperator(bufferSize, startBufferEvery) {\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        if (!startBufferEvery || bufferSize === startBufferEvery) {\n            this.subscriberClass = BufferCountSubscriber;\n        }\n        else {\n            this.subscriberClass = BufferSkipCountSubscriber;\n        }\n    }\n    BufferCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n    };\n    return BufferCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferCountSubscriber = (function (_super) {\n    __extends(BufferCountSubscriber, _super);\n    function BufferCountSubscriber(destination, bufferSize) {\n        _super.call(this, destination);\n        this.bufferSize = bufferSize;\n        this.buffer = [];\n    }\n    BufferCountSubscriber.prototype._next = function (value) {\n        var buffer = this.buffer;\n        buffer.push(value);\n        if (buffer.length == this.bufferSize) {\n            this.destination.next(buffer);\n            this.buffer = [];\n        }\n    };\n    BufferCountSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer.length > 0) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferCountSubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSkipCountSubscriber = (function (_super) {\n    __extends(BufferSkipCountSubscriber, _super);\n    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {\n        _super.call(this, destination);\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        this.buffers = [];\n        this.count = 0;\n    }\n    BufferSkipCountSubscriber.prototype._next = function (value) {\n        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;\n        this.count++;\n        if (count % startBufferEvery === 0) {\n            buffers.push([]);\n        }\n        for (var i = buffers.length; i--;) {\n            var buffer = buffers[i];\n            buffer.push(value);\n            if (buffer.length === bufferSize) {\n                buffers.splice(i, 1);\n                this.destination.next(buffer);\n            }\n        }\n    };\n    BufferSkipCountSubscriber.prototype._complete = function () {\n        var _a = this, buffers = _a.buffers, destination = _a.destination;\n        while (buffers.length > 0) {\n            var buffer = buffers.shift();\n            if (buffer.length > 0) {\n                destination.next(buffer);\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferSkipCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=bufferCount.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nfunction buffer(closingNotifier) {\n    return function bufferOperatorFunction(source) {\n        return source.lift(new BufferOperator(closingNotifier));\n    };\n}\nexports.buffer = buffer;\nvar BufferOperator = (function () {\n    function BufferOperator(closingNotifier) {\n        this.closingNotifier = closingNotifier;\n    }\n    BufferOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n    };\n    return BufferOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSubscriber = (function (_super) {\n    __extends(BufferSubscriber, _super);\n    function BufferSubscriber(destination, closingNotifier) {\n        _super.call(this, destination);\n        this.buffer = [];\n        this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n    }\n    BufferSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var buffer = this.buffer;\n        this.buffer = [];\n        this.destination.next(buffer);\n    };\n    return BufferSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=buffer.js.map","\"use strict\";\nvar QueueAction_1 = require('./QueueAction');\nvar QueueScheduler_1 = require('./QueueScheduler');\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nexports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);\n//# sourceMappingURL=queue.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../../util/root');\nvar tryCatch_1 = require('../../util/tryCatch');\nvar errorObject_1 = require('../../util/errorObject');\nvar Observable_1 = require('../../Observable');\nvar Subscriber_1 = require('../../Subscriber');\nvar map_1 = require('../../operators/map');\nfunction getCORSRequest() {\n    if (root_1.root.XMLHttpRequest) {\n        return new root_1.root.XMLHttpRequest();\n    }\n    else if (!!root_1.root.XDomainRequest) {\n        return new root_1.root.XDomainRequest();\n    }\n    else {\n        throw new Error('CORS is not supported by your browser');\n    }\n}\nfunction getXMLHttpRequest() {\n    if (root_1.root.XMLHttpRequest) {\n        return new root_1.root.XMLHttpRequest();\n    }\n    else {\n        var progId = void 0;\n        try {\n            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n            for (var i = 0; i < 3; i++) {\n                try {\n                    progId = progIds[i];\n                    if (new root_1.root.ActiveXObject(progId)) {\n                        break;\n                    }\n                }\n                catch (e) {\n                }\n            }\n            return new root_1.root.ActiveXObject(progId);\n        }\n        catch (e) {\n            throw new Error('XMLHttpRequest is not supported by your browser');\n        }\n    }\n}\nfunction ajaxGet(url, headers) {\n    if (headers === void 0) { headers = null; }\n    return new AjaxObservable({ method: 'GET', url: url, headers: headers });\n}\nexports.ajaxGet = ajaxGet;\n;\nfunction ajaxPost(url, body, headers) {\n    return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });\n}\nexports.ajaxPost = ajaxPost;\n;\nfunction ajaxDelete(url, headers) {\n    return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });\n}\nexports.ajaxDelete = ajaxDelete;\n;\nfunction ajaxPut(url, body, headers) {\n    return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });\n}\nexports.ajaxPut = ajaxPut;\n;\nfunction ajaxPatch(url, body, headers) {\n    return new AjaxObservable({ method: 'PATCH', url: url, body: body, headers: headers });\n}\nexports.ajaxPatch = ajaxPatch;\n;\nvar mapResponse = map_1.map(function (x, index) { return x.response; });\nfunction ajaxGetJSON(url, headers) {\n    return mapResponse(new AjaxObservable({\n        method: 'GET',\n        url: url,\n        responseType: 'json',\n        headers: headers\n    }));\n}\nexports.ajaxGetJSON = ajaxGetJSON;\n;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar AjaxObservable = (function (_super) {\n    __extends(AjaxObservable, _super);\n    function AjaxObservable(urlOrRequest) {\n        _super.call(this);\n        var request = {\n            async: true,\n            createXHR: function () {\n                return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n            },\n            crossDomain: false,\n            withCredentials: false,\n            headers: {},\n            method: 'GET',\n            responseType: 'json',\n            timeout: 0\n        };\n        if (typeof urlOrRequest === 'string') {\n            request.url = urlOrRequest;\n        }\n        else {\n            for (var prop in urlOrRequest) {\n                if (urlOrRequest.hasOwnProperty(prop)) {\n                    request[prop] = urlOrRequest[prop];\n                }\n            }\n        }\n        this.request = request;\n    }\n    AjaxObservable.prototype._subscribe = function (subscriber) {\n        return new AjaxSubscriber(subscriber, this.request);\n    };\n    /**\n     * Creates an observable for an Ajax request with either a request object with\n     * url, headers, etc or a string for a URL.\n     *\n     * @example\n     * source = Rx.Observable.ajax('/products');\n     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n     *\n     * @param {string|Object} request Can be one of the following:\n     *   A string of the URL to make the Ajax call.\n     *   An object with the following properties\n     *   - url: URL of the request\n     *   - body: The body of the request\n     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n     *   - async: Whether the request is async\n     *   - headers: Optional headers\n     *   - crossDomain: true if a cross domain request, else false\n     *   - createXHR: a function to override if you need to use an alternate\n     *   XMLHttpRequest implementation.\n     *   - resultSelector: a function to use to alter the output value type of\n     *   the Observable. Gets {@link AjaxResponse} as an argument.\n     * @return {Observable} An observable sequence containing the XMLHttpRequest.\n     * @static true\n     * @name ajax\n     * @owner Observable\n    */\n    AjaxObservable.create = (function () {\n        var create = function (urlOrRequest) {\n            return new AjaxObservable(urlOrRequest);\n        };\n        create.get = ajaxGet;\n        create.post = ajaxPost;\n        create.delete = ajaxDelete;\n        create.put = ajaxPut;\n        create.patch = ajaxPatch;\n        create.getJSON = ajaxGetJSON;\n        return create;\n    })();\n    return AjaxObservable;\n}(Observable_1.Observable));\nexports.AjaxObservable = AjaxObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AjaxSubscriber = (function (_super) {\n    __extends(AjaxSubscriber, _super);\n    function AjaxSubscriber(destination, request) {\n        _super.call(this, destination);\n        this.request = request;\n        this.done = false;\n        var headers = request.headers = request.headers || {};\n        // force CORS if requested\n        if (!request.crossDomain && !headers['X-Requested-With']) {\n            headers['X-Requested-With'] = 'XMLHttpRequest';\n        }\n        // ensure content type is set\n        if (!('Content-Type' in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData) && typeof request.body !== 'undefined') {\n            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n        }\n        // properly serialize body\n        request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n        this.send();\n    }\n    AjaxSubscriber.prototype.next = function (e) {\n        this.done = true;\n        var _a = this, xhr = _a.xhr, request = _a.request, destination = _a.destination;\n        var response = new AjaxResponse(e, xhr, request);\n        destination.next(response);\n    };\n    AjaxSubscriber.prototype.send = function () {\n        var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;\n        var createXHR = request.createXHR;\n        var xhr = tryCatch_1.tryCatch(createXHR).call(request);\n        if (xhr === errorObject_1.errorObject) {\n            this.error(errorObject_1.errorObject.e);\n        }\n        else {\n            this.xhr = xhr;\n            // set up the events before open XHR\n            // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n            // You need to add the event listeners before calling open() on the request.\n            // Otherwise the progress events will not fire.\n            this.setupEvents(xhr, request);\n            // open XHR\n            var result = void 0;\n            if (user) {\n                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n            }\n            else {\n                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);\n            }\n            if (result === errorObject_1.errorObject) {\n                this.error(errorObject_1.errorObject.e);\n                return null;\n            }\n            // timeout, responseType and withCredentials can be set once the XHR is open\n            if (async) {\n                xhr.timeout = request.timeout;\n                xhr.responseType = request.responseType;\n            }\n            if ('withCredentials' in xhr) {\n                xhr.withCredentials = !!request.withCredentials;\n            }\n            // set headers\n            this.setHeaders(xhr, headers);\n            // finally send the request\n            result = body ? tryCatch_1.tryCatch(xhr.send).call(xhr, body) : tryCatch_1.tryCatch(xhr.send).call(xhr);\n            if (result === errorObject_1.errorObject) {\n                this.error(errorObject_1.errorObject.e);\n                return null;\n            }\n        }\n        return xhr;\n    };\n    AjaxSubscriber.prototype.serializeBody = function (body, contentType) {\n        if (!body || typeof body === 'string') {\n            return body;\n        }\n        else if (root_1.root.FormData && body instanceof root_1.root.FormData) {\n            return body;\n        }\n        if (contentType) {\n            var splitIndex = contentType.indexOf(';');\n            if (splitIndex !== -1) {\n                contentType = contentType.substring(0, splitIndex);\n            }\n        }\n        switch (contentType) {\n            case 'application/x-www-form-urlencoded':\n                return Object.keys(body).map(function (key) { return (encodeURI(key) + \"=\" + encodeURI(body[key])); }).join('&');\n            case 'application/json':\n                return JSON.stringify(body);\n            default:\n                return body;\n        }\n    };\n    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {\n        for (var key in headers) {\n            if (headers.hasOwnProperty(key)) {\n                xhr.setRequestHeader(key, headers[key]);\n            }\n        }\n    };\n    AjaxSubscriber.prototype.setupEvents = function (xhr, request) {\n        var progressSubscriber = request.progressSubscriber;\n        function xhrTimeout(e) {\n            var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (progressSubscriber) {\n                progressSubscriber.error(e);\n            }\n            subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n        }\n        ;\n        xhr.ontimeout = xhrTimeout;\n        xhrTimeout.request = request;\n        xhrTimeout.subscriber = this;\n        xhrTimeout.progressSubscriber = progressSubscriber;\n        if (xhr.upload && 'withCredentials' in xhr) {\n            if (progressSubscriber) {\n                var xhrProgress_1;\n                xhrProgress_1 = function (e) {\n                    var progressSubscriber = xhrProgress_1.progressSubscriber;\n                    progressSubscriber.next(e);\n                };\n                if (root_1.root.XDomainRequest) {\n                    xhr.onprogress = xhrProgress_1;\n                }\n                else {\n                    xhr.upload.onprogress = xhrProgress_1;\n                }\n                xhrProgress_1.progressSubscriber = progressSubscriber;\n            }\n            var xhrError_1;\n            xhrError_1 = function (e) {\n                var _a = xhrError_1, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;\n                if (progressSubscriber) {\n                    progressSubscriber.error(e);\n                }\n                subscriber.error(new AjaxError('ajax error', this, request));\n            };\n            xhr.onerror = xhrError_1;\n            xhrError_1.request = request;\n            xhrError_1.subscriber = this;\n            xhrError_1.progressSubscriber = progressSubscriber;\n        }\n        function xhrReadyStateChange(e) {\n            var _a = xhrReadyStateChange, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (this.readyState === 4) {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status_1 = this.status === 1223 ? 204 : this.status;\n                var response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status_1 === 0) {\n                    status_1 = response ? 200 : 0;\n                }\n                if (200 <= status_1 && status_1 < 300) {\n                    if (progressSubscriber) {\n                        progressSubscriber.complete();\n                    }\n                    subscriber.next(e);\n                    subscriber.complete();\n                }\n                else {\n                    if (progressSubscriber) {\n                        progressSubscriber.error(e);\n                    }\n                    subscriber.error(new AjaxError('ajax error ' + status_1, this, request));\n                }\n            }\n        }\n        ;\n        xhr.onreadystatechange = xhrReadyStateChange;\n        xhrReadyStateChange.subscriber = this;\n        xhrReadyStateChange.progressSubscriber = progressSubscriber;\n        xhrReadyStateChange.request = request;\n    };\n    AjaxSubscriber.prototype.unsubscribe = function () {\n        var _a = this, done = _a.done, xhr = _a.xhr;\n        if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n            xhr.abort();\n        }\n        _super.prototype.unsubscribe.call(this);\n    };\n    return AjaxSubscriber;\n}(Subscriber_1.Subscriber));\nexports.AjaxSubscriber = AjaxSubscriber;\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nvar AjaxResponse = (function () {\n    function AjaxResponse(originalEvent, xhr, request) {\n        this.originalEvent = originalEvent;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n    return AjaxResponse;\n}());\nexports.AjaxResponse = AjaxResponse;\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nvar AjaxError = (function (_super) {\n    __extends(AjaxError, _super);\n    function AjaxError(message, xhr, request) {\n        _super.call(this, message);\n        this.message = message;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n    return AjaxError;\n}(Error));\nexports.AjaxError = AjaxError;\nfunction parseXhrResponse(responseType, xhr) {\n    switch (responseType) {\n        case 'json':\n            if ('response' in xhr) {\n                //IE does not support json as responseType, parse it internally\n                return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n            }\n            else {\n                // HACK(benlesh): TypeScript shennanigans\n                // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n                return JSON.parse(xhr.responseText || 'null');\n            }\n        case 'xml':\n            return xhr.responseXML;\n        case 'text':\n        default:\n            // HACK(benlesh): TypeScript shennanigans\n            // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n            return ('response' in xhr) ? xhr.response : xhr.responseText;\n    }\n}\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nvar AjaxTimeoutError = (function (_super) {\n    __extends(AjaxTimeoutError, _super);\n    function AjaxTimeoutError(xhr, request) {\n        _super.call(this, 'ajax timeout', xhr, request);\n    }\n    return AjaxTimeoutError;\n}(AjaxError));\nexports.AjaxTimeoutError = AjaxTimeoutError;\n//# sourceMappingURL=AjaxObservable.js.map","\"use strict\";\nvar TimerObservable_1 = require('./TimerObservable');\nexports.timer = TimerObservable_1.TimerObservable.create;\n//# sourceMappingURL=timer.js.map","\"use strict\";\nfunction identity(x) {\n    return x;\n}\nexports.identity = identity;\n//# sourceMappingURL=identity.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PromiseObservable = (function (_super) {\n    __extends(PromiseObservable, _super);\n    function PromiseObservable(promise, scheduler) {\n        _super.call(this);\n        this.promise = promise;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Converts a Promise to an Observable.\n     *\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n     * resolved value, then completes.</span>\n     *\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n     * Observable. If the Promise resolves with a value, the output Observable\n     * emits that resolved value as a `next`, and then completes. If the Promise\n     * is rejected, then the output Observable emits the corresponding Error.\n     *\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     *\n     * @param {PromiseLike<T>} promise The promise to be converted.\n     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n     * the delivery of the resolved value (or the rejection).\n     * @return {Observable<T>} An Observable which wraps the Promise.\n     * @static true\n     * @name fromPromise\n     * @owner Observable\n     */\n    PromiseObservable.create = function (promise, scheduler) {\n        return new PromiseObservable(promise, scheduler);\n    };\n    PromiseObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var promise = this.promise;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    subscriber.next(this.value);\n                    subscriber.complete();\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.next(value);\n                        subscriber.complete();\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.error(err);\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n        else {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n    };\n    return PromiseObservable;\n}(Observable_1.Observable));\nexports.PromiseObservable = PromiseObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n    }\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.error(err);\n    }\n}\n//# sourceMappingURL=PromiseObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isArray_1 = require('../util/isArray');\nvar isArrayLike_1 = require('../util/isArrayLike');\nvar isPromise_1 = require('../util/isPromise');\nvar PromiseObservable_1 = require('./PromiseObservable');\nvar IteratorObservable_1 = require('./IteratorObservable');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar ArrayLikeObservable_1 = require('./ArrayLikeObservable');\nvar iterator_1 = require('../symbol/iterator');\nvar Observable_1 = require('../Observable');\nvar observeOn_1 = require('../operators/observeOn');\nvar observable_1 = require('../symbol/observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromObservable = (function (_super) {\n    __extends(FromObservable, _super);\n    function FromObservable(ish, scheduler) {\n        _super.call(this, null);\n        this.ish = ish;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable from an Array, an array-like object, a Promise, an\n     * iterable object, or an Observable-like object.\n     *\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n     *\n     * <img src=\"./img/from.png\" width=\"100%\">\n     *\n     * Convert various other objects and data types into Observables. `from`\n     * converts a Promise or an array-like or an\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n     * object into an Observable that emits the items in that promise or array or\n     * iterable. A String, in this context, is treated as an array of characters.\n     * Observable-like objects (contains a function named with the ES2015 Symbol\n     * for Observable) can also be converted through this operator.\n     *\n     * @example <caption>Converts an array to an Observable</caption>\n     * var array = [10, 20, 30];\n     * var result = Rx.Observable.from(array);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 10 20 30\n     *\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n     * function* generateDoubles(seed) {\n     *   var i = seed;\n     *   while (true) {\n     *     yield i;\n     *     i = 2 * i; // double it\n     *   }\n     * }\n     *\n     * var iterator = generateDoubles(3);\n     * var result = Rx.Observable.from(iterator).take(10);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 3 6 12 24 48 96 192 384 768 1536\n     *\n     * @see {@link create}\n     * @see {@link fromEvent}\n     * @see {@link fromEventPattern}\n     * @see {@link fromPromise}\n     *\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n     * Observable-like, an Array, an iterable or an array-like object to be\n     * converted.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * emissions of values.\n     * @return {Observable<T>} The Observable whose values are originally from the\n     * input object that was converted.\n     * @static true\n     * @name from\n     * @owner Observable\n     */\n    FromObservable.create = function (ish, scheduler) {\n        if (ish != null) {\n            if (typeof ish[observable_1.observable] === 'function') {\n                if (ish instanceof Observable_1.Observable && !scheduler) {\n                    return ish;\n                }\n                return new FromObservable(ish, scheduler);\n            }\n            else if (isArray_1.isArray(ish)) {\n                return new ArrayObservable_1.ArrayObservable(ish, scheduler);\n            }\n            else if (isPromise_1.isPromise(ish)) {\n                return new PromiseObservable_1.PromiseObservable(ish, scheduler);\n            }\n            else if (typeof ish[iterator_1.iterator] === 'function' || typeof ish === 'string') {\n                return new IteratorObservable_1.IteratorObservable(ish, scheduler);\n            }\n            else if (isArrayLike_1.isArrayLike(ish)) {\n                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);\n            }\n        }\n        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n    };\n    FromObservable.prototype._subscribe = function (subscriber) {\n        var ish = this.ish;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            return ish[observable_1.observable]().subscribe(subscriber);\n        }\n        else {\n            return ish[observable_1.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));\n        }\n    };\n    return FromObservable;\n}(Observable_1.Observable));\nexports.FromObservable = FromObservable;\n//# sourceMappingURL=FromObservable.js.map","\"use strict\";\nvar FromObservable_1 = require('./FromObservable');\nexports.from = FromObservable_1.FromObservable.create;\n//# sourceMappingURL=from.js.map","\"use strict\";\nvar ArrayObservable_1 = require('./ArrayObservable');\nexports.of = ArrayObservable_1.ArrayObservable.of;\n//# sourceMappingURL=of.js.map","\"use strict\";\nfunction isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\nexports.isPromise = isPromise;\n//# sourceMappingURL=isPromise.js.map","\"use strict\";\nexports.isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArrayLike.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('./Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = (function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_1.Subscription));\nexports.SubjectSubscription = SubjectSubscription;\n//# sourceMappingURL=SubjectSubscription.js.map","\"use strict\";\nexports.empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = (function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\nexports.UnsubscriptionError = UnsubscriptionError;\n//# sourceMappingURL=UnsubscriptionError.js.map","\"use strict\";\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nexports.isObject = isObject;\n//# sourceMappingURL=isObject.js.map","export class DatabaseService\r\n{\r\n    static addToDatabase(url,obj)\r\n    {\r\n        return fetch(url,\r\n        {\r\n            method:\"post\",\r\n\r\n            headers:{\r\n                \"Accept\":\"application/json\",\r\n                \"Content-Type\":\"application/json\"\r\n            },\r\n            body: JSON.stringify(obj) //konvertuje java script u json \r\n        })\r\n        .then(response=>response.json())\r\n        .then(json=>{\r\n            console.log(\"parsed json: \",json);\r\n            return true;\r\n        })\r\n    }\r\n}","import * as Rxjs from 'rxjs';\r\nimport {interval} from 'rxjs/observable/interval';\r\nimport {Hotel} from './hotels-service';\r\n\r\n\r\n\r\nconst gradSelekt=document.getElementById(\"from-place\");\r\n       \r\nconst dugme=document.getElementById(\"dugme\");\r\nRxjs.Observable.fromEvent(dugme,\"click\")\r\n.subscribe(()=>{\r\n    //const res=Hotel.preuzmiHotele(gradSelekt.value) Pokusaj ovo preko klase!\r\n    \r\n    fetch(\"http://localhost:3000/hotels?grad=\" +gradSelekt.value)\r\n     .then(response=>{\r\n         const res=response.json()\r\n         .then(res=>{              \r\n                Hotel.crtajHotel(res);          \r\n         })\r\n     })\r\n});\r\n\r\n\r\n/*var hoteli=Hotel.get()\r\n.then(hotels=>{\r\n    debugger;\r\n    console.log(hotels);\r\n})*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import * as Rxjs from 'rxjs';\r\nimport {interval} from 'rxjs/observable/interval';\r\nimport {DatabaseService} from './database-service';\r\n\r\nexport class Hotel{\r\n\r\n    static get()\r\n    { \r\n        fetch(\"http://localhost:3000/hotels\")\r\n        .then(response=>response.json())  \r\n    }\r\n\r\n    static crtajHotel(hoteli)\r\n    {\r\n        const kontejner=document.getElementsByClassName(\"kontejnerDesno\")[0];\r\n        const divDesno=document.createElement(\"divDesno\");\r\n        divDesno.className=\"divDesno\";\r\n        kontejner.appendChild(divDesno);\r\n       \r\n     hoteli.forEach(hotel=>{   \r\n        const divHotel=document.createElement(\"div\");\r\n        divHotel.className=\"divHotel\";\r\n        divHotel.innerHTML=\"<b>\"+hotel.ime+\"</b>\"+\"<br>\"+hotel.adresa+\", \"+hotel.grad+\"<br>Phone number: \"+hotel.kontakt+\"<br><br>\";\r\n        const opis=document.createElement(\"p\");\r\n        opis.innerHTML=\"<i>\"+hotel.opis;\r\n        opis.className=\"opis\";\r\n        divHotel.appendChild(opis);\r\n        const slika=document.createElement(\"img\");\r\n        slika.setAttribute(\"src\", hotel.slika);\r\n        slika.className=\"slika\";\r\n        divHotel.appendChild(slika);\r\n        divDesno.appendChild(divHotel);\r\n      //book dugme\r\n        const dugme=document.createElement(\"button\");\r\n        dugme.innerHTML=\"Book a room\";\r\n        dugme.className=\"bookDugme\";\r\n        divHotel.appendChild(dugme);\r\n        const dugmeObservable=Rxjs.Observable.fromEvent(dugme,\"click\")\r\n        .subscribe(()=>\r\n        {\r\n            this.rezervacija(hotel);\r\n        });\r\n        \r\n        const lin=document.createElement(\"label\");\r\n        lin.className=\"link\";\r\n        lin.innerHTML=\"Click here for more images!\";\r\n        divHotel.appendChild(lin);\r\n        Rxjs.Observable.fromEvent(lin,\"click\")\r\n        .subscribe(()=>\r\n    {\r\n        this.crtajViseInformacija(hotel.slike);\r\n    });\r\n\r\n        const h=document.createElement(\"hr\");\r\n        divDesno.appendChild(h);\r\n        })\r\n    }\r\n\r\n   static crtajViseInformacija(slike)\r\n   {\r\n    const bod=document.getElementsByTagName(\"body\")[0];\r\n    const myModal=document.createElement(\"div\");\r\n    myModal.className=\"myModal2\";\r\n   bod.appendChild(myModal);\r\n\r\n   myModal.style.display=\"block\";\r\n    const modalContent=document.createElement(\"div\");\r\n    modalContent.className=\"modal-content2\";\r\n    myModal.appendChild(modalContent);\r\n    //x dugme\r\n    const sp=document.createElement(\"span\");\r\n    sp.className=\"close\";\r\n    sp.innerHTML=\"&times;\";\r\n            modalContent.appendChild(sp);\r\n    sp.onclick=function()\r\n    {\r\n        myModal.style.display=\"none\";\r\n    }\r\n     \r\n  \r\n    slike.forEach(slika=>\r\n        {\r\n            const sl=document.createElement(\"img\");\r\n            sl.setAttribute(\"src\",slika.src);\r\n            sl.className=\"slikaSlideshow\";\r\n            modalContent.appendChild(sl);\r\n            const opis=document.createElement(\"p\");\r\n            opis.innerHTML=slika.opis;\r\n            opis.className=\"opisSlike\";\r\n            modalContent.appendChild(opis);\r\n            const pauza=document.createElement(\"br\");\r\n            modalContent.appendChild(pauza);\r\n        })    \r\n    }\r\n\r\n\r\n    static rezervacija(hotel)\r\n    {\r\n        const bod=document.getElementsByTagName(\"body\")[0];\r\n        const myModal=document.createElement(\"div\");\r\n        myModal.className=\"myModal\";\r\n        bod.appendChild(myModal);\r\n\r\n        myModal.style.display=\"block\";\r\n        const modalContent=document.createElement(\"div\");\r\n        modalContent.className=\"modal-content\";\r\n        myModal.appendChild(modalContent);\r\n        //x dugme\r\n        const sp=document.createElement(\"span\");\r\n        sp.className=\"close\";\r\n        sp.innerHTML=\"&times;\";\r\n                modalContent.appendChild(sp);\r\n        sp.onclick=function()\r\n        {\r\n            myModal.style.display=\"none\";\r\n        }\r\n       \r\n        //ime\r\n        const lab=document.createElement(\"label\");\r\n        lab.className=\"for\";\r\n        lab.innerHTML=\"*First Name:  \";\r\n        modalContent.appendChild(lab);\r\n       const inp1=document.createElement(\"input\");\r\n       inp1.className=\"inputIme\";\r\n        modalContent.appendChild(inp1);\r\n        const novired=document.createElement(\"br\");\r\n        modalContent.appendChild(novired);\r\n        //prezime\r\n        const lab2=document.createElement(\"label\");\r\n        lab2.className=\"for\";\r\n        lab2.innerHTML=\"*Last Name:  \";\r\n        modalContent.appendChild(lab2);\r\n        const inp2=document.createElement(\"input\");\r\n        inp2.className=\"inputPrezime\";\r\n        modalContent.appendChild(inp2);\r\n        const novired2=document.createElement(\"br\");\r\n        modalContent.appendChild(novired2);\r\n        //e-mail adresa\r\n        const lab3=document.createElement(\"label\");\r\n        lab3.className=\"for\";\r\n        lab3.innerHTML=\"*E-mail address:  \" ;\r\n        modalContent.appendChild(lab3);\r\n       const inp3=document.createElement(\"input\");\r\n        inp3.className=\"inputEMail\";\r\n        modalContent.appendChild(inp3);\r\n        const novired3=document.createElement(\"br\");\r\n        modalContent.appendChild(novired3);\r\n        //phone\r\n        const lab5=document.createElement(\"label\");\r\n        lab5.className=\"for\";\r\n        lab5.innerHTML=\"*Phone number:  \" ;\r\n        modalContent.appendChild(lab5);\r\n       const inp4=document.createElement(\"input\");\r\n        inp4.className=\"inputPhone\";\r\n        modalContent.appendChild(inp4);\r\n        const novired5=document.createElement(\"br\");\r\n        modalContent.appendChild(novired5);\r\n        \r\n        const lab4=document.createElement(\"label\");\r\n        lab4.innerHTML=\"* Fields are requiered!\"\r\n        modalContent.appendChild(lab4);\r\n        const novired4=document.createElement(\"br\");\r\n        modalContent.appendChild(novired4);\r\n        //dugme za rezervaciju\r\n        const rezervisi=document.createElement(\"button\");\r\n        rezervisi.innerHTML=\"Reserve\";\r\n        rezervisi.className=\"reserve\";\r\n        modalContent.appendChild(rezervisi);\r\n        Rxjs.Observable.fromEvent(rezervisi,\"click\")\r\n        .subscribe(()=>\r\n        {\r\n            this.upisUBazu(hotel);\r\n        \r\n        });    \r\n    }\r\n\r\n    static upisUBazu(hotel)\r\n    {\r\n        const datumStartSelekt=document.getElementById(\"date-start\");\r\n        const datumEndSelekt=document.getElementById(\"date-end\");\r\n        const typeOfRoom=document.getElementById(\"typeOfRoom\");\r\n        const firstName=document.getElementsByClassName(\"inputIme\")[0];\r\n        const lastName=document.getElementsByClassName(\"inputPrezime\")[0];\r\n        const email=document.getElementsByClassName(\"inputEMail\")[0];\r\n        const brOsoba=document.getElementById(\"persons\");\r\n        const phone=document.getElementsByClassName(\"inputPhone\")[0];\r\n\r\n    //provera da li su sva polja uneta\r\n     if(firstName.value==\"\" || lastName.value==\"\" || phone.value==\"\" || email.value==\"\" ||datumEndSelekt.value==\"\" || datumStartSelekt.value==\"\" )\r\n      { \r\n        window.alert(\"Please fill up all fields!\");\r\n      }\r\n\r\n        //validacija emaila\r\n        else if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email.value))\r\n        {\r\n            const obj={\r\n                \"hotelId\":hotel.id,\r\n                \"firstName\":firstName.value,\r\n                \"lastName\":lastName.value,\r\n                \"emailAddress\":email.value,\r\n                \"contactNumber\":phone.value,\r\n                \"numberOfPersons\":persons.value,\r\n                \"typeOfRoom\":typeOfRoom.value,\r\n                \"from\":datumStartSelekt.value,\r\n                \"to\":datumEndSelekt.value\r\n            };\r\n         const url=\"http://localhost:3000/rezervacije\";\r\n           DatabaseService.addToDatabase(url,obj);\r\n\r\n           const modal=document.getElementsByClassName(\"modal-content\")[0];\r\n           const rez=document.createElement(\"div\");\r\n           rez.className=\"reserved\";\r\n           rez.innerHTML=\"Thank you for your reservation! You will receive more information on your email!\";\r\n           modal.appendChild(rez);\r\n        }\r\n        else\r\n            window.alert(\"You have entered an invalid email address!\");\r\n    }\r\n\r\n  \r\n}","\"use strict\";\nvar audit_1 = require('./operators/audit');\nexports.audit = audit_1.audit;\nvar auditTime_1 = require('./operators/auditTime');\nexports.auditTime = auditTime_1.auditTime;\nvar buffer_1 = require('./operators/buffer');\nexports.buffer = buffer_1.buffer;\nvar bufferCount_1 = require('./operators/bufferCount');\nexports.bufferCount = bufferCount_1.bufferCount;\nvar bufferTime_1 = require('./operators/bufferTime');\nexports.bufferTime = bufferTime_1.bufferTime;\nvar bufferToggle_1 = require('./operators/bufferToggle');\nexports.bufferToggle = bufferToggle_1.bufferToggle;\nvar bufferWhen_1 = require('./operators/bufferWhen');\nexports.bufferWhen = bufferWhen_1.bufferWhen;\nvar catchError_1 = require('./operators/catchError');\nexports.catchError = catchError_1.catchError;\nvar combineAll_1 = require('./operators/combineAll');\nexports.combineAll = combineAll_1.combineAll;\nvar combineLatest_1 = require('./operators/combineLatest');\nexports.combineLatest = combineLatest_1.combineLatest;\nvar concat_1 = require('./operators/concat');\nexports.concat = concat_1.concat;\nvar concatAll_1 = require('./operators/concatAll');\nexports.concatAll = concatAll_1.concatAll;\nvar concatMap_1 = require('./operators/concatMap');\nexports.concatMap = concatMap_1.concatMap;\nvar concatMapTo_1 = require('./operators/concatMapTo');\nexports.concatMapTo = concatMapTo_1.concatMapTo;\nvar count_1 = require('./operators/count');\nexports.count = count_1.count;\nvar debounce_1 = require('./operators/debounce');\nexports.debounce = debounce_1.debounce;\nvar debounceTime_1 = require('./operators/debounceTime');\nexports.debounceTime = debounceTime_1.debounceTime;\nvar defaultIfEmpty_1 = require('./operators/defaultIfEmpty');\nexports.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;\nvar delay_1 = require('./operators/delay');\nexports.delay = delay_1.delay;\nvar delayWhen_1 = require('./operators/delayWhen');\nexports.delayWhen = delayWhen_1.delayWhen;\nvar dematerialize_1 = require('./operators/dematerialize');\nexports.dematerialize = dematerialize_1.dematerialize;\nvar distinct_1 = require('./operators/distinct');\nexports.distinct = distinct_1.distinct;\nvar distinctUntilChanged_1 = require('./operators/distinctUntilChanged');\nexports.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;\nvar distinctUntilKeyChanged_1 = require('./operators/distinctUntilKeyChanged');\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;\nvar elementAt_1 = require('./operators/elementAt');\nexports.elementAt = elementAt_1.elementAt;\nvar every_1 = require('./operators/every');\nexports.every = every_1.every;\nvar exhaust_1 = require('./operators/exhaust');\nexports.exhaust = exhaust_1.exhaust;\nvar exhaustMap_1 = require('./operators/exhaustMap');\nexports.exhaustMap = exhaustMap_1.exhaustMap;\nvar expand_1 = require('./operators/expand');\nexports.expand = expand_1.expand;\nvar filter_1 = require('./operators/filter');\nexports.filter = filter_1.filter;\nvar finalize_1 = require('./operators/finalize');\nexports.finalize = finalize_1.finalize;\nvar find_1 = require('./operators/find');\nexports.find = find_1.find;\nvar findIndex_1 = require('./operators/findIndex');\nexports.findIndex = findIndex_1.findIndex;\nvar first_1 = require('./operators/first');\nexports.first = first_1.first;\nvar groupBy_1 = require('./operators/groupBy');\nexports.groupBy = groupBy_1.groupBy;\nvar ignoreElements_1 = require('./operators/ignoreElements');\nexports.ignoreElements = ignoreElements_1.ignoreElements;\nvar isEmpty_1 = require('./operators/isEmpty');\nexports.isEmpty = isEmpty_1.isEmpty;\nvar last_1 = require('./operators/last');\nexports.last = last_1.last;\nvar map_1 = require('./operators/map');\nexports.map = map_1.map;\nvar mapTo_1 = require('./operators/mapTo');\nexports.mapTo = mapTo_1.mapTo;\nvar materialize_1 = require('./operators/materialize');\nexports.materialize = materialize_1.materialize;\nvar max_1 = require('./operators/max');\nexports.max = max_1.max;\nvar merge_1 = require('./operators/merge');\nexports.merge = merge_1.merge;\nvar mergeAll_1 = require('./operators/mergeAll');\nexports.mergeAll = mergeAll_1.mergeAll;\nvar mergeMap_1 = require('./operators/mergeMap');\nexports.mergeMap = mergeMap_1.mergeMap;\nvar mergeMap_2 = require('./operators/mergeMap');\nexports.flatMap = mergeMap_2.mergeMap;\nvar mergeMapTo_1 = require('./operators/mergeMapTo');\nexports.mergeMapTo = mergeMapTo_1.mergeMapTo;\nvar mergeScan_1 = require('./operators/mergeScan');\nexports.mergeScan = mergeScan_1.mergeScan;\nvar min_1 = require('./operators/min');\nexports.min = min_1.min;\nvar multicast_1 = require('./operators/multicast');\nexports.multicast = multicast_1.multicast;\nvar observeOn_1 = require('./operators/observeOn');\nexports.observeOn = observeOn_1.observeOn;\nvar onErrorResumeNext_1 = require('./operators/onErrorResumeNext');\nexports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\nvar pairwise_1 = require('./operators/pairwise');\nexports.pairwise = pairwise_1.pairwise;\nvar partition_1 = require('./operators/partition');\nexports.partition = partition_1.partition;\nvar pluck_1 = require('./operators/pluck');\nexports.pluck = pluck_1.pluck;\nvar publish_1 = require('./operators/publish');\nexports.publish = publish_1.publish;\nvar publishBehavior_1 = require('./operators/publishBehavior');\nexports.publishBehavior = publishBehavior_1.publishBehavior;\nvar publishLast_1 = require('./operators/publishLast');\nexports.publishLast = publishLast_1.publishLast;\nvar publishReplay_1 = require('./operators/publishReplay');\nexports.publishReplay = publishReplay_1.publishReplay;\nvar race_1 = require('./operators/race');\nexports.race = race_1.race;\nvar reduce_1 = require('./operators/reduce');\nexports.reduce = reduce_1.reduce;\nvar repeat_1 = require('./operators/repeat');\nexports.repeat = repeat_1.repeat;\nvar repeatWhen_1 = require('./operators/repeatWhen');\nexports.repeatWhen = repeatWhen_1.repeatWhen;\nvar retry_1 = require('./operators/retry');\nexports.retry = retry_1.retry;\nvar retryWhen_1 = require('./operators/retryWhen');\nexports.retryWhen = retryWhen_1.retryWhen;\nvar refCount_1 = require('./operators/refCount');\nexports.refCount = refCount_1.refCount;\nvar sample_1 = require('./operators/sample');\nexports.sample = sample_1.sample;\nvar sampleTime_1 = require('./operators/sampleTime');\nexports.sampleTime = sampleTime_1.sampleTime;\nvar scan_1 = require('./operators/scan');\nexports.scan = scan_1.scan;\nvar sequenceEqual_1 = require('./operators/sequenceEqual');\nexports.sequenceEqual = sequenceEqual_1.sequenceEqual;\nvar share_1 = require('./operators/share');\nexports.share = share_1.share;\nvar shareReplay_1 = require('./operators/shareReplay');\nexports.shareReplay = shareReplay_1.shareReplay;\nvar single_1 = require('./operators/single');\nexports.single = single_1.single;\nvar skip_1 = require('./operators/skip');\nexports.skip = skip_1.skip;\nvar skipLast_1 = require('./operators/skipLast');\nexports.skipLast = skipLast_1.skipLast;\nvar skipUntil_1 = require('./operators/skipUntil');\nexports.skipUntil = skipUntil_1.skipUntil;\nvar skipWhile_1 = require('./operators/skipWhile');\nexports.skipWhile = skipWhile_1.skipWhile;\nvar startWith_1 = require('./operators/startWith');\nexports.startWith = startWith_1.startWith;\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './operators/subscribeOn';\nvar switchAll_1 = require('./operators/switchAll');\nexports.switchAll = switchAll_1.switchAll;\nvar switchMap_1 = require('./operators/switchMap');\nexports.switchMap = switchMap_1.switchMap;\nvar switchMapTo_1 = require('./operators/switchMapTo');\nexports.switchMapTo = switchMapTo_1.switchMapTo;\nvar take_1 = require('./operators/take');\nexports.take = take_1.take;\nvar takeLast_1 = require('./operators/takeLast');\nexports.takeLast = takeLast_1.takeLast;\nvar takeUntil_1 = require('./operators/takeUntil');\nexports.takeUntil = takeUntil_1.takeUntil;\nvar takeWhile_1 = require('./operators/takeWhile');\nexports.takeWhile = takeWhile_1.takeWhile;\nvar tap_1 = require('./operators/tap');\nexports.tap = tap_1.tap;\nvar throttle_1 = require('./operators/throttle');\nexports.throttle = throttle_1.throttle;\nvar throttleTime_1 = require('./operators/throttleTime');\nexports.throttleTime = throttleTime_1.throttleTime;\nvar timeInterval_1 = require('./operators/timeInterval');\nexports.timeInterval = timeInterval_1.timeInterval;\nvar timeout_1 = require('./operators/timeout');\nexports.timeout = timeout_1.timeout;\nvar timeoutWith_1 = require('./operators/timeoutWith');\nexports.timeoutWith = timeoutWith_1.timeoutWith;\nvar timestamp_1 = require('./operators/timestamp');\nexports.timestamp = timestamp_1.timestamp;\nvar toArray_1 = require('./operators/toArray');\nexports.toArray = toArray_1.toArray;\nvar window_1 = require('./operators/window');\nexports.window = window_1.window;\nvar windowCount_1 = require('./operators/windowCount');\nexports.windowCount = windowCount_1.windowCount;\nvar windowTime_1 = require('./operators/windowTime');\nexports.windowTime = windowTime_1.windowTime;\nvar windowToggle_1 = require('./operators/windowToggle');\nexports.windowToggle = windowToggle_1.windowToggle;\nvar windowWhen_1 = require('./operators/windowWhen');\nexports.windowWhen = windowWhen_1.windowWhen;\nvar withLatestFrom_1 = require('./operators/withLatestFrom');\nexports.withLatestFrom = withLatestFrom_1.withLatestFrom;\nvar zip_1 = require('./operators/zip');\nexports.zip = zip_1.zip;\nvar zipAll_1 = require('./operators/zipAll');\nexports.zipAll = zipAll_1.zipAll;\n//# sourceMappingURL=operators.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar AnimationFrameScheduler = (function (_super) {\n    __extends(AnimationFrameScheduler, _super);\n    function AnimationFrameScheduler() {\n        _super.apply(this, arguments);\n    }\n    AnimationFrameScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AnimationFrameScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.AnimationFrameScheduler = AnimationFrameScheduler;\n//# sourceMappingURL=AnimationFrameScheduler.js.map","\"use strict\";\nvar root_1 = require('./root');\nvar RequestAnimationFrameDefinition = (function () {\n    function RequestAnimationFrameDefinition(root) {\n        if (root.requestAnimationFrame) {\n            this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n        }\n        else if (root.mozRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n        }\n        else if (root.webkitRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n        }\n        else if (root.msRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n        }\n        else if (root.oRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n        }\n        else {\n            this.cancelAnimationFrame = root.clearTimeout.bind(root);\n            this.requestAnimationFrame = function (cb) { return root.setTimeout(cb, 1000 / 60); };\n        }\n    }\n    return RequestAnimationFrameDefinition;\n}());\nexports.RequestAnimationFrameDefinition = RequestAnimationFrameDefinition;\nexports.AnimationFrame = new RequestAnimationFrameDefinition(root_1.root);\n//# sourceMappingURL=AnimationFrame.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\nvar AnimationFrame_1 = require('../util/AnimationFrame');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AnimationFrameAction = (function (_super) {\n    __extends(AnimationFrameAction, _super);\n    function AnimationFrameAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If an animation frame has already been requested, don't request another\n        // one. If an animation frame hasn't been requested yet, request one. Return\n        // the current animation frame request id.\n        return scheduler.scheduled || (scheduler.scheduled = AnimationFrame_1.AnimationFrame.requestAnimationFrame(scheduler.flush.bind(scheduler, null)));\n    };\n    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested animation frame and\n        // set the scheduled flag to undefined so the next AnimationFrameAction will\n        // request its own.\n        if (scheduler.actions.length === 0) {\n            AnimationFrame_1.AnimationFrame.cancelAnimationFrame(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AnimationFrameAction;\n}(AsyncAction_1.AsyncAction));\nexports.AnimationFrameAction = AnimationFrameAction;\n//# sourceMappingURL=AnimationFrameAction.js.map","\"use strict\";\nvar AnimationFrameAction_1 = require('./AnimationFrameAction');\nvar AnimationFrameScheduler_1 = require('./AnimationFrameScheduler');\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\nexports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);\n//# sourceMappingURL=animationFrame.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Subscription_1 = require('../Subscription');\nvar SubscriptionLoggable_1 = require('./SubscriptionLoggable');\nvar applyMixins_1 = require('../util/applyMixins');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar HotObservable = (function (_super) {\n    __extends(HotObservable, _super);\n    function HotObservable(messages, scheduler) {\n        _super.call(this);\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    HotObservable.prototype._subscribe = function (subscriber) {\n        var subject = this;\n        var index = subject.logSubscribedFrame();\n        subscriber.add(new Subscription_1.Subscription(function () {\n            subject.logUnsubscribedFrame(index);\n        }));\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    HotObservable.prototype.setup = function () {\n        var subject = this;\n        var messagesLength = subject.messages.length;\n        /* tslint:disable:no-var-keyword */\n        for (var i = 0; i < messagesLength; i++) {\n            (function () {\n                var message = subject.messages[i];\n                /* tslint:enable */\n                subject.scheduler.schedule(function () { message.notification.observe(subject); }, message.frame);\n            })();\n        }\n    };\n    return HotObservable;\n}(Subject_1.Subject));\nexports.HotObservable = HotObservable;\napplyMixins_1.applyMixins(HotObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n//# sourceMappingURL=HotObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar Subscription_1 = require('../Subscription');\nvar SubscriptionLoggable_1 = require('./SubscriptionLoggable');\nvar applyMixins_1 = require('../util/applyMixins');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ColdObservable = (function (_super) {\n    __extends(ColdObservable, _super);\n    function ColdObservable(messages, scheduler) {\n        _super.call(this, function (subscriber) {\n            var observable = this;\n            var index = observable.logSubscribedFrame();\n            subscriber.add(new Subscription_1.Subscription(function () {\n                observable.logUnsubscribedFrame(index);\n            }));\n            observable.scheduleMessages(subscriber);\n            return subscriber;\n        });\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    ColdObservable.prototype.scheduleMessages = function (subscriber) {\n        var messagesLength = this.messages.length;\n        for (var i = 0; i < messagesLength; i++) {\n            var message = this.messages[i];\n            subscriber.add(this.scheduler.schedule(function (_a) {\n                var message = _a.message, subscriber = _a.subscriber;\n                message.notification.observe(subscriber);\n            }, message.frame, { message: message, subscriber: subscriber }));\n        }\n    };\n    return ColdObservable;\n}(Observable_1.Observable));\nexports.ColdObservable = ColdObservable;\napplyMixins_1.applyMixins(ColdObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n//# sourceMappingURL=ColdObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar Notification_1 = require('../Notification');\nvar ColdObservable_1 = require('./ColdObservable');\nvar HotObservable_1 = require('./HotObservable');\nvar SubscriptionLog_1 = require('./SubscriptionLog');\nvar VirtualTimeScheduler_1 = require('../scheduler/VirtualTimeScheduler');\nvar defaultMaxFrame = 750;\nvar TestScheduler = (function (_super) {\n    __extends(TestScheduler, _super);\n    function TestScheduler(assertDeepEqual) {\n        _super.call(this, VirtualTimeScheduler_1.VirtualAction, defaultMaxFrame);\n        this.assertDeepEqual = assertDeepEqual;\n        this.hotObservables = [];\n        this.coldObservables = [];\n        this.flushTests = [];\n    }\n    TestScheduler.prototype.createTime = function (marbles) {\n        var indexOf = marbles.indexOf('|');\n        if (indexOf === -1) {\n            throw new Error('marble diagram for time should have a completion marker \"|\"');\n        }\n        return indexOf * TestScheduler.frameTimeFactor;\n    };\n    TestScheduler.prototype.createColdObservable = function (marbles, values, error) {\n        if (marbles.indexOf('^') !== -1) {\n            throw new Error('cold observable cannot have subscription offset \"^\"');\n        }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('cold observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error);\n        var cold = new ColdObservable_1.ColdObservable(messages, this);\n        this.coldObservables.push(cold);\n        return cold;\n    };\n    TestScheduler.prototype.createHotObservable = function (marbles, values, error) {\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('hot observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error);\n        var subject = new HotObservable_1.HotObservable(messages, this);\n        this.hotObservables.push(subject);\n        return subject;\n    };\n    TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {\n        var _this = this;\n        var messages = [];\n        observable.subscribe(function (value) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createNext(value) });\n        }, function (err) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createError(err) });\n        }, function () {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createComplete() });\n        });\n        return messages;\n    };\n    TestScheduler.prototype.expectObservable = function (observable, unsubscriptionMarbles) {\n        var _this = this;\n        if (unsubscriptionMarbles === void 0) { unsubscriptionMarbles = null; }\n        var actual = [];\n        var flushTest = { actual: actual, ready: false };\n        var unsubscriptionFrame = TestScheduler\n            .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n        var subscription;\n        this.schedule(function () {\n            subscription = observable.subscribe(function (x) {\n                var value = x;\n                // Support Observable-of-Observables\n                if (x instanceof Observable_1.Observable) {\n                    value = _this.materializeInnerObservable(value, _this.frame);\n                }\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createNext(value) });\n            }, function (err) {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createError(err) });\n            }, function () {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createComplete() });\n            });\n        }, 0);\n        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            this.schedule(function () { return subscription.unsubscribe(); }, unsubscriptionFrame);\n        }\n        this.flushTests.push(flushTest);\n        return {\n            toBe: function (marbles, values, errorValue) {\n                flushTest.ready = true;\n                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n            }\n        };\n    };\n    TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {\n        var flushTest = { actual: actualSubscriptionLogs, ready: false };\n        this.flushTests.push(flushTest);\n        return {\n            toBe: function (marbles) {\n                var marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;\n                flushTest.ready = true;\n                flushTest.expected = marblesArray.map(function (marbles) {\n                    return TestScheduler.parseMarblesAsSubscriptions(marbles);\n                });\n            }\n        };\n    };\n    TestScheduler.prototype.flush = function () {\n        var hotObservables = this.hotObservables;\n        while (hotObservables.length > 0) {\n            hotObservables.shift().setup();\n        }\n        _super.prototype.flush.call(this);\n        var readyFlushTests = this.flushTests.filter(function (test) { return test.ready; });\n        while (readyFlushTests.length > 0) {\n            var test = readyFlushTests.shift();\n            this.assertDeepEqual(test.actual, test.expected);\n        }\n    };\n    TestScheduler.parseMarblesAsSubscriptions = function (marbles) {\n        if (typeof marbles !== 'string') {\n            return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);\n        }\n        var len = marbles.length;\n        var groupStart = -1;\n        var subscriptionFrame = Number.POSITIVE_INFINITY;\n        var unsubscriptionFrame = Number.POSITIVE_INFINITY;\n        for (var i = 0; i < len; i++) {\n            var frame = i * this.frameTimeFactor;\n            var c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '^':\n                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    subscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                case '!':\n                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                default:\n                    throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n                        'subscription marble diagram. Found instead \\'' + c + '\\'.');\n            }\n        }\n        if (unsubscriptionFrame < 0) {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);\n        }\n        else {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n        }\n    };\n    TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables) {\n        if (materializeInnerObservables === void 0) { materializeInnerObservables = false; }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('conventional marble diagrams cannot have the ' +\n                'unsubscription marker \"!\"');\n        }\n        var len = marbles.length;\n        var testMessages = [];\n        var subIndex = marbles.indexOf('^');\n        var frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n        var getValue = typeof values !== 'object' ?\n            function (x) { return x; } :\n            function (x) {\n                // Support Observable-of-Observables\n                if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {\n                    return values[x].messages;\n                }\n                return values[x];\n            };\n        var groupStart = -1;\n        for (var i = 0; i < len; i++) {\n            var frame = i * this.frameTimeFactor + frameOffset;\n            var notification = void 0;\n            var c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '|':\n                    notification = Notification_1.Notification.createComplete();\n                    break;\n                case '^':\n                    break;\n                case '#':\n                    notification = Notification_1.Notification.createError(errorValue || 'error');\n                    break;\n                default:\n                    notification = Notification_1.Notification.createNext(getValue(c));\n                    break;\n            }\n            if (notification) {\n                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });\n            }\n        }\n        return testMessages;\n    };\n    return TestScheduler;\n}(VirtualTimeScheduler_1.VirtualTimeScheduler));\nexports.TestScheduler = TestScheduler;\n//# sourceMappingURL=TestScheduler.js.map","\"use strict\";\nvar zipAll_1 = require('../operators/zipAll');\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nfunction zipAll(project) {\n    return zipAll_1.zipAll(project)(this);\n}\nexports.zipAll = zipAll;\n//# sourceMappingURL=zipAll.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zipAll_1 = require('../../operator/zipAll');\nObservable_1.Observable.prototype.zipAll = zipAll_1.zipAll;\n//# sourceMappingURL=zipAll.js.map","\"use strict\";\nvar zip_1 = require('../operators/zip');\n/* tslint:enable:max-line-length */\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nfunction zipProto() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return zip_1.zip.apply(void 0, observables)(this);\n}\nexports.zipProto = zipProto;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zip_1 = require('../../operator/zip');\nObservable_1.Observable.prototype.zip = zip_1.zipProto;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar withLatestFrom_1 = require('../operators/withLatestFrom');\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return withLatestFrom_1.withLatestFrom.apply(void 0, args)(this);\n}\nexports.withLatestFrom = withLatestFrom;\n//# sourceMappingURL=withLatestFrom.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar withLatestFrom_1 = require('../../operator/withLatestFrom');\nObservable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;\n//# sourceMappingURL=withLatestFrom.js.map","\"use strict\";\nvar windowWhen_1 = require('../operators/windowWhen');\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nfunction windowWhen(closingSelector) {\n    return windowWhen_1.windowWhen(closingSelector)(this);\n}\nexports.windowWhen = windowWhen;\n//# sourceMappingURL=windowWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowWhen_1 = require('../../operator/windowWhen');\nObservable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;\n//# sourceMappingURL=windowWhen.js.map","\"use strict\";\nvar windowToggle_1 = require('../operators/windowToggle');\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nfunction windowToggle(openings, closingSelector) {\n    return windowToggle_1.windowToggle(openings, closingSelector)(this);\n}\nexports.windowToggle = windowToggle;\n//# sourceMappingURL=windowToggle.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowToggle_1 = require('../../operator/windowToggle');\nObservable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;\n//# sourceMappingURL=windowToggle.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar isNumeric_1 = require('../util/isNumeric');\nvar isScheduler_1 = require('../util/isScheduler');\nvar windowTime_1 = require('../operators/windowTime');\nfunction windowTime(windowTimeSpan) {\n    var scheduler = async_1.async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler_1.isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler_1.isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric_1.isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler_1.isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric_1.isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return windowTime_1.windowTime(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this);\n}\nexports.windowTime = windowTime;\n//# sourceMappingURL=windowTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowTime_1 = require('../../operator/windowTime');\nObservable_1.Observable.prototype.windowTime = windowTime_1.windowTime;\n//# sourceMappingURL=windowTime.js.map","\"use strict\";\nvar windowCount_1 = require('../operators/windowCount');\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nfunction windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n    return windowCount_1.windowCount(windowSize, startWindowEvery)(this);\n}\nexports.windowCount = windowCount;\n//# sourceMappingURL=windowCount.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowCount_1 = require('../../operator/windowCount');\nObservable_1.Observable.prototype.windowCount = windowCount_1.windowCount;\n//# sourceMappingURL=windowCount.js.map","\"use strict\";\nvar window_1 = require('../operators/window');\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nfunction window(windowBoundaries) {\n    return window_1.window(windowBoundaries)(this);\n}\nexports.window = window;\n//# sourceMappingURL=window.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar window_1 = require('../../operator/window');\nObservable_1.Observable.prototype.window = window_1.window;\n//# sourceMappingURL=window.js.map","\"use strict\";\nvar toArray_1 = require('../operators/toArray');\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * <img src=\"./img/toArray.png\" width=\"100%\">\n *\n * `toArray` will wait until the source Observable completes\n * before emitting the array containing all emissions.\n * When the source Observable errors no array will be emitted.\n *\n * @example <caption>Create array from input</caption>\n * const input = Rx.Observable.interval(100).take(4);\n *\n * input.toArray()\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\n *\n * @see {@link buffer}\n *\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nfunction toArray() {\n    return toArray_1.toArray()(this);\n}\nexports.toArray = toArray;\n//# sourceMappingURL=toArray.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar toArray_1 = require('../../operator/toArray');\nObservable_1.Observable.prototype.toArray = toArray_1.toArray;\n//# sourceMappingURL=toArray.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timestamp_1 = require('../operators/timestamp');\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nfunction timestamp(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timestamp_1.timestamp(scheduler)(this);\n}\nexports.timestamp = timestamp;\n//# sourceMappingURL=timestamp.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timestamp_1 = require('../../operator/timestamp');\nObservable_1.Observable.prototype.timestamp = timestamp_1.timestamp;\n//# sourceMappingURL=timestamp.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timeoutWith_1 = require('../operators/timeoutWith');\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nfunction timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeoutWith_1.timeoutWith(due, withObservable, scheduler)(this);\n}\nexports.timeoutWith = timeoutWith;\n//# sourceMappingURL=timeoutWith.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeoutWith_1 = require('../../operator/timeoutWith');\nObservable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;\n//# sourceMappingURL=timeoutWith.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timeout_1 = require('../operators/timeout');\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nfunction timeout(due, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeout_1.timeout(due, scheduler)(this);\n}\nexports.timeout = timeout;\n//# sourceMappingURL=timeout.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeout_1 = require('../../operator/timeout');\nObservable_1.Observable.prototype.timeout = timeout_1.timeout;\n//# sourceMappingURL=timeout.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeInterval_1 = require('../../operator/timeInterval');\nObservable_1.Observable.prototype.timeInterval = timeInterval_1.timeInterval;\n//# sourceMappingURL=timeInterval.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar throttle_1 = require('../operators/throttle');\nvar throttleTime_1 = require('../operators/throttleTime');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nfunction throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return throttleTime_1.throttleTime(duration, scheduler, config)(this);\n}\nexports.throttleTime = throttleTime;\n//# sourceMappingURL=throttleTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throttleTime_1 = require('../../operator/throttleTime');\nObservable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;\n//# sourceMappingURL=throttleTime.js.map","\"use strict\";\nvar throttle_1 = require('../operators/throttle');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nfunction throttle(durationSelector, config) {\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return throttle_1.throttle(durationSelector, config)(this);\n}\nexports.throttle = throttle;\n//# sourceMappingURL=throttle.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throttle_1 = require('../../operator/throttle');\nObservable_1.Observable.prototype.throttle = throttle_1.throttle;\n//# sourceMappingURL=throttle.js.map","\"use strict\";\nvar takeWhile_1 = require('../operators/takeWhile');\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nfunction takeWhile(predicate) {\n    return takeWhile_1.takeWhile(predicate)(this);\n}\nexports.takeWhile = takeWhile;\n//# sourceMappingURL=takeWhile.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeWhile_1 = require('../../operator/takeWhile');\nObservable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;\n//# sourceMappingURL=takeWhile.js.map","\"use strict\";\nvar takeUntil_1 = require('../operators/takeUntil');\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return takeUntil_1.takeUntil(notifier)(this);\n}\nexports.takeUntil = takeUntil;\n//# sourceMappingURL=takeUntil.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeUntil_1 = require('../../operator/takeUntil');\nObservable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;\n//# sourceMappingURL=takeUntil.js.map","\"use strict\";\nvar takeLast_1 = require('../operators/takeLast');\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nfunction takeLast(count) {\n    return takeLast_1.takeLast(count)(this);\n}\nexports.takeLast = takeLast;\n//# sourceMappingURL=takeLast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeLast_1 = require('../../operator/takeLast');\nObservable_1.Observable.prototype.takeLast = takeLast_1.takeLast;\n//# sourceMappingURL=takeLast.js.map","\"use strict\";\nvar take_1 = require('../operators/take');\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nfunction take(count) {\n    return take_1.take(count)(this);\n}\nexports.take = take;\n//# sourceMappingURL=take.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar take_1 = require('../../operator/take');\nObservable_1.Observable.prototype.take = take_1.take;\n//# sourceMappingURL=take.js.map","\"use strict\";\nvar switchMapTo_1 = require('../operators/switchMapTo');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nfunction switchMapTo(innerObservable, resultSelector) {\n    return switchMapTo_1.switchMapTo(innerObservable, resultSelector)(this);\n}\nexports.switchMapTo = switchMapTo;\n//# sourceMappingURL=switchMapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switchMapTo_1 = require('../../operator/switchMapTo');\nObservable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;\n//# sourceMappingURL=switchMapTo.js.map","\"use strict\";\nvar switchMap_1 = require('../operators/switchMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return switchMap_1.switchMap(project, resultSelector)(this);\n}\nexports.switchMap = switchMap;\n//# sourceMappingURL=switchMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switchMap_1 = require('../../operator/switchMap');\nObservable_1.Observable.prototype.switchMap = switchMap_1.switchMap;\n//# sourceMappingURL=switchMap.js.map","\"use strict\";\nvar switchAll_1 = require('../operators/switchAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nfunction _switch() {\n    return switchAll_1.switchAll()(this);\n}\nexports._switch = _switch;\n//# sourceMappingURL=switch.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switch_1 = require('../../operator/switch');\nObservable_1.Observable.prototype.switch = switch_1._switch;\nObservable_1.Observable.prototype._switch = switch_1._switch;\n//# sourceMappingURL=switch.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar AsapScheduler = (function (_super) {\n    __extends(AsapScheduler, _super);\n    function AsapScheduler() {\n        _super.apply(this, arguments);\n    }\n    AsapScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsapScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.AsapScheduler = AsapScheduler;\n//# sourceMappingURL=AsapScheduler.js.map","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\"use strict\";\nvar root_1 = require('./root');\nvar ImmediateDefinition = (function () {\n    function ImmediateDefinition(root) {\n        this.root = root;\n        if (root.setImmediate && typeof root.setImmediate === 'function') {\n            this.setImmediate = root.setImmediate.bind(root);\n            this.clearImmediate = root.clearImmediate.bind(root);\n        }\n        else {\n            this.nextHandle = 1;\n            this.tasksByHandle = {};\n            this.currentlyRunningATask = false;\n            // Don't get fooled by e.g. browserify environments.\n            if (this.canUseProcessNextTick()) {\n                // For Node.js before 0.9\n                this.setImmediate = this.createProcessNextTickSetImmediate();\n            }\n            else if (this.canUsePostMessage()) {\n                // For non-IE10 modern browsers\n                this.setImmediate = this.createPostMessageSetImmediate();\n            }\n            else if (this.canUseMessageChannel()) {\n                // For web workers, where supported\n                this.setImmediate = this.createMessageChannelSetImmediate();\n            }\n            else if (this.canUseReadyStateChange()) {\n                // For IE 6–8\n                this.setImmediate = this.createReadyStateChangeSetImmediate();\n            }\n            else {\n                // For older browsers\n                this.setImmediate = this.createSetTimeoutSetImmediate();\n            }\n            var ci = function clearImmediate(handle) {\n                delete clearImmediate.instance.tasksByHandle[handle];\n            };\n            ci.instance = this;\n            this.clearImmediate = ci;\n        }\n    }\n    ImmediateDefinition.prototype.identify = function (o) {\n        return this.root.Object.prototype.toString.call(o);\n    };\n    ImmediateDefinition.prototype.canUseProcessNextTick = function () {\n        return this.identify(this.root.process) === '[object process]';\n    };\n    ImmediateDefinition.prototype.canUseMessageChannel = function () {\n        return Boolean(this.root.MessageChannel);\n    };\n    ImmediateDefinition.prototype.canUseReadyStateChange = function () {\n        var document = this.root.document;\n        return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n    };\n    ImmediateDefinition.prototype.canUsePostMessage = function () {\n        var root = this.root;\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `root.postMessage` means something completely different and can't be used for this purpose.\n        if (root.postMessage && !root.importScripts) {\n            var postMessageIsAsynchronous_1 = true;\n            var oldOnMessage = root.onmessage;\n            root.onmessage = function () {\n                postMessageIsAsynchronous_1 = false;\n            };\n            root.postMessage('', '*');\n            root.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous_1;\n        }\n        return false;\n    };\n    // This function accepts the same arguments as setImmediate, but\n    // returns a function that requires no arguments.\n    ImmediateDefinition.prototype.partiallyApplied = function (handler) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var fn = function result() {\n            var _a = result, handler = _a.handler, args = _a.args;\n            if (typeof handler === 'function') {\n                handler.apply(undefined, args);\n            }\n            else {\n                (new Function('' + handler))();\n            }\n        };\n        fn.handler = handler;\n        fn.args = args;\n        return fn;\n    };\n    ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {\n        this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n        return this.nextHandle++;\n    };\n    ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n        var root = this.root;\n        var messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n        var onGlobalMessage = function globalMessageHandler(event) {\n            var instance = globalMessageHandler.instance;\n            if (event.source === root &&\n                typeof event.data === 'string' &&\n                event.data.indexOf(messagePrefix) === 0) {\n                instance.runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n        onGlobalMessage.instance = this;\n        root.addEventListener('message', onGlobalMessage, false);\n        var fn = function setImmediate() {\n            var _a = setImmediate, messagePrefix = _a.messagePrefix, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.postMessage(messagePrefix + handle, '*');\n            return handle;\n        };\n        fn.instance = this;\n        fn.messagePrefix = messagePrefix;\n        return fn;\n    };\n    ImmediateDefinition.prototype.runIfPresent = function (handle) {\n        // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (this.currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // 'too much recursion' error.\n            this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n        }\n        else {\n            var task = this.tasksByHandle[handle];\n            if (task) {\n                this.currentlyRunningATask = true;\n                try {\n                    task();\n                }\n                finally {\n                    this.clearImmediate(handle);\n                    this.currentlyRunningATask = false;\n                }\n            }\n        }\n    };\n    ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {\n        var _this = this;\n        var channel = new this.root.MessageChannel();\n        channel.port1.onmessage = function (event) {\n            var handle = event.data;\n            _this.runIfPresent(handle);\n        };\n        var fn = function setImmediate() {\n            var _a = setImmediate, channel = _a.channel, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            channel.port2.postMessage(handle);\n            return handle;\n        };\n        fn.channel = channel;\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var root = instance.root;\n            var doc = root.document;\n            var html = doc.documentElement;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement('script');\n            script.onreadystatechange = function () {\n                instance.runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    return ImmediateDefinition;\n}());\nexports.ImmediateDefinition = ImmediateDefinition;\nexports.Immediate = new ImmediateDefinition(root_1.root);\n//# sourceMappingURL=Immediate.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Immediate_1 = require('../util/Immediate');\nvar AsyncAction_1 = require('./AsyncAction');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsapAction = (function (_super) {\n    __extends(AsapAction, _super);\n    function AsapAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If a microtask has already been scheduled, don't schedule another\n        // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n        // the current scheduled microtask id.\n        return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    };\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested microtask and\n        // set the scheduled flag to undefined so the next AsapAction will schedule\n        // its own.\n        if (scheduler.actions.length === 0) {\n            Immediate_1.Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AsapAction;\n}(AsyncAction_1.AsyncAction));\nexports.AsapAction = AsapAction;\n//# sourceMappingURL=AsapAction.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar asap_1 = require('../scheduler/asap');\nvar isNumeric_1 = require('../util/isNumeric');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar SubscribeOnObservable = (function (_super) {\n    __extends(SubscribeOnObservable, _super);\n    function SubscribeOnObservable(source, delayTime, scheduler) {\n        if (delayTime === void 0) { delayTime = 0; }\n        if (scheduler === void 0) { scheduler = asap_1.asap; }\n        _super.call(this);\n        this.source = source;\n        this.delayTime = delayTime;\n        this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {\n            this.delayTime = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = asap_1.asap;\n        }\n    }\n    SubscribeOnObservable.create = function (source, delay, scheduler) {\n        if (delay === void 0) { delay = 0; }\n        if (scheduler === void 0) { scheduler = asap_1.asap; }\n        return new SubscribeOnObservable(source, delay, scheduler);\n    };\n    SubscribeOnObservable.dispatch = function (arg) {\n        var source = arg.source, subscriber = arg.subscriber;\n        return this.add(source.subscribe(subscriber));\n    };\n    SubscribeOnObservable.prototype._subscribe = function (subscriber) {\n        var delay = this.delayTime;\n        var source = this.source;\n        var scheduler = this.scheduler;\n        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n            source: source, subscriber: subscriber\n        });\n    };\n    return SubscribeOnObservable;\n}(Observable_1.Observable));\nexports.SubscribeOnObservable = SubscribeOnObservable;\n//# sourceMappingURL=SubscribeOnObservable.js.map","\"use strict\";\nvar SubscribeOnObservable_1 = require('../observable/SubscribeOnObservable');\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nfunction subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return function subscribeOnOperatorFunction(source) {\n        return source.lift(new SubscribeOnOperator(scheduler, delay));\n    };\n}\nexports.subscribeOn = subscribeOn;\nvar SubscribeOnOperator = (function () {\n    function SubscribeOnOperator(scheduler, delay) {\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    SubscribeOnOperator.prototype.call = function (subscriber, source) {\n        return new SubscribeOnObservable_1.SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);\n    };\n    return SubscribeOnOperator;\n}());\n//# sourceMappingURL=subscribeOn.js.map","\"use strict\";\nvar subscribeOn_1 = require('../operators/subscribeOn');\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nfunction subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return subscribeOn_1.subscribeOn(scheduler, delay)(this);\n}\nexports.subscribeOn = subscribeOn;\n//# sourceMappingURL=subscribeOn.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar subscribeOn_1 = require('../../operator/subscribeOn');\nObservable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;\n//# sourceMappingURL=subscribeOn.js.map","\"use strict\";\nvar startWith_1 = require('../operators/startWith');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return startWith_1.startWith.apply(void 0, array)(this);\n}\nexports.startWith = startWith;\n//# sourceMappingURL=startWith.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar startWith_1 = require('../../operator/startWith');\nObservable_1.Observable.prototype.startWith = startWith_1.startWith;\n//# sourceMappingURL=startWith.js.map","\"use strict\";\nvar skipWhile_1 = require('../operators/skipWhile');\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nfunction skipWhile(predicate) {\n    return skipWhile_1.skipWhile(predicate)(this);\n}\nexports.skipWhile = skipWhile;\n//# sourceMappingURL=skipWhile.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipWhile_1 = require('../../operator/skipWhile');\nObservable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;\n//# sourceMappingURL=skipWhile.js.map","\"use strict\";\nvar skipUntil_1 = require('../operators/skipUntil');\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nfunction skipUntil(notifier) {\n    return skipUntil_1.skipUntil(notifier)(this);\n}\nexports.skipUntil = skipUntil;\n//# sourceMappingURL=skipUntil.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipUntil_1 = require('../../operator/skipUntil');\nObservable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;\n//# sourceMappingURL=skipUntil.js.map","\"use strict\";\nvar skipLast_1 = require('../operators/skipLast');\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nfunction skipLast(count) {\n    return skipLast_1.skipLast(count)(this);\n}\nexports.skipLast = skipLast;\n//# sourceMappingURL=skipLast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipLast_1 = require('../../operator/skipLast');\nObservable_1.Observable.prototype.skipLast = skipLast_1.skipLast;\n//# sourceMappingURL=skipLast.js.map","\"use strict\";\nvar skip_1 = require('../operators/skip');\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nfunction skip(count) {\n    return skip_1.skip(count)(this);\n}\nexports.skip = skip;\n//# sourceMappingURL=skip.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skip_1 = require('../../operator/skip');\nObservable_1.Observable.prototype.skip = skip_1.skip;\n//# sourceMappingURL=skip.js.map","\"use strict\";\nvar single_1 = require('../operators/single');\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nfunction single(predicate) {\n    return single_1.single(predicate)(this);\n}\nexports.single = single;\n//# sourceMappingURL=single.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar single_1 = require('../../operator/single');\nObservable_1.Observable.prototype.single = single_1.single;\n//# sourceMappingURL=single.js.map","\"use strict\";\nvar shareReplay_1 = require('../operators/shareReplay');\n/**\n * @method shareReplay\n * @owner Observable\n */\nfunction shareReplay(bufferSize, windowTime, scheduler) {\n    return shareReplay_1.shareReplay(bufferSize, windowTime, scheduler)(this);\n}\nexports.shareReplay = shareReplay;\n;\n//# sourceMappingURL=shareReplay.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar shareReplay_1 = require('../../operator/shareReplay');\nObservable_1.Observable.prototype.shareReplay = shareReplay_1.shareReplay;\n//# sourceMappingURL=shareReplay.js.map","\"use strict\";\nvar share_1 = require('../operators/share');\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return share_1.share()(this);\n}\nexports.share = share;\n;\n//# sourceMappingURL=share.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar share_1 = require('../../operator/share');\nObservable_1.Observable.prototype.share = share_1.share;\n//# sourceMappingURL=share.js.map","\"use strict\";\nvar sequenceEqual_1 = require('../operators/sequenceEqual');\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nfunction sequenceEqual(compareTo, comparor) {\n    return sequenceEqual_1.sequenceEqual(compareTo, comparor)(this);\n}\nexports.sequenceEqual = sequenceEqual;\n//# sourceMappingURL=sequenceEqual.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sequenceEqual_1 = require('../../operator/sequenceEqual');\nObservable_1.Observable.prototype.sequenceEqual = sequenceEqual_1.sequenceEqual;\n//# sourceMappingURL=sequenceEqual.js.map","\"use strict\";\nvar scan_1 = require('../operators/scan');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    if (arguments.length >= 2) {\n        return scan_1.scan(accumulator, seed)(this);\n    }\n    return scan_1.scan(accumulator)(this);\n}\nexports.scan = scan;\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar scan_1 = require('../../operator/scan');\nObservable_1.Observable.prototype.scan = scan_1.scan;\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar sampleTime_1 = require('../operators/sampleTime');\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nfunction sampleTime(period, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return sampleTime_1.sampleTime(period, scheduler)(this);\n}\nexports.sampleTime = sampleTime;\n//# sourceMappingURL=sampleTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sampleTime_1 = require('../../operator/sampleTime');\nObservable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;\n//# sourceMappingURL=sampleTime.js.map","\"use strict\";\nvar sample_1 = require('../operators/sample');\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nfunction sample(notifier) {\n    return sample_1.sample(notifier)(this);\n}\nexports.sample = sample;\n//# sourceMappingURL=sample.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sample_1 = require('../../operator/sample');\nObservable_1.Observable.prototype.sample = sample_1.sample;\n//# sourceMappingURL=sample.js.map","\"use strict\";\nvar retryWhen_1 = require('../operators/retryWhen');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nfunction retryWhen(notifier) {\n    return retryWhen_1.retryWhen(notifier)(this);\n}\nexports.retryWhen = retryWhen;\n//# sourceMappingURL=retryWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar retryWhen_1 = require('../../operator/retryWhen');\nObservable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;\n//# sourceMappingURL=retryWhen.js.map","\"use strict\";\nvar retry_1 = require('../operators/retry');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nfunction retry(count) {\n    if (count === void 0) { count = -1; }\n    return retry_1.retry(count)(this);\n}\nexports.retry = retry;\n//# sourceMappingURL=retry.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar retry_1 = require('../../operator/retry');\nObservable_1.Observable.prototype.retry = retry_1.retry;\n//# sourceMappingURL=retry.js.map","\"use strict\";\nvar repeatWhen_1 = require('../operators/repeatWhen');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n    return repeatWhen_1.repeatWhen(notifier)(this);\n}\nexports.repeatWhen = repeatWhen;\n//# sourceMappingURL=repeatWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar repeatWhen_1 = require('../../operator/repeatWhen');\nObservable_1.Observable.prototype.repeatWhen = repeatWhen_1.repeatWhen;\n//# sourceMappingURL=repeatWhen.js.map","\"use strict\";\nvar repeat_1 = require('../operators/repeat');\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nfunction repeat(count) {\n    if (count === void 0) { count = -1; }\n    return repeat_1.repeat(count)(this);\n}\nexports.repeat = repeat;\n//# sourceMappingURL=repeat.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar repeat_1 = require('../../operator/repeat');\nObservable_1.Observable.prototype.repeat = repeat_1.repeat;\n//# sourceMappingURL=repeat.js.map","\"use strict\";\nvar reduce_1 = require('../operators/reduce');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nfunction reduce(accumulator, seed) {\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        return reduce_1.reduce(accumulator, seed)(this);\n    }\n    return reduce_1.reduce(accumulator)(this);\n}\nexports.reduce = reduce;\n//# sourceMappingURL=reduce.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar reduce_1 = require('../../operator/reduce');\nObservable_1.Observable.prototype.reduce = reduce_1.reduce;\n//# sourceMappingURL=reduce.js.map","\"use strict\";\nvar race_1 = require('../operators/race');\n// NOTE: to support backwards compatability with 5.4.* and lower\nvar race_2 = require('../observable/race');\nexports.raceStatic = race_2.race;\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return race_1.race.apply(void 0, observables)(this);\n}\nexports.race = race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar race_1 = require('../../operator/race');\nObservable_1.Observable.prototype.race = race_1.race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar publishLast_1 = require('../operators/publishLast');\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nfunction publishLast() {\n    //TODO(benlesh): correct type-flow through here.\n    return publishLast_1.publishLast()(this);\n}\nexports.publishLast = publishLast;\n//# sourceMappingURL=publishLast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishLast_1 = require('../../operator/publishLast');\nObservable_1.Observable.prototype.publishLast = publishLast_1.publishLast;\n//# sourceMappingURL=publishLast.js.map","\"use strict\";\nvar publishReplay_1 = require('../operators/publishReplay');\n/* tslint:enable:max-line-length */\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nfunction publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n    return publishReplay_1.publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler)(this);\n}\nexports.publishReplay = publishReplay;\n//# sourceMappingURL=publishReplay.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishReplay_1 = require('../../operator/publishReplay');\nObservable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;\n//# sourceMappingURL=publishReplay.js.map","\"use strict\";\nvar publishBehavior_1 = require('../operators/publishBehavior');\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nfunction publishBehavior(value) {\n    return publishBehavior_1.publishBehavior(value)(this);\n}\nexports.publishBehavior = publishBehavior;\n//# sourceMappingURL=publishBehavior.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishBehavior_1 = require('../../operator/publishBehavior');\nObservable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;\n//# sourceMappingURL=publishBehavior.js.map","\"use strict\";\nvar publish_1 = require('../operators/publish');\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return publish_1.publish(selector)(this);\n}\nexports.publish = publish;\n//# sourceMappingURL=publish.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publish_1 = require('../../operator/publish');\nObservable_1.Observable.prototype.publish = publish_1.publish;\n//# sourceMappingURL=publish.js.map","\"use strict\";\nvar pluck_1 = require('../operators/pluck');\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nfunction pluck() {\n    var properties = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        properties[_i - 0] = arguments[_i];\n    }\n    return pluck_1.pluck.apply(void 0, properties)(this);\n}\nexports.pluck = pluck;\n//# sourceMappingURL=pluck.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pluck_1 = require('../../operator/pluck');\nObservable_1.Observable.prototype.pluck = pluck_1.pluck;\n//# sourceMappingURL=pluck.js.map","\"use strict\";\nfunction not(pred, thisArg) {\n    function notPred() {\n        return !(notPred.pred.apply(notPred.thisArg, arguments));\n    }\n    notPred.pred = pred;\n    notPred.thisArg = thisArg;\n    return notPred;\n}\nexports.not = not;\n//# sourceMappingURL=not.js.map","\"use strict\";\nvar partition_1 = require('../operators/partition');\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nfunction partition(predicate, thisArg) {\n    return partition_1.partition(predicate, thisArg)(this);\n}\nexports.partition = partition;\n//# sourceMappingURL=partition.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar partition_1 = require('../../operator/partition');\nObservable_1.Observable.prototype.partition = partition_1.partition;\n//# sourceMappingURL=partition.js.map","\"use strict\";\nvar pairwise_1 = require('../operators/pairwise');\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nfunction pairwise() {\n    return pairwise_1.pairwise()(this);\n}\nexports.pairwise = pairwise;\n//# sourceMappingURL=pairwise.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pairwise_1 = require('../../operator/pairwise');\nObservable_1.Observable.prototype.pairwise = pairwise_1.pairwise;\n//# sourceMappingURL=pairwise.js.map","\"use strict\";\nvar onErrorResumeNext_1 = require('../operators/onErrorResumeNext');\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nfunction onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    return onErrorResumeNext_1.onErrorResumeNext.apply(void 0, nextSources)(this);\n}\nexports.onErrorResumeNext = onErrorResumeNext;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar onErrorResumeNext_1 = require('../../operator/onErrorResumeNext');\nObservable_1.Observable.prototype.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar observeOn_1 = require('../operators/observeOn');\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return observeOn_1.observeOn(scheduler, delay)(this);\n}\nexports.observeOn = observeOn;\n//# sourceMappingURL=observeOn.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar observeOn_1 = require('../../operator/observeOn');\nObservable_1.Observable.prototype.observeOn = observeOn_1.observeOn;\n//# sourceMappingURL=observeOn.js.map","\"use strict\";\nvar multicast_1 = require('../operators/multicast');\n/* tslint:enable:max-line-length */\n/**\n * Allows source Observable to be subscribed only once with a Subject of choice,\n * while still sharing its values between multiple subscribers.\n *\n * <span class=\"informal\">Subscribe to Observable once, but send its values to multiple subscribers.</span>\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * `multicast` is an operator that works in two modes.\n *\n * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject\n * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be\n * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that\n * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when\n * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription\n * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,\n * even though usually it would send a request per every subscriber. Since it sends a request at the moment of\n * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.\n *\n * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,\n * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source\n * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,\n * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count\n * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least\n * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a\n * ConnectableObservable, use `refCount`.\n *\n * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.\n * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable\n * as well, which should be the input stream modified by any operators you want. Note that in this\n * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If\n * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.\n * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,\n * if inside the selector function you subscribe to the input Observable multiple times, actual source stream\n * will be subscribed only once. So if you have a chain of operators that use some Observable many times,\n * but you want to subscribe to that Observable only once, this is the mode you would use.\n *\n * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the\n * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject\n * has some special properties, Observable returned by `multicast` will have them as well. If you want to use\n * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},\n * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},\n * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually\n * just wrappers around `multicast`, with a specific Subject hardcoded inside.\n *\n * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,\n * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.\n *\n * @example <caption>Use ConnectableObservable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const connectableSeconds = seconds.multicast(new Subject());\n *\n * connectableSeconds.subscribe(value => console.log('first: ' + value));\n * connectableSeconds.subscribe(value => console.log('second: ' + value));\n *\n * // At this point still nothing happens, even though we subscribed twice.\n *\n * connectableSeconds.connect();\n *\n * // From now on `seconds` are being logged to the console,\n * // twice per every second. `seconds` Observable was however only subscribed once,\n * // so under the hood Observable.interval had only one clock started.\n *\n * @example <caption>Use selector</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds\n *     .multicast(\n *         () => new Subject(),\n *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.\n *                                         // Because we are inside selector, `seconds` is subscribed once,\n *     )                                   // thus starting only one clock used internally by Observable.interval.\n *     .subscribe();\n *\n * @see {@link publish}\n * @see {@link publishLast}\n * @see {@link publishBehavior}\n * @see {@link publishReplay}\n * @see {@link share}\n * @see {@link shareReplay}\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through\n * which the source sequence's elements will be multicast to the selector function input Observable or\n * ConnectableObservable returned by the operator.\n * @param {Function} [selector] - Optional selector function that can use the input stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the input source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector\n * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.\n *\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    return multicast_1.multicast(subjectOrSubjectFactory, selector)(this);\n}\nexports.multicast = multicast;\n//# sourceMappingURL=multicast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar multicast_1 = require('../../operator/multicast');\nObservable_1.Observable.prototype.multicast = multicast_1.multicast;\n//# sourceMappingURL=multicast.js.map","\"use strict\";\nvar min_1 = require('../operators/min');\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nfunction min(comparer) {\n    return min_1.min(comparer)(this);\n}\nexports.min = min;\n//# sourceMappingURL=min.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar min_1 = require('../../operator/min');\nObservable_1.Observable.prototype.min = min_1.min;\n//# sourceMappingURL=min.js.map","\"use strict\";\nvar mergeScan_1 = require('../operators/mergeScan');\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nfunction mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeScan_1.mergeScan(accumulator, seed, concurrent)(this);\n}\nexports.mergeScan = mergeScan;\n//# sourceMappingURL=mergeScan.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeScan_1 = require('../../operator/mergeScan');\nObservable_1.Observable.prototype.mergeScan = mergeScan_1.mergeScan;\n//# sourceMappingURL=mergeScan.js.map","\"use strict\";\nvar mergeMapTo_1 = require('../operators/mergeMapTo');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMapTo_1.mergeMapTo(innerObservable, resultSelector, concurrent)(this);\n}\nexports.mergeMapTo = mergeMapTo;\n//# sourceMappingURL=mergeMapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeMapTo_1 = require('../../operator/mergeMapTo');\nObservable_1.Observable.prototype.flatMapTo = mergeMapTo_1.mergeMapTo;\nObservable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;\n//# sourceMappingURL=mergeMapTo.js.map","\"use strict\";\nvar mergeMap_1 = require('../operators/mergeMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMap_1.mergeMap(project, resultSelector, concurrent)(this);\n}\nexports.mergeMap = mergeMap;\n//# sourceMappingURL=mergeMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeMap_1 = require('../../operator/mergeMap');\nObservable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;\nObservable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;\n//# sourceMappingURL=mergeMap.js.map","\"use strict\";\nvar mergeAll_1 = require('../operators/mergeAll');\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeAll_1.mergeAll(concurrent)(this);\n}\nexports.mergeAll = mergeAll;\n//# sourceMappingURL=mergeAll.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeAll_1 = require('../../operator/mergeAll');\nObservable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;\n//# sourceMappingURL=mergeAll.js.map","\"use strict\";\nvar merge_1 = require('../operators/merge');\nvar merge_2 = require('../observable/merge');\nexports.mergeStatic = merge_2.merge;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return merge_1.merge.apply(void 0, observables)(this);\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar merge_1 = require('../../operator/merge');\nObservable_1.Observable.prototype.merge = merge_1.merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar max_1 = require('../operators/max');\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nfunction max(comparer) {\n    return max_1.max(comparer)(this);\n}\nexports.max = max;\n//# sourceMappingURL=max.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar max_1 = require('../../operator/max');\nObservable_1.Observable.prototype.max = max_1.max;\n//# sourceMappingURL=max.js.map","\"use strict\";\nvar materialize_1 = require('../operators/materialize');\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nfunction materialize() {\n    return materialize_1.materialize()(this);\n}\nexports.materialize = materialize;\n//# sourceMappingURL=materialize.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar materialize_1 = require('../../operator/materialize');\nObservable_1.Observable.prototype.materialize = materialize_1.materialize;\n//# sourceMappingURL=materialize.js.map","\"use strict\";\nvar mapTo_1 = require('../operators/mapTo');\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nfunction mapTo(value) {\n    return mapTo_1.mapTo(value)(this);\n}\nexports.mapTo = mapTo;\n//# sourceMappingURL=mapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mapTo_1 = require('../../operator/mapTo');\nObservable_1.Observable.prototype.mapTo = mapTo_1.mapTo;\n//# sourceMappingURL=mapTo.js.map","\"use strict\";\nvar map_1 = require('../operators/map');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return map_1.map(project, thisArg)(this);\n}\nexports.map = map;\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar map_1 = require('../../operator/map');\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar every_1 = require('../operators/every');\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nfunction every(predicate, thisArg) {\n    return every_1.every(predicate, thisArg)(this);\n}\nexports.every = every;\n//# sourceMappingURL=every.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar every_1 = require('../../operator/every');\nObservable_1.Observable.prototype.every = every_1.every;\n//# sourceMappingURL=every.js.map","\"use strict\";\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nfunction letProto(func) {\n    return func(this);\n}\nexports.letProto = letProto;\n//# sourceMappingURL=let.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar let_1 = require('../../operator/let');\nObservable_1.Observable.prototype.let = let_1.letProto;\nObservable_1.Observable.prototype.letBind = let_1.letProto;\n//# sourceMappingURL=let.js.map","\"use strict\";\nvar last_1 = require('../operators/last');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nfunction last(predicate, resultSelector, defaultValue) {\n    return last_1.last(predicate, resultSelector, defaultValue)(this);\n}\nexports.last = last;\n//# sourceMappingURL=last.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar last_1 = require('../../operator/last');\nObservable_1.Observable.prototype.last = last_1.last;\n//# sourceMappingURL=last.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar auditTime_1 = require('../operators/auditTime');\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nfunction auditTime(duration, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return auditTime_1.auditTime(duration, scheduler)(this);\n}\nexports.auditTime = auditTime;\n//# sourceMappingURL=auditTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar auditTime_1 = require('../../operator/auditTime');\nObservable_1.Observable.prototype.auditTime = auditTime_1.auditTime;\n//# sourceMappingURL=auditTime.js.map","\"use strict\";\nvar audit_1 = require('../operators/audit');\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nfunction audit(durationSelector) {\n    return audit_1.audit(durationSelector)(this);\n}\nexports.audit = audit;\n//# sourceMappingURL=audit.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar audit_1 = require('../../operator/audit');\nObservable_1.Observable.prototype.audit = audit_1.audit;\n//# sourceMappingURL=audit.js.map","\"use strict\";\nvar isEmpty_1 = require('../operators/isEmpty');\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nfunction isEmpty() {\n    return isEmpty_1.isEmpty()(this);\n}\nexports.isEmpty = isEmpty;\n//# sourceMappingURL=isEmpty.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar isEmpty_1 = require('../../operator/isEmpty');\nObservable_1.Observable.prototype.isEmpty = isEmpty_1.isEmpty;\n//# sourceMappingURL=isEmpty.js.map","\"use strict\";\nvar ignoreElements_1 = require('../operators/ignoreElements');\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nfunction ignoreElements() {\n    return ignoreElements_1.ignoreElements()(this);\n}\nexports.ignoreElements = ignoreElements;\n;\n//# sourceMappingURL=ignoreElements.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar ignoreElements_1 = require('../../operator/ignoreElements');\nObservable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;\n//# sourceMappingURL=ignoreElements.js.map","\"use strict\";\nvar FastMap = (function () {\n    function FastMap() {\n        this.values = {};\n    }\n    FastMap.prototype.delete = function (key) {\n        this.values[key] = null;\n        return true;\n    };\n    FastMap.prototype.set = function (key, value) {\n        this.values[key] = value;\n        return this;\n    };\n    FastMap.prototype.get = function (key) {\n        return this.values[key];\n    };\n    FastMap.prototype.forEach = function (cb, thisArg) {\n        var values = this.values;\n        for (var key in values) {\n            if (values.hasOwnProperty(key) && values[key] !== null) {\n                cb.call(thisArg, values[key], key);\n            }\n        }\n    };\n    FastMap.prototype.clear = function () {\n        this.values = {};\n    };\n    return FastMap;\n}());\nexports.FastMap = FastMap;\n//# sourceMappingURL=FastMap.js.map","\"use strict\";\nvar MapPolyfill = (function () {\n    function MapPolyfill() {\n        this.size = 0;\n        this._values = [];\n        this._keys = [];\n    }\n    MapPolyfill.prototype.get = function (key) {\n        var i = this._keys.indexOf(key);\n        return i === -1 ? undefined : this._values[i];\n    };\n    MapPolyfill.prototype.set = function (key, value) {\n        var i = this._keys.indexOf(key);\n        if (i === -1) {\n            this._keys.push(key);\n            this._values.push(value);\n            this.size++;\n        }\n        else {\n            this._values[i] = value;\n        }\n        return this;\n    };\n    MapPolyfill.prototype.delete = function (key) {\n        var i = this._keys.indexOf(key);\n        if (i === -1) {\n            return false;\n        }\n        this._values.splice(i, 1);\n        this._keys.splice(i, 1);\n        this.size--;\n        return true;\n    };\n    MapPolyfill.prototype.clear = function () {\n        this._keys.length = 0;\n        this._values.length = 0;\n        this.size = 0;\n    };\n    MapPolyfill.prototype.forEach = function (cb, thisArg) {\n        for (var i = 0; i < this.size; i++) {\n            cb.call(thisArg, this._values[i], this._keys[i]);\n        }\n    };\n    return MapPolyfill;\n}());\nexports.MapPolyfill = MapPolyfill;\n//# sourceMappingURL=MapPolyfill.js.map","\"use strict\";\nvar root_1 = require('./root');\nvar MapPolyfill_1 = require('./MapPolyfill');\nexports.Map = root_1.root.Map || (function () { return MapPolyfill_1.MapPolyfill; })();\n//# sourceMappingURL=Map.js.map","\"use strict\";\nvar groupBy_1 = require('../operators/groupBy');\nexports.GroupedObservable = groupBy_1.GroupedObservable;\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nfunction groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return groupBy_1.groupBy(keySelector, elementSelector, durationSelector, subjectSelector)(this);\n}\nexports.groupBy = groupBy;\n//# sourceMappingURL=groupBy.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar groupBy_1 = require('../../operator/groupBy');\nObservable_1.Observable.prototype.groupBy = groupBy_1.groupBy;\n//# sourceMappingURL=groupBy.js.map","\"use strict\";\nvar first_1 = require('../operators/first');\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nfunction first(predicate, resultSelector, defaultValue) {\n    return first_1.first(predicate, resultSelector, defaultValue)(this);\n}\nexports.first = first;\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar first_1 = require('../../operator/first');\nObservable_1.Observable.prototype.first = first_1.first;\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar findIndex_1 = require('../operators/findIndex');\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nfunction findIndex(predicate, thisArg) {\n    return findIndex_1.findIndex(predicate, thisArg)(this);\n}\nexports.findIndex = findIndex;\n//# sourceMappingURL=findIndex.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar findIndex_1 = require('../../operator/findIndex');\nObservable_1.Observable.prototype.findIndex = findIndex_1.findIndex;\n//# sourceMappingURL=findIndex.js.map","\"use strict\";\nvar find_1 = require('../operators/find');\n/* tslint:enable:max-line-length */\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nfunction find(predicate, thisArg) {\n    return find_1.find(predicate, thisArg)(this);\n}\nexports.find = find;\n//# sourceMappingURL=find.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar find_1 = require('../../operator/find');\nObservable_1.Observable.prototype.find = find_1.find;\n//# sourceMappingURL=find.js.map","\"use strict\";\nvar finalize_1 = require('../operators/finalize');\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nfunction _finally(callback) {\n    return finalize_1.finalize(callback)(this);\n}\nexports._finally = _finally;\n//# sourceMappingURL=finally.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar finally_1 = require('../../operator/finally');\nObservable_1.Observable.prototype.finally = finally_1._finally;\nObservable_1.Observable.prototype._finally = finally_1._finally;\n//# sourceMappingURL=finally.js.map","\"use strict\";\nvar filter_1 = require('../operators/filter');\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return filter_1.filter(predicate, thisArg)(this);\n}\nexports.filter = filter;\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar filter_1 = require('../../operator/filter');\nObservable_1.Observable.prototype.filter = filter_1.filter;\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar elementAt_1 = require('../operators/elementAt');\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nfunction elementAt(index, defaultValue) {\n    return elementAt_1.elementAt(index, defaultValue)(this);\n}\nexports.elementAt = elementAt;\n//# sourceMappingURL=elementAt.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar elementAt_1 = require('../../operator/elementAt');\nObservable_1.Observable.prototype.elementAt = elementAt_1.elementAt;\n//# sourceMappingURL=elementAt.js.map","\"use strict\";\nvar expand_1 = require('../operators/expand');\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nfunction expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (scheduler === void 0) { scheduler = undefined; }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return expand_1.expand(project, concurrent, scheduler)(this);\n}\nexports.expand = expand;\n//# sourceMappingURL=expand.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar expand_1 = require('../../operator/expand');\nObservable_1.Observable.prototype.expand = expand_1.expand;\n//# sourceMappingURL=expand.js.map","\"use strict\";\nvar exhaustMap_1 = require('../operators/exhaustMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nfunction exhaustMap(project, resultSelector) {\n    return exhaustMap_1.exhaustMap(project, resultSelector)(this);\n}\nexports.exhaustMap = exhaustMap;\n//# sourceMappingURL=exhaustMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar exhaustMap_1 = require('../../operator/exhaustMap');\nObservable_1.Observable.prototype.exhaustMap = exhaustMap_1.exhaustMap;\n//# sourceMappingURL=exhaustMap.js.map","\"use strict\";\nvar exhaust_1 = require('../operators/exhaust');\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nfunction exhaust() {\n    return exhaust_1.exhaust()(this);\n}\nexports.exhaust = exhaust;\n//# sourceMappingURL=exhaust.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar exhaust_1 = require('../../operator/exhaust');\nObservable_1.Observable.prototype.exhaust = exhaust_1.exhaust;\n//# sourceMappingURL=exhaust.js.map","\"use strict\";\nvar tap_1 = require('../operators/tap');\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nfunction _do(nextOrObserver, error, complete) {\n    return tap_1.tap(nextOrObserver, error, complete)(this);\n}\nexports._do = _do;\n//# sourceMappingURL=do.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar do_1 = require('../../operator/do');\nObservable_1.Observable.prototype.do = do_1._do;\nObservable_1.Observable.prototype._do = do_1._do;\n//# sourceMappingURL=do.js.map","\"use strict\";\nvar distinctUntilKeyChanged_1 = require('../operators/distinctUntilKeyChanged');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nfunction distinctUntilKeyChanged(key, compare) {\n    return distinctUntilKeyChanged_1.distinctUntilKeyChanged(key, compare)(this);\n}\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged;\n//# sourceMappingURL=distinctUntilKeyChanged.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinctUntilKeyChanged_1 = require('../../operator/distinctUntilKeyChanged');\nObservable_1.Observable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;\n//# sourceMappingURL=distinctUntilKeyChanged.js.map","\"use strict\";\nvar distinctUntilChanged_1 = require('../operators/distinctUntilChanged');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nfunction distinctUntilChanged(compare, keySelector) {\n    return distinctUntilChanged_1.distinctUntilChanged(compare, keySelector)(this);\n}\nexports.distinctUntilChanged = distinctUntilChanged;\n//# sourceMappingURL=distinctUntilChanged.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinctUntilChanged_1 = require('../../operator/distinctUntilChanged');\nObservable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;\n//# sourceMappingURL=distinctUntilChanged.js.map","\"use strict\";\nvar root_1 = require('./root');\nfunction minimalSetImpl() {\n    // THIS IS NOT a full impl of Set, this is just the minimum\n    // bits of functionality we need for this library.\n    return (function () {\n        function MinimalSet() {\n            this._values = [];\n        }\n        MinimalSet.prototype.add = function (value) {\n            if (!this.has(value)) {\n                this._values.push(value);\n            }\n        };\n        MinimalSet.prototype.has = function (value) {\n            return this._values.indexOf(value) !== -1;\n        };\n        Object.defineProperty(MinimalSet.prototype, \"size\", {\n            get: function () {\n                return this._values.length;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MinimalSet.prototype.clear = function () {\n            this._values.length = 0;\n        };\n        return MinimalSet;\n    }());\n}\nexports.minimalSetImpl = minimalSetImpl;\nexports.Set = root_1.root.Set || minimalSetImpl();\n//# sourceMappingURL=Set.js.map","\"use strict\";\nvar distinct_1 = require('../operators/distinct');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nfunction distinct(keySelector, flushes) {\n    return distinct_1.distinct(keySelector, flushes)(this);\n}\nexports.distinct = distinct;\n//# sourceMappingURL=distinct.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinct_1 = require('../../operator/distinct');\nObservable_1.Observable.prototype.distinct = distinct_1.distinct;\n//# sourceMappingURL=distinct.js.map","\"use strict\";\nvar delayWhen_1 = require('../operators/delayWhen');\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n    return delayWhen_1.delayWhen(delayDurationSelector, subscriptionDelay)(this);\n}\nexports.delayWhen = delayWhen;\n//# sourceMappingURL=delayWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar delayWhen_1 = require('../../operator/delayWhen');\nObservable_1.Observable.prototype.delayWhen = delayWhen_1.delayWhen;\n//# sourceMappingURL=delayWhen.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar delay_1 = require('../operators/delay');\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nfunction delay(delay, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return delay_1.delay(delay, scheduler)(this);\n}\nexports.delay = delay;\n//# sourceMappingURL=delay.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar delay_1 = require('../../operator/delay');\nObservable_1.Observable.prototype.delay = delay_1.delay;\n//# sourceMappingURL=delay.js.map","\"use strict\";\nvar defaultIfEmpty_1 = require('../operators/defaultIfEmpty');\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nfunction defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) { defaultValue = null; }\n    return defaultIfEmpty_1.defaultIfEmpty(defaultValue)(this);\n}\nexports.defaultIfEmpty = defaultIfEmpty;\n//# sourceMappingURL=defaultIfEmpty.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar defaultIfEmpty_1 = require('../../operator/defaultIfEmpty');\nObservable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;\n//# sourceMappingURL=defaultIfEmpty.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar debounceTime_1 = require('../operators/debounceTime');\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nfunction debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return debounceTime_1.debounceTime(dueTime, scheduler)(this);\n}\nexports.debounceTime = debounceTime;\n//# sourceMappingURL=debounceTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar debounceTime_1 = require('../../operator/debounceTime');\nObservable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;\n//# sourceMappingURL=debounceTime.js.map","\"use strict\";\nvar debounce_1 = require('../operators/debounce');\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nfunction debounce(durationSelector) {\n    return debounce_1.debounce(durationSelector)(this);\n}\nexports.debounce = debounce;\n//# sourceMappingURL=debounce.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar debounce_1 = require('../../operator/debounce');\nObservable_1.Observable.prototype.debounce = debounce_1.debounce;\n//# sourceMappingURL=debounce.js.map","\"use strict\";\nvar dematerialize_1 = require('../operators/dematerialize');\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nfunction dematerialize() {\n    return dematerialize_1.dematerialize()(this);\n}\nexports.dematerialize = dematerialize;\n//# sourceMappingURL=dematerialize.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar dematerialize_1 = require('../../operator/dematerialize');\nObservable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;\n//# sourceMappingURL=dematerialize.js.map","\"use strict\";\nvar count_1 = require('../operators/count');\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nfunction count(predicate) {\n    return count_1.count(predicate)(this);\n}\nexports.count = count;\n//# sourceMappingURL=count.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar count_1 = require('../../operator/count');\nObservable_1.Observable.prototype.count = count_1.count;\n//# sourceMappingURL=count.js.map","\"use strict\";\nvar concatMapTo_1 = require('../operators/concatMapTo');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nfunction concatMapTo(innerObservable, resultSelector) {\n    return concatMapTo_1.concatMapTo(innerObservable, resultSelector)(this);\n}\nexports.concatMapTo = concatMapTo;\n//# sourceMappingURL=concatMapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatMapTo_1 = require('../../operator/concatMapTo');\nObservable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;\n//# sourceMappingURL=concatMapTo.js.map","\"use strict\";\nvar concatMap_1 = require('../operators/concatMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nfunction concatMap(project, resultSelector) {\n    return concatMap_1.concatMap(project, resultSelector)(this);\n}\nexports.concatMap = concatMap;\n//# sourceMappingURL=concatMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatMap_1 = require('../../operator/concatMap');\nObservable_1.Observable.prototype.concatMap = concatMap_1.concatMap;\n//# sourceMappingURL=concatMap.js.map","\"use strict\";\nvar concatAll_1 = require('../operators/concatAll');\n/* tslint:enable:max-line-length */\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n    return concatAll_1.concatAll()(this);\n}\nexports.concatAll = concatAll;\n//# sourceMappingURL=concatAll.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatAll_1 = require('../../operator/concatAll');\nObservable_1.Observable.prototype.concatAll = concatAll_1.concatAll;\n//# sourceMappingURL=concatAll.js.map","\"use strict\";\nvar concat_1 = require('../operators/concat');\nvar concat_2 = require('../observable/concat');\nexports.concatStatic = concat_2.concat;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return concat_1.concat.apply(void 0, observables)(this);\n}\nexports.concat = concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concat_1 = require('../../operator/concat');\nObservable_1.Observable.prototype.concat = concat_1.concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar combineLatest_1 = require('../operators/combineLatest');\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return combineLatest_1.combineLatest.apply(void 0, observables)(this);\n}\nexports.combineLatest = combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineLatest_1 = require('../../operator/combineLatest');\nObservable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar combineAll_1 = require('../operators/combineAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nfunction combineAll(project) {\n    return combineAll_1.combineAll(project)(this);\n}\nexports.combineAll = combineAll;\n//# sourceMappingURL=combineAll.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineAll_1 = require('../../operator/combineAll');\nObservable_1.Observable.prototype.combineAll = combineAll_1.combineAll;\n//# sourceMappingURL=combineAll.js.map","\"use strict\";\nvar catchError_1 = require('../operators/catchError');\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nfunction _catch(selector) {\n    return catchError_1.catchError(selector)(this);\n}\nexports._catch = _catch;\n//# sourceMappingURL=catch.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar catch_1 = require('../../operator/catch');\nObservable_1.Observable.prototype.catch = catch_1._catch;\nObservable_1.Observable.prototype._catch = catch_1._catch;\n//# sourceMappingURL=catch.js.map","\"use strict\";\nvar bufferWhen_1 = require('../operators/bufferWhen');\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nfunction bufferWhen(closingSelector) {\n    return bufferWhen_1.bufferWhen(closingSelector)(this);\n}\nexports.bufferWhen = bufferWhen;\n//# sourceMappingURL=bufferWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferWhen_1 = require('../../operator/bufferWhen');\nObservable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;\n//# sourceMappingURL=bufferWhen.js.map","\"use strict\";\nvar bufferToggle_1 = require('../operators/bufferToggle');\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nfunction bufferToggle(openings, closingSelector) {\n    return bufferToggle_1.bufferToggle(openings, closingSelector)(this);\n}\nexports.bufferToggle = bufferToggle;\n//# sourceMappingURL=bufferToggle.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferToggle_1 = require('../../operator/bufferToggle');\nObservable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;\n//# sourceMappingURL=bufferToggle.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar isScheduler_1 = require('../util/isScheduler');\nvar bufferTime_1 = require('../operators/bufferTime');\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nfunction bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async_1.async;\n    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return bufferTime_1.bufferTime(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this);\n}\nexports.bufferTime = bufferTime;\n//# sourceMappingURL=bufferTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferTime_1 = require('../../operator/bufferTime');\nObservable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;\n//# sourceMappingURL=bufferTime.js.map","\"use strict\";\nvar bufferCount_1 = require('../operators/bufferCount');\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nfunction bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) { startBufferEvery = null; }\n    return bufferCount_1.bufferCount(bufferSize, startBufferEvery)(this);\n}\nexports.bufferCount = bufferCount;\n//# sourceMappingURL=bufferCount.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferCount_1 = require('../../operator/bufferCount');\nObservable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;\n//# sourceMappingURL=bufferCount.js.map","\"use strict\";\nvar buffer_1 = require('../operators/buffer');\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nfunction buffer(closingNotifier) {\n    return buffer_1.buffer(closingNotifier)(this);\n}\nexports.buffer = buffer;\n//# sourceMappingURL=buffer.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar buffer_1 = require('../../operator/buffer');\nObservable_1.Observable.prototype.buffer = buffer_1.buffer;\n//# sourceMappingURL=buffer.js.map","\"use strict\";\nvar root_1 = require('./root');\nfunction assignImpl(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    var len = sources.length;\n    for (var i = 0; i < len; i++) {\n        var source = sources[i];\n        for (var k in source) {\n            if (source.hasOwnProperty(k)) {\n                target[k] = source[k];\n            }\n        }\n    }\n    return target;\n}\nexports.assignImpl = assignImpl;\n;\nfunction getAssign(root) {\n    return root.Object.assign || assignImpl;\n}\nexports.getAssign = getAssign;\nexports.assign = getAssign(root_1.root);\n//# sourceMappingURL=assign.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar QueueScheduler = (function (_super) {\n    __extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        _super.apply(this, arguments);\n    }\n    return QueueScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.QueueScheduler = QueueScheduler;\n//# sourceMappingURL=QueueScheduler.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar QueueAction = (function (_super) {\n    __extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return (delay > 0 || this.closed) ?\n            _super.prototype.execute.call(this, state, delay) :\n            this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction_1.AsyncAction));\nexports.QueueAction = QueueAction;\n//# sourceMappingURL=QueueAction.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../../Subject');\nvar Subscriber_1 = require('../../Subscriber');\nvar Observable_1 = require('../../Observable');\nvar Subscription_1 = require('../../Subscription');\nvar root_1 = require('../../util/root');\nvar ReplaySubject_1 = require('../../ReplaySubject');\nvar tryCatch_1 = require('../../util/tryCatch');\nvar errorObject_1 = require('../../util/errorObject');\nvar assign_1 = require('../../util/assign');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar WebSocketSubject = (function (_super) {\n    __extends(WebSocketSubject, _super);\n    function WebSocketSubject(urlConfigOrSource, destination) {\n        if (urlConfigOrSource instanceof Observable_1.Observable) {\n            _super.call(this, destination, urlConfigOrSource);\n        }\n        else {\n            _super.call(this);\n            this.WebSocketCtor = root_1.root.WebSocket;\n            this._output = new Subject_1.Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                this.url = urlConfigOrSource;\n            }\n            else {\n                // WARNING: config object could override important members here.\n                assign_1.assign(this, urlConfigOrSource);\n            }\n            if (!this.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n    }\n    WebSocketSubject.prototype.resultSelector = function (e) {\n        return JSON.parse(e.data);\n    };\n    /**\n     * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n     *\n     * @example <caption>Wraps browser WebSocket</caption>\n     *\n     * let socket$ = Observable.webSocket('ws://localhost:8081');\n     *\n     * socket$.subscribe(\n     *    (msg) => console.log('message received: ' + msg),\n     *    (err) => console.log(err),\n     *    () => console.log('complete')\n     *  );\n     *\n     * socket$.next(JSON.stringify({ op: 'hello' }));\n     *\n     * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n     *\n     * import { w3cwebsocket } from 'websocket';\n     *\n     * let socket$ = Observable.webSocket({\n     *   url: 'ws://localhost:8081',\n     *   WebSocketCtor: w3cwebsocket\n     * });\n     *\n     * socket$.subscribe(\n     *    (msg) => console.log('message received: ' + msg),\n     *    (err) => console.log(err),\n     *    () => console.log('complete')\n     *  );\n     *\n     * socket$.next(JSON.stringify({ op: 'hello' }));\n     *\n     * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n     * @return {WebSocketSubject}\n     * @static true\n     * @name webSocket\n     * @owner Observable\n     */\n    WebSocketSubject.create = function (urlConfigOrSource) {\n        return new WebSocketSubject(urlConfigOrSource);\n    };\n    WebSocketSubject.prototype.lift = function (operator) {\n        var sock = new WebSocketSubject(this, this.destination);\n        sock.operator = operator;\n        return sock;\n    };\n    WebSocketSubject.prototype._resetState = function () {\n        this.socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n        this._output = new Subject_1.Subject();\n    };\n    // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\n        var self = this;\n        return new Observable_1.Observable(function (observer) {\n            var result = tryCatch_1.tryCatch(subMsg)();\n            if (result === errorObject_1.errorObject) {\n                observer.error(errorObject_1.errorObject.e);\n            }\n            else {\n                self.next(result);\n            }\n            var subscription = self.subscribe(function (x) {\n                var result = tryCatch_1.tryCatch(messageFilter)(x);\n                if (result === errorObject_1.errorObject) {\n                    observer.error(errorObject_1.errorObject.e);\n                }\n                else if (result) {\n                    observer.next(x);\n                }\n            }, function (err) { return observer.error(err); }, function () { return observer.complete(); });\n            return function () {\n                var result = tryCatch_1.tryCatch(unsubMsg)();\n                if (result === errorObject_1.errorObject) {\n                    observer.error(errorObject_1.errorObject.e);\n                }\n                else {\n                    self.next(result);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    };\n    WebSocketSubject.prototype._connectSocket = function () {\n        var _this = this;\n        var WebSocketCtor = this.WebSocketCtor;\n        var observer = this._output;\n        var socket = null;\n        try {\n            socket = this.protocol ?\n                new WebSocketCtor(this.url, this.protocol) :\n                new WebSocketCtor(this.url);\n            this.socket = socket;\n            if (this.binaryType) {\n                this.socket.binaryType = this.binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        var subscription = new Subscription_1.Subscription(function () {\n            _this.socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = function (e) {\n            var openObserver = _this.openObserver;\n            if (openObserver) {\n                openObserver.next(e);\n            }\n            var queue = _this.destination;\n            _this.destination = Subscriber_1.Subscriber.create(function (x) { return socket.readyState === 1 && socket.send(x); }, function (e) {\n                var closingObserver = _this.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (e && e.code) {\n                    socket.close(e.code, e.reason);\n                }\n                else {\n                    observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n                        'and an optional reason: { code: number, reason: string }'));\n                }\n                _this._resetState();\n            }, function () {\n                var closingObserver = _this.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                _this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject_1.ReplaySubject) {\n                subscription.add(queue.subscribe(_this.destination));\n            }\n        };\n        socket.onerror = function (e) {\n            _this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = function (e) {\n            _this._resetState();\n            var closeObserver = _this.closeObserver;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = function (e) {\n            var result = tryCatch_1.tryCatch(_this.resultSelector)(e);\n            if (result === errorObject_1.errorObject) {\n                observer.error(errorObject_1.errorObject.e);\n            }\n            else {\n                observer.next(result);\n            }\n        };\n    };\n    WebSocketSubject.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var source = this.source;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this.socket) {\n            this._connectSocket();\n        }\n        var subscription = new Subscription_1.Subscription();\n        subscription.add(this._output.subscribe(subscriber));\n        subscription.add(function () {\n            var socket = _this.socket;\n            if (_this._output.observers.length === 0) {\n                if (socket && socket.readyState === 1) {\n                    socket.close();\n                }\n                _this._resetState();\n            }\n        });\n        return subscription;\n    };\n    WebSocketSubject.prototype.unsubscribe = function () {\n        var _a = this, source = _a.source, socket = _a.socket;\n        if (socket && socket.readyState === 1) {\n            socket.close();\n            this._resetState();\n        }\n        _super.prototype.unsubscribe.call(this);\n        if (!source) {\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n    };\n    return WebSocketSubject;\n}(Subject_1.AnonymousSubject));\nexports.WebSocketSubject = WebSocketSubject;\n//# sourceMappingURL=WebSocketSubject.js.map","\"use strict\";\nvar WebSocketSubject_1 = require('./WebSocketSubject');\nexports.webSocket = WebSocketSubject_1.WebSocketSubject.create;\n//# sourceMappingURL=webSocket.js.map","\"use strict\";\nvar Observable_1 = require('../../../Observable');\nvar webSocket_1 = require('../../../observable/dom/webSocket');\nObservable_1.Observable.webSocket = webSocket_1.webSocket;\n//# sourceMappingURL=webSocket.js.map","\"use strict\";\nvar AjaxObservable_1 = require('./AjaxObservable');\nexports.ajax = AjaxObservable_1.AjaxObservable.create;\n//# sourceMappingURL=ajax.js.map","\"use strict\";\nvar Observable_1 = require('../../../Observable');\nvar ajax_1 = require('../../../observable/dom/ajax');\nObservable_1.Observable.ajax = ajax_1.ajax;\n//# sourceMappingURL=ajax.js.map","\"use strict\";\nvar zip_1 = require('../operators/zip');\nexports.zip = zip_1.zipStatic;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zip_1 = require('../../observable/zip');\nObservable_1.Observable.zip = zip_1.zip;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\nvar isScheduler_1 = require('../util/isScheduler');\nvar isDate_1 = require('../util/isDate');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar TimerObservable = (function (_super) {\n    __extends(TimerObservable, _super);\n    function TimerObservable(dueTime, period, scheduler) {\n        if (dueTime === void 0) { dueTime = 0; }\n        _super.call(this);\n        this.period = -1;\n        this.dueTime = 0;\n        if (isNumeric_1.isNumeric(period)) {\n            this.period = Number(period) < 1 && 1 || Number(period);\n        }\n        else if (isScheduler_1.isScheduler(period)) {\n            scheduler = period;\n        }\n        if (!isScheduler_1.isScheduler(scheduler)) {\n            scheduler = async_1.async;\n        }\n        this.scheduler = scheduler;\n        this.dueTime = isDate_1.isDate(dueTime) ?\n            (+dueTime - this.scheduler.now()) :\n            dueTime;\n    }\n    /**\n     * Creates an Observable that starts emitting after an `initialDelay` and\n     * emits ever increasing numbers after each `period` of time thereafter.\n     *\n     * <span class=\"informal\">Its like {@link interval}, but you can specify when\n     * should the emissions start.</span>\n     *\n     * <img src=\"./img/timer.png\" width=\"100%\">\n     *\n     * `timer` returns an Observable that emits an infinite sequence of ascending\n     * integers, with a constant interval of time, `period` of your choosing\n     * between those emissions. The first emission happens after the specified\n     * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n     * operator uses the `async` IScheduler to provide a notion of time, but you\n     * may pass any IScheduler to it. If `period` is not specified, the output\n     * Observable emits only one value, `0`. Otherwise, it emits an infinite\n     * sequence.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n     * var numbers = Rx.Observable.timer(3000, 1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @example <caption>Emits one number after five seconds</caption>\n     * var numbers = Rx.Observable.timer(5000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link interval}\n     * @see {@link delay}\n     *\n     * @param {number|Date} initialDelay The initial delay time to wait before\n     * emitting the first value of `0`.\n     * @param {number} [period] The period of time between emissions of the\n     * subsequent numbers.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a `0` after the\n     * `initialDelay` and ever increasing numbers after each `period` of time\n     * thereafter.\n     * @static true\n     * @name timer\n     * @owner Observable\n     */\n    TimerObservable.create = function (initialDelay, period, scheduler) {\n        if (initialDelay === void 0) { initialDelay = 0; }\n        return new TimerObservable(initialDelay, period, scheduler);\n    };\n    TimerObservable.dispatch = function (state) {\n        var index = state.index, period = state.period, subscriber = state.subscriber;\n        var action = this;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        else if (period === -1) {\n            return subscriber.complete();\n        }\n        state.index = index + 1;\n        action.schedule(state, period);\n    };\n    TimerObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;\n        return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n            index: index, period: period, subscriber: subscriber\n        });\n    };\n    return TimerObservable;\n}(Observable_1.Observable));\nexports.TimerObservable = TimerObservable;\n//# sourceMappingURL=TimerObservable.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timer_1 = require('../../observable/timer');\nObservable_1.Observable.timer = timer_1.timer;\n//# sourceMappingURL=timer.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ErrorObservable = (function (_super) {\n    __extends(ErrorObservable, _super);\n    function ErrorObservable(error, scheduler) {\n        _super.call(this);\n        this.error = error;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits an error notification.\n     *\n     * <span class=\"informal\">Just emits 'error', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/throw.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the error notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then emit an error.</caption>\n     * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x === 13 ?\n     *     Rx.Observable.throw('Thirteens are bad') :\n     *     Rx.Observable.of('a', 'b', 'c')\n     * );\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link of}\n     *\n     * @param {any} error The particular Error to pass to the error notification.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the error notification.\n     * @return {Observable} An error Observable: emits only the error notification\n     * using the given error argument.\n     * @static true\n     * @name throw\n     * @owner Observable\n     */\n    ErrorObservable.create = function (error, scheduler) {\n        return new ErrorObservable(error, scheduler);\n    };\n    ErrorObservable.dispatch = function (arg) {\n        var error = arg.error, subscriber = arg.subscriber;\n        subscriber.error(error);\n    };\n    ErrorObservable.prototype._subscribe = function (subscriber) {\n        var error = this.error;\n        var scheduler = this.scheduler;\n        subscriber.syncErrorThrowable = true;\n        if (scheduler) {\n            return scheduler.schedule(ErrorObservable.dispatch, 0, {\n                error: error, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.error(error);\n        }\n    };\n    return ErrorObservable;\n}(Observable_1.Observable));\nexports.ErrorObservable = ErrorObservable;\n//# sourceMappingURL=ErrorObservable.js.map","\"use strict\";\nvar ErrorObservable_1 = require('./ErrorObservable');\nexports._throw = ErrorObservable_1.ErrorObservable.create;\n//# sourceMappingURL=throw.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throw_1 = require('../../observable/throw');\nObservable_1.Observable.throw = throw_1._throw;\n//# sourceMappingURL=throw.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar UsingObservable = (function (_super) {\n    __extends(UsingObservable, _super);\n    function UsingObservable(resourceFactory, observableFactory) {\n        _super.call(this);\n        this.resourceFactory = resourceFactory;\n        this.observableFactory = observableFactory;\n    }\n    UsingObservable.create = function (resourceFactory, observableFactory) {\n        return new UsingObservable(resourceFactory, observableFactory);\n    };\n    UsingObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, resourceFactory = _a.resourceFactory, observableFactory = _a.observableFactory;\n        var resource;\n        try {\n            resource = resourceFactory();\n            return new UsingSubscriber(subscriber, resource, observableFactory);\n        }\n        catch (err) {\n            subscriber.error(err);\n        }\n    };\n    return UsingObservable;\n}(Observable_1.Observable));\nexports.UsingObservable = UsingObservable;\nvar UsingSubscriber = (function (_super) {\n    __extends(UsingSubscriber, _super);\n    function UsingSubscriber(destination, resource, observableFactory) {\n        _super.call(this, destination);\n        this.resource = resource;\n        this.observableFactory = observableFactory;\n        destination.add(resource);\n        this.tryUse();\n    }\n    UsingSubscriber.prototype.tryUse = function () {\n        try {\n            var source = this.observableFactory.call(this, this.resource);\n            if (source) {\n                this.add(subscribeToResult_1.subscribeToResult(this, source));\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    return UsingSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=UsingObservable.js.map","\"use strict\";\nvar UsingObservable_1 = require('./UsingObservable');\nexports.using = UsingObservable_1.UsingObservable.create;\n//# sourceMappingURL=using.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar using_1 = require('../../observable/using');\nObservable_1.Observable.using = using_1.using;\n//# sourceMappingURL=using.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar RangeObservable = (function (_super) {\n    __extends(RangeObservable, _super);\n    function RangeObservable(start, count, scheduler) {\n        _super.call(this);\n        this.start = start;\n        this._count = count;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits a sequence of numbers within a specified\n     * range.\n     *\n     * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n     *\n     * <img src=\"./img/range.png\" width=\"100%\">\n     *\n     * `range` operator emits a range of sequential integers, in order, where you\n     * select the `start` of the range and its `length`. By default, uses no\n     * IScheduler and just delivers the notifications synchronously, but may use\n     * an optional IScheduler to regulate those deliveries.\n     *\n     * @example <caption>Emits the numbers 1 to 10</caption>\n     * var numbers = Rx.Observable.range(1, 10);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link interval}\n     *\n     * @param {number} [start=0] The value of the first integer in the sequence.\n     * @param {number} [count=0] The number of sequential integers to generate.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the notifications.\n     * @return {Observable} An Observable of numbers that emits a finite range of\n     * sequential integers.\n     * @static true\n     * @name range\n     * @owner Observable\n     */\n    RangeObservable.create = function (start, count, scheduler) {\n        if (start === void 0) { start = 0; }\n        if (count === void 0) { count = 0; }\n        return new RangeObservable(start, count, scheduler);\n    };\n    RangeObservable.dispatch = function (state) {\n        var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(start);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        state.start = start + 1;\n        this.schedule(state);\n    };\n    RangeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var start = this.start;\n        var count = this._count;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(RangeObservable.dispatch, 0, {\n                index: index, count: count, start: start, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                if (index++ >= count) {\n                    subscriber.complete();\n                    break;\n                }\n                subscriber.next(start++);\n                if (subscriber.closed) {\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return RangeObservable;\n}(Observable_1.Observable));\nexports.RangeObservable = RangeObservable;\n//# sourceMappingURL=RangeObservable.js.map","\"use strict\";\nvar RangeObservable_1 = require('./RangeObservable');\nexports.range = RangeObservable_1.RangeObservable.create;\n//# sourceMappingURL=range.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar range_1 = require('../../observable/range');\nObservable_1.Observable.range = range_1.range;\n//# sourceMappingURL=range.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nfunction dispatch(state) {\n    var obj = state.obj, keys = state.keys, length = state.length, index = state.index, subscriber = state.subscriber;\n    if (index === length) {\n        subscriber.complete();\n        return;\n    }\n    var key = keys[index];\n    subscriber.next([key, obj[key]]);\n    state.index = index + 1;\n    this.schedule(state);\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PairsObservable = (function (_super) {\n    __extends(PairsObservable, _super);\n    function PairsObservable(obj, scheduler) {\n        _super.call(this);\n        this.obj = obj;\n        this.scheduler = scheduler;\n        this.keys = Object.keys(obj);\n    }\n    /**\n     * Convert an object into an observable sequence of [key, value] pairs\n     * using an optional IScheduler to enumerate the object.\n     *\n     * @example <caption>Converts a javascript object to an Observable</caption>\n     * var obj = {\n     *   foo: 42,\n     *   bar: 56,\n     *   baz: 78\n     * };\n     *\n     * var source = Rx.Observable.pairs(obj);\n     *\n     * var subscription = source.subscribe(\n     *   function (x) {\n     *     console.log('Next: %s', x);\n     *   },\n     *   function (err) {\n     *     console.log('Error: %s', err);\n     *   },\n     *   function () {\n     *     console.log('Completed');\n     *   });\n     *\n     * @param {Object} obj The object to inspect and turn into an\n     * Observable sequence.\n     * @param {Scheduler} [scheduler] An optional IScheduler to run the\n     * enumeration of the input sequence on.\n     * @returns {(Observable<Array<string | T>>)} An observable sequence of\n     * [key, value] pairs from the object.\n     */\n    PairsObservable.create = function (obj, scheduler) {\n        return new PairsObservable(obj, scheduler);\n    };\n    PairsObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, keys = _a.keys, scheduler = _a.scheduler;\n        var length = keys.length;\n        if (scheduler) {\n            return scheduler.schedule(dispatch, 0, {\n                obj: this.obj, keys: keys, length: length, index: 0, subscriber: subscriber\n            });\n        }\n        else {\n            for (var idx = 0; idx < length; idx++) {\n                var key = keys[idx];\n                subscriber.next([key, this.obj[key]]);\n            }\n            subscriber.complete();\n        }\n    };\n    return PairsObservable;\n}(Observable_1.Observable));\nexports.PairsObservable = PairsObservable;\n//# sourceMappingURL=PairsObservable.js.map","\"use strict\";\nvar PairsObservable_1 = require('./PairsObservable');\nexports.pairs = PairsObservable_1.PairsObservable.create;\n//# sourceMappingURL=pairs.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pairs_1 = require('../../observable/pairs');\nObservable_1.Observable.pairs = pairs_1.pairs;\n//# sourceMappingURL=pairs.js.map","\"use strict\";\nvar onErrorResumeNext_1 = require('../operators/onErrorResumeNext');\nexports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNextStatic;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar onErrorResumeNext_1 = require('../../observable/onErrorResumeNext');\nObservable_1.Observable.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar of_1 = require('../../observable/of');\nObservable_1.Observable.of = of_1.of;\n//# sourceMappingURL=of.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar noop_1 = require('../util/noop');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar NeverObservable = (function (_super) {\n    __extends(NeverObservable, _super);\n    function NeverObservable() {\n        _super.call(this);\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer.\n     *\n     * <span class=\"informal\">An Observable that never emits anything.</span>\n     *\n     * <img src=\"./img/never.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that emits\n     * neither values nor errors nor the completion notification. It can be used\n     * for testing purposes or for composing with other Observables. Please note\n     * that by never emitting a complete notification, this Observable keeps the\n     * subscription from being disposed automatically. Subscriptions need to be\n     * manually disposed.\n     *\n     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n     * function info() {\n     *   console.log('Will not be called');\n     * }\n     * var result = Rx.Observable.never().startWith(7);\n     * result.subscribe(x => console.log(x), info, info);\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @return {Observable} A \"never\" Observable: never emits anything.\n     * @static true\n     * @name never\n     * @owner Observable\n     */\n    NeverObservable.create = function () {\n        return new NeverObservable();\n    };\n    NeverObservable.prototype._subscribe = function (subscriber) {\n        noop_1.noop();\n    };\n    return NeverObservable;\n}(Observable_1.Observable));\nexports.NeverObservable = NeverObservable;\n//# sourceMappingURL=NeverObservable.js.map","\"use strict\";\nvar NeverObservable_1 = require('./NeverObservable');\nexports.never = NeverObservable_1.NeverObservable.create;\n//# sourceMappingURL=never.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar never_1 = require('../../observable/never');\nObservable_1.Observable.never = never_1.never;\n//# sourceMappingURL=never.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar race_1 = require('../../observable/race');\nObservable_1.Observable.race = race_1.race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar merge_1 = require('../../observable/merge');\nObservable_1.Observable.merge = merge_1.merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) { delay = 0; }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexports.Scheduler = Scheduler;\n//# sourceMappingURL=Scheduler.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = (function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        return this;\n    };\n    return Action;\n}(Subscription_1.Subscription));\nexports.Action = Action;\n//# sourceMappingURL=Action.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IntervalObservable = (function (_super) {\n    __extends(IntervalObservable, _super);\n    function IntervalObservable(period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        _super.call(this);\n        this.period = period;\n        this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(period) || period < 0) {\n            this.period = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = async_1.async;\n        }\n    }\n    /**\n     * Creates an Observable that emits sequential numbers every specified\n     * interval of time, on a specified IScheduler.\n     *\n     * <span class=\"informal\">Emits incremental numbers periodically in time.\n     * </span>\n     *\n     * <img src=\"./img/interval.png\" width=\"100%\">\n     *\n     * `interval` returns an Observable that emits an infinite sequence of\n     * ascending integers, with a constant interval of time of your choosing\n     * between those emissions. The first emission is not sent immediately, but\n     * only after the first period has passed. By default, this operator uses the\n     * `async` IScheduler to provide a notion of time, but you may pass any\n     * IScheduler to it.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n     * var numbers = Rx.Observable.interval(1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link delay}\n     *\n     * @param {number} [period=0] The interval size in milliseconds (by default)\n     * or the time unit determined by the scheduler's clock.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a sequential number each time\n     * interval.\n     * @static true\n     * @name interval\n     * @owner Observable\n     */\n    IntervalObservable.create = function (period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        return new IntervalObservable(period, scheduler);\n    };\n    IntervalObservable.dispatch = function (state) {\n        var index = state.index, subscriber = state.subscriber, period = state.period;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index += 1;\n        this.schedule(state, period);\n    };\n    IntervalObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var period = this.period;\n        var scheduler = this.scheduler;\n        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n            index: index, subscriber: subscriber, period: period\n        }));\n    };\n    return IntervalObservable;\n}(Observable_1.Observable));\nexports.IntervalObservable = IntervalObservable;\n//# sourceMappingURL=IntervalObservable.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar interval_1 = require('../../observable/interval');\nObservable_1.Observable.interval = interval_1.interval;\n//# sourceMappingURL=interval.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IfObservable = (function (_super) {\n    __extends(IfObservable, _super);\n    function IfObservable(condition, thenSource, elseSource) {\n        _super.call(this);\n        this.condition = condition;\n        this.thenSource = thenSource;\n        this.elseSource = elseSource;\n    }\n    IfObservable.create = function (condition, thenSource, elseSource) {\n        return new IfObservable(condition, thenSource, elseSource);\n    };\n    IfObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n        return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n    };\n    return IfObservable;\n}(Observable_1.Observable));\nexports.IfObservable = IfObservable;\nvar IfSubscriber = (function (_super) {\n    __extends(IfSubscriber, _super);\n    function IfSubscriber(destination, condition, thenSource, elseSource) {\n        _super.call(this, destination);\n        this.condition = condition;\n        this.thenSource = thenSource;\n        this.elseSource = elseSource;\n        this.tryIf();\n    }\n    IfSubscriber.prototype.tryIf = function () {\n        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n        var result;\n        try {\n            result = condition();\n            var source = result ? thenSource : elseSource;\n            if (source) {\n                this.add(subscribeToResult_1.subscribeToResult(this, source));\n            }\n            else {\n                this._complete();\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    return IfSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=IfObservable.js.map","\"use strict\";\nvar IfObservable_1 = require('./IfObservable');\nexports._if = IfObservable_1.IfObservable.create;\n//# sourceMappingURL=if.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar if_1 = require('../../observable/if');\nObservable_1.Observable.if = if_1._if;\n//# sourceMappingURL=if.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar isScheduler_1 = require('../util/isScheduler');\nvar selfSelector = function (value) { return value; };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar GenerateObservable = (function (_super) {\n    __extends(GenerateObservable, _super);\n    function GenerateObservable(initialState, condition, iterate, resultSelector, scheduler) {\n        _super.call(this);\n        this.initialState = initialState;\n        this.condition = condition;\n        this.iterate = iterate;\n        this.resultSelector = resultSelector;\n        this.scheduler = scheduler;\n    }\n    GenerateObservable.create = function (initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {\n        if (arguments.length == 1) {\n            return new GenerateObservable(initialStateOrOptions.initialState, initialStateOrOptions.condition, initialStateOrOptions.iterate, initialStateOrOptions.resultSelector || selfSelector, initialStateOrOptions.scheduler);\n        }\n        if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {\n            return new GenerateObservable(initialStateOrOptions, condition, iterate, selfSelector, resultSelectorOrObservable);\n        }\n        return new GenerateObservable(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler);\n    };\n    GenerateObservable.prototype._subscribe = function (subscriber) {\n        var state = this.initialState;\n        if (this.scheduler) {\n            return this.scheduler.schedule(GenerateObservable.dispatch, 0, {\n                subscriber: subscriber,\n                iterate: this.iterate,\n                condition: this.condition,\n                resultSelector: this.resultSelector,\n                state: state });\n        }\n        var _a = this, condition = _a.condition, resultSelector = _a.resultSelector, iterate = _a.iterate;\n        do {\n            if (condition) {\n                var conditionResult = void 0;\n                try {\n                    conditionResult = condition(state);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (!conditionResult) {\n                    subscriber.complete();\n                    break;\n                }\n            }\n            var value = void 0;\n            try {\n                value = resultSelector(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n            subscriber.next(value);\n            if (subscriber.closed) {\n                break;\n            }\n            try {\n                state = iterate(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n        } while (true);\n    };\n    GenerateObservable.dispatch = function (state) {\n        var subscriber = state.subscriber, condition = state.condition;\n        if (subscriber.closed) {\n            return;\n        }\n        if (state.needIterate) {\n            try {\n                state.state = state.iterate(state.state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n        }\n        else {\n            state.needIterate = true;\n        }\n        if (condition) {\n            var conditionResult = void 0;\n            try {\n                conditionResult = condition(state.state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n            if (!conditionResult) {\n                subscriber.complete();\n                return;\n            }\n            if (subscriber.closed) {\n                return;\n            }\n        }\n        var value;\n        try {\n            value = state.resultSelector(state.state);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return;\n        }\n        if (subscriber.closed) {\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        return this.schedule(state);\n    };\n    return GenerateObservable;\n}(Observable_1.Observable));\nexports.GenerateObservable = GenerateObservable;\n//# sourceMappingURL=GenerateObservable.js.map","\"use strict\";\nvar GenerateObservable_1 = require('./GenerateObservable');\nexports.generate = GenerateObservable_1.GenerateObservable.create;\n//# sourceMappingURL=generate.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar generate_1 = require('../../observable/generate');\nObservable_1.Observable.generate = generate_1.generate;\n//# sourceMappingURL=generate.js.map","\"use strict\";\nvar PromiseObservable_1 = require('./PromiseObservable');\nexports.fromPromise = PromiseObservable_1.PromiseObservable.create;\n//# sourceMappingURL=fromPromise.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromPromise_1 = require('../../observable/fromPromise');\nObservable_1.Observable.fromPromise = fromPromise_1.fromPromise;\n//# sourceMappingURL=fromPromise.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('../util/isFunction');\nvar Observable_1 = require('../Observable');\nvar Subscription_1 = require('../Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventPatternObservable = (function (_super) {\n    __extends(FromEventPatternObservable, _super);\n    function FromEventPatternObservable(addHandler, removeHandler, selector) {\n        _super.call(this);\n        this.addHandler = addHandler;\n        this.removeHandler = removeHandler;\n        this.selector = selector;\n    }\n    /**\n     * Creates an Observable from an API based on addHandler/removeHandler\n     * functions.\n     *\n     * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n     * Observable.</span>\n     *\n     * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n     *\n     * Creates an Observable by using the `addHandler` and `removeHandler`\n     * functions to add and remove the handlers, with an optional selector\n     * function to project the event arguments to a result. The `addHandler` is\n     * called when the output Observable is subscribed, and `removeHandler` is\n     * called when the Subscription is unsubscribed.\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * function addClickHandler(handler) {\n     *   document.addEventListener('click', handler);\n     * }\n     *\n     * function removeClickHandler(handler) {\n     *   document.removeEventListener('click', handler);\n     * }\n     *\n     * var clicks = Rx.Observable.fromEventPattern(\n     *   addClickHandler,\n     *   removeClickHandler\n     * );\n     * clicks.subscribe(x => console.log(x));\n     *\n     * @see {@link from}\n     * @see {@link fromEvent}\n     *\n     * @param {function(handler: Function): any} addHandler A function that takes\n     * a `handler` function as argument and attaches it somehow to the actual\n     * source of events.\n     * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n     * takes a `handler` function as argument and removes it in case it was\n     * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n     * removeHandler function will forward it.\n     * @param {function(...args: any): T} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEventPattern\n     * @owner Observable\n     */\n    FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {\n        return new FromEventPatternObservable(addHandler, removeHandler, selector);\n    };\n    FromEventPatternObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var removeHandler = this.removeHandler;\n        var handler = !!this.selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            _this._callSelector(subscriber, args);\n        } : function (e) { subscriber.next(e); };\n        var retValue = this._callAddHandler(handler, subscriber);\n        if (!isFunction_1.isFunction(removeHandler)) {\n            return;\n        }\n        subscriber.add(new Subscription_1.Subscription(function () {\n            //TODO: determine whether or not to forward to error handler\n            removeHandler(handler, retValue);\n        }));\n    };\n    FromEventPatternObservable.prototype._callSelector = function (subscriber, args) {\n        try {\n            var result = this.selector.apply(this, args);\n            subscriber.next(result);\n        }\n        catch (e) {\n            subscriber.error(e);\n        }\n    };\n    FromEventPatternObservable.prototype._callAddHandler = function (handler, errorSubscriber) {\n        try {\n            return this.addHandler(handler) || null;\n        }\n        catch (e) {\n            errorSubscriber.error(e);\n        }\n    };\n    return FromEventPatternObservable;\n}(Observable_1.Observable));\nexports.FromEventPatternObservable = FromEventPatternObservable;\n//# sourceMappingURL=FromEventPatternObservable.js.map","\"use strict\";\nvar FromEventPatternObservable_1 = require('./FromEventPatternObservable');\nexports.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;\n//# sourceMappingURL=fromEventPattern.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromEventPattern_1 = require('../../observable/fromEventPattern');\nObservable_1.Observable.fromEventPattern = fromEventPattern_1.fromEventPattern;\n//# sourceMappingURL=fromEventPattern.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar isFunction_1 = require('../util/isFunction');\nvar errorObject_1 = require('../util/errorObject');\nvar Subscription_1 = require('../Subscription');\nvar toString = Object.prototype.toString;\nfunction isNodeStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isNodeList(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\nfunction isHTMLCollection(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\nfunction isEventTarget(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventObservable = (function (_super) {\n    __extends(FromEventObservable, _super);\n    function FromEventObservable(sourceObj, eventName, selector, options) {\n        _super.call(this);\n        this.sourceObj = sourceObj;\n        this.eventName = eventName;\n        this.selector = selector;\n        this.options = options;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Creates an Observable that emits events of a specific type coming from the\n     * given event target.\n     *\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n     * EventEmitter events or others.</span>\n     *\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n     *\n     * `fromEvent` accepts as a first argument event target, which is an object with methods\n     * for registering event handler functions. As a second argument it takes string that indicates\n     * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n     * which are described in detail below. If your event target does not match any of the ones listed,\n     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n     * handler functions have different names, but they all accept a string describing event type\n     * and function itself, which will be called whenever said event happens.\n     *\n     * Every time resulting Observable is subscribed, event handler function will be registered\n     * to event target on given event type. When that event fires, value\n     * passed as a first argument to registered function will be emitted by output Observable.\n     * When Observable is unsubscribed, function will be unregistered from event target.\n     *\n     * Note that if event target calls registered function with more than one argument, second\n     * and following arguments will not appear in resulting stream. In order to get access to them,\n     * you can pass to `fromEvent` optional project function, which will be called with all arguments\n     * passed to event handler. Output Observable will then emit value returned by project function,\n     * instead of the usual value.\n     *\n     * Remember that event targets listed below are checked via duck typing. It means that\n     * no matter what kind of object you have and no matter what environment you work in,\n     * you can safely use `fromEvent` on that object if it exposes described methods (provided\n     * of course they behave as was described above). So for example if Node.js library exposes\n     * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n     * a good choice.\n     *\n     * If the API you use is more callback then event handler oriented (subscribed\n     * callback function fires only once and thus there is no need to manually\n     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n     * instead.\n     *\n     * `fromEvent` supports following types of event targets:\n     *\n     * **DOM EventTarget**\n     *\n     * This is an object with `addEventListener` and `removeEventListener` methods.\n     *\n     * In the browser, `addEventListener` accepts - apart from event type string and event\n     * handler function arguments - optional third parameter, which is either an object or boolean,\n     * both used for additional configuration how and when passed function will be called. When\n     * `fromEvent` is used with event target of that type, you can provide this values\n     * as third parameter as well.\n     *\n     * **Node.js EventEmitter**\n     *\n     * An object with `addListener` and `removeListener` methods.\n     *\n     * **JQuery-style event target**\n     *\n     * An object with `on` and `off` methods\n     *\n     * **DOM NodeList**\n     *\n     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n     *\n     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n     * it contains and install event handler function in every of them. When returned Observable\n     * is unsubscribed, function will be removed from all Nodes.\n     *\n     * **DOM HtmlCollection**\n     *\n     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n     * installed and removed in each of elements.\n     *\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\n     * clicks.subscribe(x => console.log(x));\n     *\n     * // Results in:\n     * // MouseEvent object logged to console every time a click\n     * // occurs on the document.\n     *\n     *\n     * @example <caption>Use addEventListener with capture option</caption>\n     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n     *                                                                          // which will be passed to addEventListener\n     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n     *\n     * clicksInDocument.subscribe(() => console.log('document'));\n     * clicksInDiv.subscribe(() => console.log('div'));\n     *\n     * // By default events bubble UP in DOM tree, so normally\n     * // when we would click on div in document\n     * // \"div\" would be logged first and then \"document\".\n     * // Since we specified optional `capture` option, document\n     * // will catch event when it goes DOWN DOM tree, so console\n     * // will log \"document\" and then \"div\".\n     *\n     * @see {@link bindCallback}\n     * @see {@link bindNodeCallback}\n     * @see {@link fromEventPattern}\n     *\n     * @param {EventTargetLike} target The DOM EventTarget, Node.js\n     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n     * @param {string} eventName The event name of interest, being emitted by the\n     * `target`.\n     * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEvent\n     * @owner Observable\n     */\n    FromEventObservable.create = function (target, eventName, options, selector) {\n        if (isFunction_1.isFunction(options)) {\n            selector = options;\n            options = undefined;\n        }\n        return new FromEventObservable(target, eventName, selector, options);\n    };\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n        var unsubscribe;\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n            }\n        }\n        else if (isEventTarget(sourceObj)) {\n            var source_1 = sourceObj;\n            sourceObj.addEventListener(eventName, handler, options);\n            unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };\n        }\n        else if (isJQueryStyleEventEmitter(sourceObj)) {\n            var source_2 = sourceObj;\n            sourceObj.on(eventName, handler);\n            unsubscribe = function () { return source_2.off(eventName, handler); };\n        }\n        else if (isNodeStyleEventEmitter(sourceObj)) {\n            var source_3 = sourceObj;\n            sourceObj.addListener(eventName, handler);\n            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\n        }\n        else {\n            throw new TypeError('Invalid event target');\n        }\n        subscriber.add(new Subscription_1.Subscription(unsubscribe));\n    };\n    FromEventObservable.prototype._subscribe = function (subscriber) {\n        var sourceObj = this.sourceObj;\n        var eventName = this.eventName;\n        var options = this.options;\n        var selector = this.selector;\n        var handler = selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var result = tryCatch_1.tryCatch(selector).apply(void 0, args);\n            if (result === errorObject_1.errorObject) {\n                subscriber.error(errorObject_1.errorObject.e);\n            }\n            else {\n                subscriber.next(result);\n            }\n        } : function (e) { return subscriber.next(e); };\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n    };\n    return FromEventObservable;\n}(Observable_1.Observable));\nexports.FromEventObservable = FromEventObservable;\n//# sourceMappingURL=FromEventObservable.js.map","\"use strict\";\nvar FromEventObservable_1 = require('./FromEventObservable');\nexports.fromEvent = FromEventObservable_1.FromEventObservable.create;\n//# sourceMappingURL=fromEvent.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromEvent_1 = require('../../observable/fromEvent');\nObservable_1.Observable.fromEvent = fromEvent_1.fromEvent;\n//# sourceMappingURL=fromEvent.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar from_1 = require('../../observable/from');\nObservable_1.Observable.from = from_1.from;\n//# sourceMappingURL=from.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isArray_1 = require('../util/isArray');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ForkJoinObservable = (function (_super) {\n    __extends(ForkJoinObservable, _super);\n    function ForkJoinObservable(sources, resultSelector) {\n        _super.call(this);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Joins last values emitted by passed Observables.\n     *\n     * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n     *\n     * <img src=\"./img/forkJoin.png\" width=\"100%\">\n     *\n     * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n     * or directly as arguments. If no input Observables are provided, resulting stream will complete\n     * immediately.\n     *\n     * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n     * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n     * array will have `n` values, where first value is the last thing emitted by the first Observable,\n     * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n     * not emit more than once and it will complete after that. If you need to emit combined values not only\n     * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n     * or {@link zip} instead.\n     *\n     * In order for resulting array to have the same length as the number of input Observables, whenever any of\n     * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n     * and it will not emit anything either, even if it already has some last values from other Observables.\n     * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n     * unless at any point some other Observable completes without emitting value, which brings us back to\n     * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n     * have to emit something at least once and complete.\n     *\n     * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n     * will be immediately unsubscribed.\n     *\n     * Optionally `forkJoin` accepts project function, that will be called with values which normally\n     * would land in emitted array. Whatever is returned by project function, will appear in output\n     * Observable instead. This means that default project can be thought of as a function that takes\n     * all its arguments and puts them into an array. Note that project function will be called only\n     * when output Observable is supposed to emit a result.\n     *\n     * @example <caption>Use forkJoin with operator emitting immediately</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.of(1, 2, 3, 4),\n     *   Rx.Observable.of(5, 6, 7, 8)\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [4, 8]\n     * // \"This is how it ends!\"\n     *\n     *\n     * @example <caption>Use forkJoin with operator emitting after some time</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [2, 3] after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     *\n     * @example <caption>Use forkJoin with project function</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n     *   (n, m) => n + m\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // 5 after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     * @see {@link combineLatest}\n     * @see {@link zip}\n     *\n     * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n     * passed directly to the operator.\n     * @param {function} [project] Function that takes values emitted by input Observables and returns value\n     * that will appear in resulting Observable instead of default array.\n     * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n     * or value from project function.\n     * @static true\n     * @name forkJoin\n     * @owner Observable\n     */\n    ForkJoinObservable.create = function () {\n        var sources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            sources[_i - 0] = arguments[_i];\n        }\n        if (sources === null || arguments.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        var resultSelector = null;\n        if (typeof sources[sources.length - 1] === 'function') {\n            resultSelector = sources.pop();\n        }\n        // if the first and only other argument besides the resultSelector is an array\n        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n        if (sources.length === 1 && isArray_1.isArray(sources[0])) {\n            sources = sources[0];\n        }\n        if (sources.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        return new ForkJoinObservable(sources, resultSelector);\n    };\n    ForkJoinObservable.prototype._subscribe = function (subscriber) {\n        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n    };\n    return ForkJoinObservable;\n}(Observable_1.Observable));\nexports.ForkJoinObservable = ForkJoinObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ForkJoinSubscriber = (function (_super) {\n    __extends(ForkJoinSubscriber, _super);\n    function ForkJoinSubscriber(destination, sources, resultSelector) {\n        _super.call(this, destination);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n        this.completed = 0;\n        this.haveValues = 0;\n        var len = sources.length;\n        this.total = len;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            var source = sources[i];\n            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);\n            if (innerSubscription) {\n                innerSubscription.outerIndex = i;\n                this.add(innerSubscription);\n            }\n        }\n    }\n    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    };\n    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n        var destination = this.destination;\n        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;\n        var len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            var value = resultSelector ? resultSelector.apply(this, values) : values;\n            destination.next(value);\n        }\n        destination.complete();\n    };\n    return ForkJoinSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=ForkJoinObservable.js.map","\"use strict\";\nvar ForkJoinObservable_1 = require('./ForkJoinObservable');\nexports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;\n//# sourceMappingURL=forkJoin.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar forkJoin_1 = require('../../observable/forkJoin');\nObservable_1.Observable.forkJoin = forkJoin_1.forkJoin;\n//# sourceMappingURL=forkJoin.js.map","\"use strict\";\nvar EmptyObservable_1 = require('./EmptyObservable');\nexports.empty = EmptyObservable_1.EmptyObservable.create;\n//# sourceMappingURL=empty.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar empty_1 = require('../../observable/empty');\nObservable_1.Observable.empty = empty_1.empty;\n//# sourceMappingURL=empty.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar DeferObservable = (function (_super) {\n    __extends(DeferObservable, _super);\n    function DeferObservable(observableFactory) {\n        _super.call(this);\n        this.observableFactory = observableFactory;\n    }\n    /**\n     * Creates an Observable that, on subscribe, calls an Observable factory to\n     * make an Observable for each new Observer.\n     *\n     * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n     * is subscribed.\n     * </span>\n     *\n     * <img src=\"./img/defer.png\" width=\"100%\">\n     *\n     * `defer` allows you to create the Observable only when the Observer\n     * subscribes, and create a fresh Observable for each Observer. It waits until\n     * an Observer subscribes to it, and then it generates an Observable,\n     * typically with an Observable factory function. It does this afresh for each\n     * subscriber, so although each subscriber may think it is subscribing to the\n     * same Observable, in fact each subscriber gets its own individual\n     * Observable.\n     *\n     * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n     * var clicksOrInterval = Rx.Observable.defer(function () {\n     *   if (Math.random() > 0.5) {\n     *     return Rx.Observable.fromEvent(document, 'click');\n     *   } else {\n     *     return Rx.Observable.interval(1000);\n     *   }\n     * });\n     * clicksOrInterval.subscribe(x => console.log(x));\n     *\n     * // Results in the following behavior:\n     * // If the result of Math.random() is greater than 0.5 it will listen\n     * // for clicks anywhere on the \"document\"; when document is clicked it\n     * // will log a MouseEvent object to the console. If the result is less\n     * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n     *\n     * @see {@link create}\n     *\n     * @param {function(): SubscribableOrPromise} observableFactory The Observable\n     * factory function to invoke for each Observer that subscribes to the output\n     * Observable. May also return a Promise, which will be converted on the fly\n     * to an Observable.\n     * @return {Observable} An Observable whose Observers' subscriptions trigger\n     * an invocation of the given Observable factory function.\n     * @static true\n     * @name defer\n     * @owner Observable\n     */\n    DeferObservable.create = function (observableFactory) {\n        return new DeferObservable(observableFactory);\n    };\n    DeferObservable.prototype._subscribe = function (subscriber) {\n        return new DeferSubscriber(subscriber, this.observableFactory);\n    };\n    return DeferObservable;\n}(Observable_1.Observable));\nexports.DeferObservable = DeferObservable;\nvar DeferSubscriber = (function (_super) {\n    __extends(DeferSubscriber, _super);\n    function DeferSubscriber(destination, factory) {\n        _super.call(this, destination);\n        this.factory = factory;\n        this.tryDefer();\n    }\n    DeferSubscriber.prototype.tryDefer = function () {\n        try {\n            this._callFactory();\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    DeferSubscriber.prototype._callFactory = function () {\n        var result = this.factory();\n        if (result) {\n            this.add(subscribeToResult_1.subscribeToResult(this, result));\n        }\n    };\n    return DeferSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=DeferObservable.js.map","\"use strict\";\nvar DeferObservable_1 = require('./DeferObservable');\nexports.defer = DeferObservable_1.DeferObservable.create;\n//# sourceMappingURL=defer.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar defer_1 = require('../../observable/defer');\nObservable_1.Observable.defer = defer_1.defer;\n//# sourceMappingURL=defer.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayLikeObservable = (function (_super) {\n    __extends(ArrayLikeObservable, _super);\n    function ArrayLikeObservable(arrayLike, scheduler) {\n        _super.call(this);\n        this.arrayLike = arrayLike;\n        this.scheduler = scheduler;\n        if (!scheduler && arrayLike.length === 1) {\n            this._isScalar = true;\n            this.value = arrayLike[0];\n        }\n    }\n    ArrayLikeObservable.create = function (arrayLike, scheduler) {\n        var length = arrayLike.length;\n        if (length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else if (length === 1) {\n            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);\n        }\n        else {\n            return new ArrayLikeObservable(arrayLike, scheduler);\n        }\n    };\n    ArrayLikeObservable.dispatch = function (state) {\n        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;\n        if (subscriber.closed) {\n            return;\n        }\n        if (index >= length) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(arrayLike[index]);\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;\n        var length = arrayLike.length;\n        if (scheduler) {\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < length && !subscriber.closed; i++) {\n                subscriber.next(arrayLike[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayLikeObservable;\n}(Observable_1.Observable));\nexports.ArrayLikeObservable = ArrayLikeObservable;\n//# sourceMappingURL=ArrayLikeObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Observable_1 = require('../Observable');\nvar iterator_1 = require('../symbol/iterator');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IteratorObservable = (function (_super) {\n    __extends(IteratorObservable, _super);\n    function IteratorObservable(iterator, scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n        if (iterator == null) {\n            throw new Error('iterator cannot be null.');\n        }\n        this.iterator = getIterator(iterator);\n    }\n    IteratorObservable.create = function (iterator, scheduler) {\n        return new IteratorObservable(iterator, scheduler);\n    };\n    IteratorObservable.dispatch = function (state) {\n        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;\n        if (hasError) {\n            subscriber.error(state.error);\n            return;\n        }\n        var result = iterator.next();\n        if (result.done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(result.value);\n        state.index = index + 1;\n        if (subscriber.closed) {\n            if (typeof iterator.return === 'function') {\n                iterator.return();\n            }\n            return;\n        }\n        this.schedule(state);\n    };\n    IteratorObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n                index: index, iterator: iterator, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                var result = iterator.next();\n                if (result.done) {\n                    subscriber.complete();\n                    break;\n                }\n                else {\n                    subscriber.next(result.value);\n                }\n                if (subscriber.closed) {\n                    if (typeof iterator.return === 'function') {\n                        iterator.return();\n                    }\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return IteratorObservable;\n}(Observable_1.Observable));\nexports.IteratorObservable = IteratorObservable;\nvar StringIterator = (function () {\n    function StringIterator(str, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = str.length; }\n        this.str = str;\n        this.idx = idx;\n        this.len = len;\n    }\n    StringIterator.prototype[iterator_1.iterator] = function () { return (this); };\n    StringIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.str.charAt(this.idx++)\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return StringIterator;\n}());\nvar ArrayIterator = (function () {\n    function ArrayIterator(arr, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = toLength(arr); }\n        this.arr = arr;\n        this.idx = idx;\n        this.len = len;\n    }\n    ArrayIterator.prototype[iterator_1.iterator] = function () { return this; };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return ArrayIterator;\n}());\nfunction getIterator(obj) {\n    var i = obj[iterator_1.iterator];\n    if (!i && typeof obj === 'string') {\n        return new StringIterator(obj);\n    }\n    if (!i && obj.length !== undefined) {\n        return new ArrayIterator(obj);\n    }\n    if (!i) {\n        throw new TypeError('object is not iterable');\n    }\n    return obj[iterator_1.iterator]();\n}\nvar maxSafeInteger = Math.pow(2, 53) - 1;\nfunction toLength(o) {\n    var len = +o.length;\n    if (isNaN(len)) {\n        return 0;\n    }\n    if (len === 0 || !numberIsFinite(len)) {\n        return len;\n    }\n    len = sign(len) * Math.floor(Math.abs(len));\n    if (len <= 0) {\n        return 0;\n    }\n    if (len > maxSafeInteger) {\n        return maxSafeInteger;\n    }\n    return len;\n}\nfunction numberIsFinite(value) {\n    return typeof value === 'number' && root_1.root.isFinite(value);\n}\nfunction sign(value) {\n    var valueAsNumber = +value;\n    if (valueAsNumber === 0) {\n        return valueAsNumber;\n    }\n    if (isNaN(valueAsNumber)) {\n        return valueAsNumber;\n    }\n    return valueAsNumber < 0 ? -1 : 1;\n}\n//# sourceMappingURL=IteratorObservable.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concat_1 = require('../../observable/concat');\nObservable_1.Observable.concat = concat_1.concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = (function (_super) {\n    __extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber_1.Subscriber));\nexports.InnerSubscriber = InnerSubscriber;\n//# sourceMappingURL=InnerSubscriber.js.map","\"use strict\";\nvar isScheduler_1 = require('../util/isScheduler');\nvar isArray_1 = require('../util/isArray');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar combineLatest_1 = require('../operators/combineLatest');\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    var scheduler = null;\n    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new combineLatest_1.CombineLatestOperator(project));\n}\nexports.combineLatest = combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineLatest_1 = require('../../observable/combineLatest');\nObservable_1.Observable.combineLatest = combineLatest_1.combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundNodeCallbackObservable = (function (_super) {\n    __extends(BoundNodeCallbackObservable, _super);\n    function BoundNodeCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a Node.js-style callback API to a function that returns an\n     * Observable.\n     *\n     * <span class=\"informal\">It's just like {@link bindCallback}, but the\n     * callback is expected to be of type `callback(error, result)`.</span>\n     *\n     * `bindNodeCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, but the\n     * last parameter must be a callback function that `func` calls when it is\n     * done. The callback function is expected to follow Node.js conventions,\n     * where the first argument to the callback is an error object, signaling\n     * whether call was successful. If that object is passed to callback, it means\n     * something went wrong.\n     *\n     * The output of `bindNodeCallback` is a function that takes the same\n     * parameters as `func`, except the last one (the callback). When the output\n     * function is called with arguments, it will return an Observable.\n     * If `func` calls its callback with error parameter present, Observable will\n     * error with that value as well. If error parameter is not passed, Observable will emit\n     * second parameter. If there are more parameters (third and so on),\n     * Observable will emit an array with all arguments, except first error argument.\n     *\n     * Optionally `bindNodeCallback` accepts selector function, which allows you to\n     * make resulting Observable emit value computed by selector, instead of regular\n     * callback arguments. It works similarly to {@link bindCallback} selector, but\n     * Node.js-style error argument will never be passed to that function.\n     *\n     * Note that `func` will not be called at the same time output function is,\n     * but rather whenever resulting Observable is subscribed. By default call to\n     * `func` will happen synchronously after subscription, but that can be changed\n     * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n     * can also control when values from callback will be emitted by Observable.\n     * To find out more, check out documentation for {@link bindCallback}, where\n     * Scheduler works exactly the same.\n     *\n     * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n     * of returned function, when it is called.\n     *\n     * After Observable emits value, it will complete immediately. This means\n     * even if `func` calls callback again, values from second and consecutive\n     * calls will never appear on the stream. If you need to handle functions\n     * that call callbacks multiple times, check out {@link fromEvent} or\n     * {@link fromEventPattern} instead.\n     *\n     * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n     * \"Node.js-style\" callbacks are just a convention, so if you write for\n     * browsers or any other environment and API you use implements that callback style,\n     * `bindNodeCallback` can be safely used on that API functions as well.\n     *\n     * Remember that Error object passed to callback does not have to be an instance\n     * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n     * Error parameter of callback function is interpreted as \"present\", when value\n     * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n     * string or boolean `true`. In all of these cases resulting Observable would error\n     * with that value. This means usually regular style callbacks will fail very often when\n     * `bindNodeCallback` is used. If your Observable errors much more often then you\n     * would expect, check if callback really is called in Node.js-style and, if not,\n     * switch to {@link bindCallback} instead.\n     *\n     * Note that even if error parameter is technically present in callback, but its value\n     * is falsy, it still won't appear in array emitted by Observable or in selector function.\n     *\n     *\n     * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n     * import * as fs from 'fs';\n     * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n     * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Use on function calling callback with multiple arguments</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // null\n     *   console.log(a); // 5\n     *   console.log(b); // \"some string\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // [5, \"some string\"]\n     * });\n     *\n     *\n     * @example <caption>Use with selector function</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // undefined\n     *   console.log(a); // \"abc\"\n     *   console.log(b); // \"DEF\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // \"abcDEF\"\n     * });\n     *\n     *\n     * @example <caption>Use on function calling callback in regular style</caption>\n     * someFunction(a => {\n     *   console.log(a); // 5\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(\n     *   value => {}             // never gets called\n     *   err => console.log(err) // 5\n     *);\n     *\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func Function with a Node.js-style callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps those to a value to emit on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the Node.js callback would\n     * deliver.\n     * @static true\n     * @name bindNodeCallback\n     * @owner Observable\n     */\n    BoundNodeCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundNodeCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    var err = innerArgs.shift();\n                    if (err) {\n                        subject.error(err);\n                    }\n                    else if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    return BoundNodeCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;\nfunction dispatch(state) {\n    var self = this;\n    var source = state.source, subscriber = state.subscriber, context = state.context;\n    // XXX: cast to `any` to access to the private field in `source`.\n    var _a = source, callbackFunc = _a.callbackFunc, args = _a.args, scheduler = _a.scheduler;\n    var subject = source.subject;\n    if (!subject) {\n        subject = source.subject = new AsyncSubject_1.AsyncSubject();\n        var handler = function handlerFn() {\n            var innerArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                innerArgs[_i - 0] = arguments[_i];\n            }\n            var source = handlerFn.source;\n            var selector = source.selector, subject = source.subject;\n            var err = innerArgs.shift();\n            if (err) {\n                self.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));\n            }\n            else if (selector) {\n                var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                if (result_2 === errorObject_1.errorObject) {\n                    self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                }\n                else {\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                }\n            }\n            else {\n                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n            }\n        };\n        // use named function to pass values in without closure\n        handler.source = source;\n        var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n        if (result === errorObject_1.errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n        }\n    }\n    self.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n//# sourceMappingURL=BoundNodeCallbackObservable.js.map","\"use strict\";\nvar BoundNodeCallbackObservable_1 = require('./BoundNodeCallbackObservable');\nexports.bindNodeCallback = BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create;\n//# sourceMappingURL=bindNodeCallback.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bindNodeCallback_1 = require('../../observable/bindNodeCallback');\nObservable_1.Observable.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;\n//# sourceMappingURL=bindNodeCallback.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundCallbackObservable = (function (_super) {\n    __extends(BoundCallbackObservable, _super);\n    function BoundCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a callback API to a function that returns an Observable.\n     *\n     * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n     * it will return a function `g` that when called as `g(x)` will output an\n     * Observable.</span>\n     *\n     * `bindCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, the\n     * last parameter must be a callback function that `func` calls when it is\n     * done.\n     *\n     * The output of `bindCallback` is a function that takes the same parameters\n     * as `func`, except the last one (the callback). When the output function\n     * is called with arguments it will return an Observable. If function `func`\n     * calls its callback with one argument the Observable will emit that value.\n     * If on the other hand the callback is called with multiple values the resulting\n     * Observable will emit an array with said values as arguments.\n     *\n     * It is very important to remember that input function `func` is not called\n     * when the output function is, but rather when the Observable returned by the output\n     * function is subscribed. This means if `func` makes an AJAX request, that request\n     * will be made every time someone subscribes to the resulting Observable, but not before.\n     *\n     * Optionally, a selector function can be passed to `bindObservable`. The selector function\n     * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n     * Even though by default multiple arguments passed to callback appear in the stream as an array\n     * the selector function will be called with arguments directly, just as the callback would.\n     * This means you can imagine the default selector (when one is not provided explicitly)\n     * as a function that aggregates all its arguments into an array, or simply returns first argument\n     * if there is only one.\n     *\n     * The last optional parameter - {@link Scheduler} - can be used to control when the call\n     * to `func` happens after someone subscribes to Observable, as well as when results\n     * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n     * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n     * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n     * and call `subscribe` on the output Observable all function calls that are currently executing\n     * will end before `func` is invoked.\n     *\n     * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n     * In particular, if the callback is called synchronously the subscription of the resulting Observable\n     * will call the `next` function synchronously as well.  If you want to defer that call,\n     * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n     * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n     *\n     * Note that the Observable created by the output function will always emit a single value\n     * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n     * calls will not appear in the stream. If you need to listen for multiple calls,\n     *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n     *\n     * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n     * will be the context that the output function has at call time. In particular, if `func`\n     * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n     * it is recommended that the context of the output function is set to that object as well.\n     *\n     * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n     * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n     * provides convenient error handling and probably is a better choice.\n     * `bindCallback` will treat such functions the same as any other and error parameters\n     * (whether passed or not) will always be interpreted as regular callback argument.\n     *\n     *\n     * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n     * // Suppose we have jQuery.getJSON('/my/url', callback)\n     * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n     * var result = getJSONAsObservable('/my/url');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Receive an array of arguments passed to a callback</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 5\n     *   console.log(b); // 'some string'\n     *   console.log(c); // {someProperty: 'someValue'}\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n     * boundSomeFunction().subscribe(values => {\n     *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n     * });\n     *\n     *\n     * @example <caption>Use bindCallback with a selector function</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 'a'\n     *   console.log(b); // 'b'\n     *   console.log(c); // 'c'\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n     * boundSomeFunction().subscribe(value => {\n     *   console.log(value) // 'abc'\n     * });\n     *\n     *\n     * @example <caption>Compare behaviour with and without async Scheduler</caption>\n     * function iCallMyCallbackSynchronously(cb) {\n     *   cb();\n     * }\n     *\n     * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n     * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n     *\n     * boundSyncFn().subscribe(() => console.log('I was sync!'));\n     * boundAsyncFn().subscribe(() => console.log('I was async!'));\n     * console.log('This happened...');\n     *\n     * // Logs:\n     * // I was sync!\n     * // This happened...\n     * // I was async!\n     *\n     *\n     * @example <caption>Use bindCallback on an object method</caption>\n     * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n     * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n     * .subscribe(subscriber);\n     *\n     *\n     * @see {@link bindNodeCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func A function with a callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps them to a value that is emitted on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the callback would deliver.\n     * @static true\n     * @name bindCallback\n     * @owner Observable\n     */\n    BoundCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    BoundCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    BoundCallbackObservable.dispatch = function (state) {\n        var self = this;\n        var source = state.source, subscriber = state.subscriber, context = state.context;\n        var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;\n        var subject = source.subject;\n        if (!subject) {\n            subject = source.subject = new AsyncSubject_1.AsyncSubject();\n            var handler = function handlerFn() {\n                var innerArgs = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    innerArgs[_i - 0] = arguments[_i];\n                }\n                var source = handlerFn.source;\n                var selector = source.selector, subject = source.subject;\n                if (selector) {\n                    var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                    if (result_2 === errorObject_1.errorObject) {\n                        self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                    }\n                    else {\n                        self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                    }\n                }\n                else {\n                    var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n                }\n            };\n            // use named function to pass values in without closure\n            handler.source = source;\n            var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n            if (result === errorObject_1.errorObject) {\n                subject.error(errorObject_1.errorObject.e);\n            }\n        }\n        self.add(subject.subscribe(subscriber));\n    };\n    return BoundCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundCallbackObservable = BoundCallbackObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n//# sourceMappingURL=BoundCallbackObservable.js.map","\"use strict\";\nvar BoundCallbackObservable_1 = require('./BoundCallbackObservable');\nexports.bindCallback = BoundCallbackObservable_1.BoundCallbackObservable.create;\n//# sourceMappingURL=bindCallback.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bindCallback_1 = require('../../observable/bindCallback');\nObservable_1.Observable.bindCallback = bindCallback_1.bindCallback;\n//# sourceMappingURL=bindCallback.js.map","\"use strict\";\nvar Subscriber_1 = require('../Subscriber');\nvar rxSubscriber_1 = require('../symbol/rxSubscriber');\nvar Observer_1 = require('../Observer');\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_1.Subscriber(Observer_1.empty);\n    }\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\nexports.toSubscriber = toSubscriber;\n//# sourceMappingURL=toSubscriber.js.map"],"sourceRoot":""}